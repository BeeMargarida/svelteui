import{S as G,i as W,s as N,H as Ht,y as E,z as S,A as k,N as Mt,a7 as Vt,g as y,d as b,B as x,a as h,c as I,b as u,C as ue,h as o,q as f,r as m,e as Ct,a3 as Bt,k as $,l as _,m as v,Y as c,n as mt,al as At}from"../chunks/index.b0fe5a0f.js";import{I as Gt}from"../chunks/InfoCircled.ebf34b61.js";import"../chunks/navigation.9bd98935.js";import{H as Wt}from"../chunks/Heading.19c03976.js";import{D as X}from"../chunks/Demo.82a35c94.js";import{A as Nt}from"../chunks/Alert.f7feb653.js";import{E as Ut}from"../chunks/EnvelopeClosed.e1a97216.js";import{a as O}from"../chunks/Input.9e06e2ef.js";import{M as Pt}from"../chunks/MagnifyingGlass.b97ff8b6.js";import{B as qt}from"../chunks/Badge.22191722.js";function Ft(d){let t,a;const n=[{icon:Ut},d[0]];let l={};for(let s=0;s<n.length;s+=1)l=Ht(l,n[s]);return t=new O({props:l}),{c(){E(t.$$.fragment)},l(s){S(t.$$.fragment,s)},m(s,r){k(t,s,r),a=!0},p(s,[r]){const p=r&1?Mt(n,[r&0&&{icon:Ut},r&1&&Vt(s[0])]):{};t.$set(p)},i(s){a||(y(t.$$.fragment,s),a=!0)},o(s){b(t.$$.fragment,s),a=!1},d(s){x(t,s)}}}const Yt=(d,t)=>`<script>
  import { Input, InputWrapper } from '@svelteuidev/core';
  import { EnvelopeClosed } from 'radix-icons-svelte';
<\/script>

<Input icon={EnvelopeClosed} ${d} />`,Lt="configurator",Rt={codeTemplate:Yt,configurator:[{name:"variant",type:"select",data:[{label:"default",value:"default"},{label:"filled",value:"filled"},{label:"unstyled",value:"unstyled"},{label:"headless",value:"headless"}],initialValue:"default",defaultValue:"default"},{name:"placeholder",type:"string",initialValue:"Your email"},{name:"radius",type:"size",initialValue:"sm",defaultValue:"sm"},{name:"size",type:"size",initialValue:"sm",defaultValue:"sm"},{name:"disabled",type:"boolean",initialValue:!1,defaultValue:!1},{name:"invalid",type:"boolean",initialValue:!1,defaultValue:!1}],multiline:!0};function Jt(d,t,a){let{props:n={}}=t;return d.$$set=l=>{"props"in l&&a(0,n=l.props)},[n]}class Kt extends G{constructor(t){super(),W(this,t,Jt,Ft,N,{props:0})}}const Qt=Object.freeze(Object.defineProperty({__proto__:null,configuration:Rt,default:Kt,type:Lt},Symbol.toStringTag,{value:"Module"}));function Xt(d){let t,a,n,l,s,r;return t=new O({props:{variant:"default",placeholder:"Default variant"}}),n=new O({props:{variant:"filled",placeholder:"Filled variant"}}),s=new O({props:{variant:"unstyled",placeholder:"Unstyled variant"}}),{c(){E(t.$$.fragment),a=h(),E(n.$$.fragment),l=h(),E(s.$$.fragment)},l(p){S(t.$$.fragment,p),a=I(p),S(n.$$.fragment,p),l=I(p),S(s.$$.fragment,p)},m(p,g){k(t,p,g),u(p,a,g),k(n,p,g),u(p,l,g),k(s,p,g),r=!0},p:ue,i(p){r||(y(t.$$.fragment,p),y(n.$$.fragment,p),y(s.$$.fragment,p),r=!0)},o(p){b(t.$$.fragment,p),b(n.$$.fragment,p),b(s.$$.fragment,p),r=!1},d(p){x(t,p),p&&o(a),x(n,p),p&&o(l),x(s,p)}}}const Zt=`<script>
    import { Input } from '@svelteuidev/core';
<\/script>

<Input variant='default' placeholder='Default variant' />
<Input variant='filled' placeholder='Filled variant' />
<Input variant='unstyled' placeholder='Unstyled variant' />`,en="demo",tn={code:Zt};class nn extends G{constructor(t){super(),W(this,t,null,Xt,N,{})}}const sn=Object.freeze(Object.defineProperty({__proto__:null,configuration:tn,default:nn,type:en},Symbol.toStringTag,{value:"Module"}));function on(d){let t;return{c(){t=f("new")},l(a){t=m(a,"new")},m(a,n){u(a,t,n)},d(a){a&&o(t)}}}function an(d){let t,a;return t=new qt({props:{slot:"rightSection",color:"blue",variant:"filled",$$slots:{default:[on]},$$scope:{ctx:d}}}),{c(){E(t.$$.fragment)},l(n){S(t.$$.fragment,n)},m(n,l){k(t,n,l),a=!0},p(n,l){const s={};l&1&&(s.$$scope={dirty:l,ctx:n}),t.$set(s)},i(n){a||(y(t.$$.fragment,n),a=!0)},o(n){b(t.$$.fragment,n),a=!1},d(n){x(t,n)}}}function ln(d){let t,a;return t=new O({props:{icon:Pt,placeholder:"Search",rightSectionWidth:70,styles:{rightSection:{pointerEvents:"none"}},$$slots:{rightSection:[an]},$$scope:{ctx:d}}}),{c(){E(t.$$.fragment)},l(n){S(t.$$.fragment,n)},m(n,l){k(t,n,l),a=!0},p(n,[l]){const s={};l&1&&(s.$$scope={dirty:l,ctx:n}),t.$set(s)},i(n){a||(y(t.$$.fragment,n),a=!0)},o(n){b(t.$$.fragment,n),a=!1},d(n){x(t,n)}}}const rn=`<script>
    import { Badge, Input } from '@svelteuidev/core';
    import { MagnifyingGlass } from 'radix-icons-svelte';
<\/script>

<Input
    icon={MagnifyingGlass}
    placeholder='Search'
    rightSectionWidth={70}
    styles={{ rightSection: { pointerEvents: 'none' } }}
>
    <Badge slot='rightSection' color='blue' variant='filled'>
        new
    </Badge>
</Input>`,pn="demo",un={code:rn};class cn extends G{constructor(t){super(),W(this,t,null,ln,N,{})}}const fn=Object.freeze(Object.defineProperty({__proto__:null,configuration:un,default:cn,type:pn},Symbol.toStringTag,{value:"Module"}));function mn(d,t,a){const n=d.slice();return n[0]=t[a],n}function dn(d){let t,a;return t=new O({props:{size:d[0],placeholder:`${d[0]} input size`}}),{c(){E(t.$$.fragment)},l(n){S(t.$$.fragment,n)},m(n,l){k(t,n,l),a=!0},p:ue,i(n){a||(y(t.$$.fragment,n),a=!0)},o(n){b(t.$$.fragment,n),a=!1},d(n){x(t,n)}}}function $n(d){let t,a,n=["xs","sm","md","lg","xl"],l=[];for(let s=0;s<5;s+=1)l[s]=dn(mn(d,n,s));return{c(){for(let s=0;s<5;s+=1)l[s].c();t=Ct()},l(s){for(let r=0;r<5;r+=1)l[r].l(s);t=Ct()},m(s,r){for(let p=0;p<5;p+=1)l[p]&&l[p].m(s,r);u(s,t,r),a=!0},p:ue,i(s){if(!a){for(let r=0;r<5;r+=1)y(l[r]);a=!0}},o(s){l=l.filter(Boolean);for(let r=0;r<5;r+=1)b(l[r]);a=!1},d(s){Bt(l,s),s&&o(t)}}}const _n="demo",vn={};class hn extends G{constructor(t){super(),W(this,t,null,$n,N,{})}}const In=Object.freeze(Object.defineProperty({__proto__:null,configuration:vn,default:hn,type:_n},Symbol.toStringTag,{value:"Module"}));function gn(d){let t;return{c(){t=f("Button input")},l(a){t=m(a,"Button input")},m(a,n){u(a,t,n)},d(a){a&&o(t)}}}function yn(d){let t,a,n,l,s;return{c(){t=$("option"),a=f("1"),n=h(),l=$("option"),s=f("2"),this.h()},l(r){t=_(r,"OPTION",{});var p=v(t);a=m(p,"1"),p.forEach(o),n=I(r),l=_(r,"OPTION",{});var g=v(l);s=m(g,"2"),g.forEach(o),this.h()},h(){t.__value="1",t.value=t.__value,l.__value="2",l.value=l.__value},m(r,p){u(r,t,p),c(t,a),u(r,n,p),u(r,l,p),c(l,s)},p:ue,d(r){r&&o(t),r&&o(n),r&&o(l)}}}function bn(d){let t,a,n,l;return t=new O({props:{root:"button",$$slots:{default:[gn]},$$scope:{ctx:d}}}),n=new O({props:{root:"select",$$slots:{default:[yn]},$$scope:{ctx:d}}}),{c(){E(t.$$.fragment),a=h(),E(n.$$.fragment)},l(s){S(t.$$.fragment,s),a=I(s),S(n.$$.fragment,s)},m(s,r){k(t,s,r),u(s,a,r),k(n,s,r),l=!0},p(s,[r]){const p={};r&1&&(p.$$scope={dirty:r,ctx:s}),t.$set(p);const g={};r&1&&(g.$$scope={dirty:r,ctx:s}),n.$set(g)},i(s){l||(y(t.$$.fragment,s),y(n.$$.fragment,s),l=!0)},o(s){b(t.$$.fragment,s),b(n.$$.fragment,s),l=!1},d(s){x(t,s),s&&o(a),x(n,s)}}}const wn=`<script>
    import { Input } from '@svelteuidev/core';
<\/script>

<Input root="button">Button input</Input>
<Input root="select">
    <option value="1">1</option>
    <option value="2">2</option>
</Input>`,En="demo",Sn={code:wn};class kn extends G{constructor(t){super(),W(this,t,null,bn,N,{})}}const xn=Object.freeze(Object.defineProperty({__proto__:null,configuration:Sn,default:kn,type:En},Symbol.toStringTag,{value:"Module"}));function Tn(d){let t,a;return{c(){t=$("p"),a=f("$"),this.h()},l(n){t=_(n,"P",{slot:!0});var l=v(t);a=m(l,"$"),l.forEach(o),this.h()},h(){mt(t,"slot","rightSection")},m(n,l){u(n,t,l),c(t,a)},p:ue,d(n){n&&o(t)}}}function On(d){let t,a;return t=new O({props:{override:{input:{width:"100%",boxSizing:"border-box"}},icon:Pt,variant:"headless",placeholder:"Add your own styles with styles API",$$slots:{rightSection:[Tn]},$$scope:{ctx:d}}}),{c(){E(t.$$.fragment)},l(n){S(t.$$.fragment,n)},m(n,l){k(t,n,l),a=!0},p(n,[l]){const s={};l&1&&(s.$$scope={dirty:l,ctx:n}),t.$set(s)},i(n){a||(y(t.$$.fragment,n),a=!0)},o(n){b(t.$$.fragment,n),a=!1},d(n){x(t,n)}}}const zn=`<script>
    import { Input } from '@svelteuidev/core';
    import { MagnifyingGlass } from 'radix-icons-svelte';
<\/script>

<Input
    icon={MagnifyingGlass}
    variant="headless"
    placeholder="Add your own styles with styles API"
>
    <p slot="rightSection">$</p>
</Input>`,Cn="demo",Un={code:zn};class Pn extends G{constructor(t){super(),W(this,t,null,On,N,{})}}const Dn=Object.freeze(Object.defineProperty({__proto__:null,configuration:Un,default:Pn,type:Cn},Symbol.toStringTag,{value:"Module"}));function jn(d){let t;return{c(){t=f("In most cases, you should not use Input component in your application. The Input component is a base for other inputs and was not designed to be used directly.")},l(a){t=m(a,"In most cases, you should not use Input component in your application. The Input component is a base for other inputs and was not designed to be used directly.")},m(a,n){u(a,t,n)},d(a){a&&o(t)}}}function Hn(d){let t,a,n,l,s,r,p,g,ce,D,Dt=`<code class="language-svelte">// Incorrect usage, input is not accessible
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputWrapper</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputWrapper</span><span class="token punctuation">></span></span>

// Use TextInput instead of Input everywhere you want to use Input, // it is accessible by default
and includes InputWrapper
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextInput</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input label<span class="token punctuation">"</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input description<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code>`,fe,q,De,me,z,je,F,He,Me,de,j,$e,Y,Ve,_e,C,Be,Z,Ae,Ge,ve,H,he,L,We,Ie,R,Ne,ge,M,ye,J,qe,be,w,Fe,ee,Ye,Le,te,Re,Je,ne,Ke,Qe,se,Xe,Ze,oe,et,tt,ae,nt,st,we,V,Ee,K,ot,Se,U,at,le,lt,rt,ke,B,xe,Q,it,Te,P,pt,re,ut,ct,Oe,A,ie;return document.title=t=ft+" - SvelteUI",n=new Wt({props:{title:ft,group:Vn,packageGroup:Bn,slug:An,category:Gn,description:Wn,importCode:Nn,source:qn,docs:Fn}}),g=new Nt({props:{icon:Gt,title:"Important",color:"blue",$$slots:{default:[jn]},$$scope:{ctx:d}}}),j=new X({props:{demo:Qt}}),H=new X({props:{demo:sn}}),M=new X({props:{demo:fn}}),V=new X({props:{demo:In}}),B=new X({props:{demo:xn}}),A=new X({props:{demo:Dn}}),{c(){a=h(),E(n.$$.fragment),l=h(),s=$("h2"),r=f("Disclaimer"),p=h(),E(g.$$.fragment),ce=h(),D=$("pre"),fe=h(),q=$("h2"),De=f("Usage"),me=h(),z=$("p"),je=f("Input component is used as base for all other inputs ("),F=$("a"),He=f("TextInput"),Me=f(`, Textarea (not yet implemented) and others). The single purpose of Input is to provide shared styles and features to other inputs.
Use other components listed above to build forms (as they provide better accessibility) and Input component as base for your own custom inputs with SvelteUI theme.`),de=h(),E(j.$$.fragment),$e=h(),Y=$("h2"),Ve=f("Variants"),_e=h(),C=$("p"),Be=f("Input has 3 variants, all of which are available on all SvelteUI inputs. Note that "),Z=$("code"),Ae=f("unstyled"),Ge=f(" input variant may significantly impact usability, so use it wisely."),ve=h(),E(H.$$.fragment),he=h(),L=$("h2"),We=f("Icon and right section"),Ie=h(),R=$("p"),Ne=f("The Input component has two ways to render an Icon. The left Icon is passed in as a prop, and it is any valid Svelte Component. The right Icon is passed in through a named slot."),ge=h(),E(M.$$.fragment),ye=h(),J=$("h2"),qe=f("Sizes"),be=h(),w=$("p"),Fe=f("Component has 5 pre-made sizes: "),ee=$("code"),Ye=f("xs"),Le=f(", "),te=$("code"),Re=f("sm"),Je=f(", "),ne=$("code"),Ke=f("md"),Qe=f(", "),se=$("code"),Xe=f("lg"),Ze=f(", "),oe=$("code"),et=f("xl"),tt=f(". Use "),ae=$("code"),nt=f("size"),st=f(" prop to control input height, padding and font-size:"),we=h(),E(V.$$.fragment),Ee=h(),K=$("h2"),ot=f("Custom component"),Se=h(),U=$("p"),at=f("As Input component is intended to be a base for all other inputs, you can pass the "),le=$("code"),lt=f("root"),rt=f(" prop which will define the root element:"),ke=h(),E(B.$$.fragment),xe=h(),Q=$("h2"),it=f("Headless variant"),Te=h(),P=$("p"),pt=f(`If you want to add your own styles to Input, it’s better to start from scratch rather than overriding SvelteUI styles.
Use special `),re=$("code"),ut=f("headless"),ct=f(" variant which does not include any SvelteUI styles but still supports all other features: icon, right section, etc.:"),Oe=h(),E(A.$$.fragment),this.h()},l(e){At("svelte-pki6ul",document.head).forEach(o),a=I(e),S(n.$$.fragment,e),l=I(e),s=_(e,"H2",{});var pe=v(s);r=m(pe,"Disclaimer"),pe.forEach(o),p=I(e),S(g.$$.fragment,e),ce=I(e),D=_(e,"PRE",{class:!0});var jt=v(D);jt.forEach(o),fe=I(e),q=_(e,"H2",{});var dt=v(q);De=m(dt,"Usage"),dt.forEach(o),me=I(e),z=_(e,"P",{});var ze=v(z);je=m(ze,"Input component is used as base for all other inputs ("),F=_(ze,"A",{href:!0});var $t=v(F);He=m($t,"TextInput"),$t.forEach(o),Me=m(ze,`, Textarea (not yet implemented) and others). The single purpose of Input is to provide shared styles and features to other inputs.
Use other components listed above to build forms (as they provide better accessibility) and Input component as base for your own custom inputs with SvelteUI theme.`),ze.forEach(o),de=I(e),S(j.$$.fragment,e),$e=I(e),Y=_(e,"H2",{});var _t=v(Y);Ve=m(_t,"Variants"),_t.forEach(o),_e=I(e),C=_(e,"P",{});var Ce=v(C);Be=m(Ce,"Input has 3 variants, all of which are available on all SvelteUI inputs. Note that "),Z=_(Ce,"CODE",{});var vt=v(Z);Ae=m(vt,"unstyled"),vt.forEach(o),Ge=m(Ce," input variant may significantly impact usability, so use it wisely."),Ce.forEach(o),ve=I(e),S(H.$$.fragment,e),he=I(e),L=_(e,"H2",{});var ht=v(L);We=m(ht,"Icon and right section"),ht.forEach(o),Ie=I(e),R=_(e,"P",{});var It=v(R);Ne=m(It,"The Input component has two ways to render an Icon. The left Icon is passed in as a prop, and it is any valid Svelte Component. The right Icon is passed in through a named slot."),It.forEach(o),ge=I(e),S(M.$$.fragment,e),ye=I(e),J=_(e,"H2",{});var gt=v(J);qe=m(gt,"Sizes"),gt.forEach(o),be=I(e),w=_(e,"P",{});var T=v(w);Fe=m(T,"Component has 5 pre-made sizes: "),ee=_(T,"CODE",{});var yt=v(ee);Ye=m(yt,"xs"),yt.forEach(o),Le=m(T,", "),te=_(T,"CODE",{});var bt=v(te);Re=m(bt,"sm"),bt.forEach(o),Je=m(T,", "),ne=_(T,"CODE",{});var wt=v(ne);Ke=m(wt,"md"),wt.forEach(o),Qe=m(T,", "),se=_(T,"CODE",{});var Et=v(se);Xe=m(Et,"lg"),Et.forEach(o),Ze=m(T,", "),oe=_(T,"CODE",{});var St=v(oe);et=m(St,"xl"),St.forEach(o),tt=m(T,". Use "),ae=_(T,"CODE",{});var kt=v(ae);nt=m(kt,"size"),kt.forEach(o),st=m(T," prop to control input height, padding and font-size:"),T.forEach(o),we=I(e),S(V.$$.fragment,e),Ee=I(e),K=_(e,"H2",{});var xt=v(K);ot=m(xt,"Custom component"),xt.forEach(o),Se=I(e),U=_(e,"P",{});var Ue=v(U);at=m(Ue,"As Input component is intended to be a base for all other inputs, you can pass the "),le=_(Ue,"CODE",{});var Tt=v(le);lt=m(Tt,"root"),Tt.forEach(o),rt=m(Ue," prop which will define the root element:"),Ue.forEach(o),ke=I(e),S(B.$$.fragment,e),xe=I(e),Q=_(e,"H2",{});var Ot=v(Q);it=m(Ot,"Headless variant"),Ot.forEach(o),Te=I(e),P=_(e,"P",{});var Pe=v(P);pt=m(Pe,`If you want to add your own styles to Input, it’s better to start from scratch rather than overriding SvelteUI styles.
Use special `),re=_(Pe,"CODE",{});var zt=v(re);ut=m(zt,"headless"),zt.forEach(o),ct=m(Pe," variant which does not include any SvelteUI styles but still supports all other features: icon, right section, etc.:"),Pe.forEach(o),Oe=I(e),S(A.$$.fragment,e),this.h()},h(){mt(D,"class","language-svelte"),mt(F,"href","/core/text-input")},m(e,i){u(e,a,i),k(n,e,i),u(e,l,i),u(e,s,i),c(s,r),u(e,p,i),k(g,e,i),u(e,ce,i),u(e,D,i),D.innerHTML=Dt,u(e,fe,i),u(e,q,i),c(q,De),u(e,me,i),u(e,z,i),c(z,je),c(z,F),c(F,He),c(z,Me),u(e,de,i),k(j,e,i),u(e,$e,i),u(e,Y,i),c(Y,Ve),u(e,_e,i),u(e,C,i),c(C,Be),c(C,Z),c(Z,Ae),c(C,Ge),u(e,ve,i),k(H,e,i),u(e,he,i),u(e,L,i),c(L,We),u(e,Ie,i),u(e,R,i),c(R,Ne),u(e,ge,i),k(M,e,i),u(e,ye,i),u(e,J,i),c(J,qe),u(e,be,i),u(e,w,i),c(w,Fe),c(w,ee),c(ee,Ye),c(w,Le),c(w,te),c(te,Re),c(w,Je),c(w,ne),c(ne,Ke),c(w,Qe),c(w,se),c(se,Xe),c(w,Ze),c(w,oe),c(oe,et),c(w,tt),c(w,ae),c(ae,nt),c(w,st),u(e,we,i),k(V,e,i),u(e,Ee,i),u(e,K,i),c(K,ot),u(e,Se,i),u(e,U,i),c(U,at),c(U,le),c(le,lt),c(U,rt),u(e,ke,i),k(B,e,i),u(e,xe,i),u(e,Q,i),c(Q,it),u(e,Te,i),u(e,P,i),c(P,pt),c(P,re),c(re,ut),c(P,ct),u(e,Oe,i),k(A,e,i),ie=!0},p(e,[i]){(!ie||i&0)&&t!==(t=ft+" - SvelteUI")&&(document.title=t);const pe={};i&1&&(pe.$$scope={dirty:i,ctx:e}),g.$set(pe)},i(e){ie||(y(n.$$.fragment,e),y(g.$$.fragment,e),y(j.$$.fragment,e),y(H.$$.fragment,e),y(M.$$.fragment,e),y(V.$$.fragment,e),y(B.$$.fragment,e),y(A.$$.fragment,e),ie=!0)},o(e){b(n.$$.fragment,e),b(g.$$.fragment,e),b(j.$$.fragment,e),b(H.$$.fragment,e),b(M.$$.fragment,e),b(V.$$.fragment,e),b(B.$$.fragment,e),b(A.$$.fragment,e),ie=!1},d(e){e&&o(a),x(n,e),e&&o(l),e&&o(s),e&&o(p),x(g,e),e&&o(ce),e&&o(D),e&&o(fe),e&&o(q),e&&o(me),e&&o(z),e&&o(de),x(j,e),e&&o($e),e&&o(Y),e&&o(_e),e&&o(C),e&&o(ve),x(H,e),e&&o(he),e&&o(L),e&&o(Ie),e&&o(R),e&&o(ge),x(M,e),e&&o(ye),e&&o(J),e&&o(be),e&&o(w),e&&o(we),x(V,e),e&&o(Ee),e&&o(K),e&&o(Se),e&&o(U),e&&o(ke),x(B,e),e&&o(xe),e&&o(Q),e&&o(Te),e&&o(P),e&&o(Oe),x(A,e)}}}const Mn={title:"Input",group:"svelteuidev-core",packageGroup:"@svelteuidev/core",slug:"/core/input/",category:"inputs",description:"Base component to create custom inputs",importCode:"import { Input } from '@svelteuidev/core';",source:"svelteui-core/src/components/Input/Input.svelte",docs:"core/input.md"},{title:ft,group:Vn,packageGroup:Bn,slug:An,category:Gn,description:Wn,importCode:Nn,source:qn,docs:Fn}=Mn;class ns extends G{constructor(t){super(),W(this,t,null,Hn,N,{})}}export{ns as default,Mn as metadata};
