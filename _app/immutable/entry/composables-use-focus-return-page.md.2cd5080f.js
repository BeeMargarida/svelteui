import{S as fs,i as ks,s as ms,a as i,y as ds,k as o,q as p,al as ws,h as n,c as f,z as vs,l as c,m as l,r as u,n as W,b as e,A as _s,Y as t,g as hs,d as ys,B as Fs}from"../chunks/index.b0fe5a0f.js";import"../chunks/navigation.9bd98935.js";import{H as Rs}from"../chunks/Heading.19c03976.js";function Es(os){let h,x,m,H,y,L,P,d,E,T,q,j,k,G,b,z,A,D,w,ps=`<code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> handleFocusReturn <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useFocusReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> opened <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// when opened changes to true it will automatically remember last focused element</span>
<span class="token comment">// when opened changes to false it will return focus to last focused element before opening</span>
<span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token function">handleFocusReturn</span><span class="token punctuation">(</span>opened<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,I,r,B,$,Y,J,C,K,N,M,v,cs=`<code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> handleFocusReturn<span class="token punctuation">,</span> returnFocus <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useFocusReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> opened <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// when opened changes to true it will automatically remember last focused element</span>
<span class="token comment">// when opened changes to false it will do nothing because we set second param as false</span>
<span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token function">handleFocusReturn</span><span class="token punctuation">(</span>opened<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// whenever you call this function it will return focus to last focused element</span>
  <span class="token comment">// which was remembered when handleFocusReturn was called with opened: true</span>
  <span class="token function">returnFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,O,F,Q,S,_,ls=`<code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">useFocusReturnResult</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">handleFocusReturn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">opened</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> shouldReturnFocus<span class="token operator">?</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function-variable function">returnFocus</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">useFocusReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> useFocusReturnResult</code>`,g;return document.title=h=X+" - SvelteUI",m=new Rs({props:{title:X,group:$s,packageGroup:Cs,slug:gs,description:xs,importCode:Hs,docs:Ps,source:js}}),{c(){x=i(),ds(m.$$.fragment),H=i(),y=o("h2"),L=p("Usage"),P=i(),d=o("p"),E=o("code"),T=p("useFocusReturn"),q=p(" returns function to automatically manages focus returning to last focused element when given condition is met. For example it is used in Modal component to restore focus after modal was closed."),j=i(),k=o("p"),G=p("In most cases you would want to use this with "),b=o("code"),z=p("use-focus-trap"),A=p("."),D=i(),w=o("pre"),I=i(),r=o("p"),B=p("If "),$=o("code"),Y=p("shouldReturnFocus"),J=p("(second param) option is set to false you can call "),C=o("code"),K=p("returnFocus"),N=p(" function to focus last active element manually:"),M=i(),v=o("pre"),O=i(),F=o("h2"),Q=p("Definition"),S=i(),_=o("pre"),this.h()},l(s){ws("svelte-pki6ul",document.head).forEach(n),x=f(s),vs(m.$$.fragment,s),H=f(s),y=c(s,"H2",{});var Z=l(y);L=u(Z,"Usage"),Z.forEach(n),P=f(s),d=c(s,"P",{});var V=l(d);E=c(V,"CODE",{});var ss=l(E);T=u(ss,"useFocusReturn"),ss.forEach(n),q=u(V," returns function to automatically manages focus returning to last focused element when given condition is met. For example it is used in Modal component to restore focus after modal was closed."),V.forEach(n),j=f(s),k=c(s,"P",{});var U=l(k);G=u(U,"In most cases you would want to use this with "),b=c(U,"CODE",{});var ns=l(b);z=u(ns,"use-focus-trap"),ns.forEach(n),A=u(U,"."),U.forEach(n),D=f(s),w=c(s,"PRE",{class:!0});var us=l(w);us.forEach(n),I=f(s),r=c(s,"P",{});var R=l(r);B=u(R,"If "),$=c(R,"CODE",{});var as=l($);Y=u(as,"shouldReturnFocus"),as.forEach(n),J=u(R,"(second param) option is set to false you can call "),C=c(R,"CODE",{});var es=l(C);K=u(es,"returnFocus"),es.forEach(n),N=u(R," function to focus last active element manually:"),R.forEach(n),M=f(s),v=c(s,"PRE",{class:!0});var rs=l(v);rs.forEach(n),O=f(s),F=c(s,"H2",{});var ts=l(F);Q=u(ts,"Definition"),ts.forEach(n),S=f(s),_=c(s,"PRE",{class:!0});var is=l(_);is.forEach(n),this.h()},h(){W(w,"class","language-js"),W(v,"class","language-js"),W(_,"class","language-js")},m(s,a){e(s,x,a),_s(m,s,a),e(s,H,a),e(s,y,a),t(y,L),e(s,P,a),e(s,d,a),t(d,E),t(E,T),t(d,q),e(s,j,a),e(s,k,a),t(k,G),t(k,b),t(b,z),t(k,A),e(s,D,a),e(s,w,a),w.innerHTML=ps,e(s,I,a),e(s,r,a),t(r,B),t(r,$),t($,Y),t(r,J),t(r,C),t(C,K),t(r,N),e(s,M,a),e(s,v,a),v.innerHTML=cs,e(s,O,a),e(s,F,a),t(F,Q),e(s,S,a),e(s,_,a),_.innerHTML=ls,g=!0},p(s,[a]){(!g||a&0)&&h!==(h=X+" - SvelteUI")&&(document.title=h)},i(s){g||(hs(m.$$.fragment,s),g=!0)},o(s){ys(m.$$.fragment,s),g=!1},d(s){s&&n(x),Fs(m,s),s&&n(H),s&&n(y),s&&n(P),s&&n(d),s&&n(j),s&&n(k),s&&n(D),s&&n(w),s&&n(I),s&&n(r),s&&n(M),s&&n(v),s&&n(O),s&&n(F),s&&n(S),s&&n(_)}}}const bs={title:"use-focus-return",group:"svelteuidev-composables",packageGroup:"@svelteuidev/composables",slug:"/composables/use-focus-return/",description:"Capture last focused element on the page and return focus to it once condition is met",importCode:"import { useFocusReturn } from '@svelteuidev/composables';",docs:"composables/use-focus-return.md",source:"svelteui-composables/src/utilities/use-focus-return/use-focus-return.ts"},{title:X,group:$s,packageGroup:Cs,slug:gs,description:xs,importCode:Hs,docs:Ps,source:js}=bs;class Os extends fs{constructor(h){super(),ks(this,h,null,Es,ms,{})}}export{Os as default,bs as metadata};
