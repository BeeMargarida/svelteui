import{S as Ia,i as ha,s as ba,y as A,z as H,A as P,g as D,d as V,B as j,H as Sa,N as xa,a7 as Ca,C as Ta,a as $,k,q as c,al as Ua,h as s,c as v,l as f,m as d,r as i,n as Y,b as l,Y as r}from"../chunks/index.b0fe5a0f.js";import{I as qa}from"../chunks/InfoCircled.ebf34b61.js";import"../chunks/navigation.618498c8.js";import{H as Aa}from"../chunks/Heading.a23d207d.js";import{b as ma}from"../chunks/paths.48415ce3.js";import{D as Ha}from"../chunks/Demo.7e60bc72.js";import{A as Pa}from"../chunks/Alert.64458630.js";import{C as Da}from"../chunks/Center.c6049ae6.js";import{I as Va,a as ja}from"../chunks/Input.43f3ec03.js";function za(m){let n,e;return n=new ja({props:{id:"input-demo",placeholder:"Write here the information"}}),{c(){A(n.$$.fragment)},l(t){H(n.$$.fragment,t)},m(t,u){P(n,t,u),e=!0},p:Ta,i(t){e||(D(n.$$.fragment,t),e=!0)},o(t){V(n.$$.fragment,t),e=!1},d(t){j(n,t)}}}function Ga(m){let n,e;const t=[m[0]];let u={$$slots:{default:[za]},$$scope:{ctx:m}};for(let o=0;o<t.length;o+=1)u=Sa(u,t[o]);return n=new Va({props:u}),{c(){A(n.$$.fragment)},l(o){H(n.$$.fragment,o)},m(o,_){P(n,o,_),e=!0},p(o,_){const w=_&1?xa(t,[Ca(o[0])]):{};_&2&&(w.$$scope={dirty:_,ctx:o}),n.$set(w)},i(o){e||(D(n.$$.fragment,o),e=!0)},o(o){V(n.$$.fragment,o),e=!1},d(o){j(n,o)}}}function Ra(m){let n,e;return n=new Da({props:{$$slots:{default:[Ga]},$$scope:{ctx:m}}}),{c(){A(n.$$.fragment)},l(t){H(n.$$.fragment,t)},m(t,u){P(n,t,u),e=!0},p(t,[u]){const o={};u&3&&(o.$$scope={dirty:u,ctx:t}),n.$set(o)},i(t){e||(D(n.$$.fragment,t),e=!0)},o(t){V(n.$$.fragment,t),e=!1},d(t){j(n,t)}}}const Ya=(m,n)=>`<script>
  import { Input, InputWrapper } from '@svelteuidev/core';
<\/script>

<InputWrapper id='input-demo' ${m}>
    <Input placeholder='Write here the information' />
</InputWrapper>`,Ma="configurator",Na={codeTemplate:Ya,configurator:[{name:"label",type:"string",initialValue:"Credit card information"},{name:"description",type:"string",initialValue:"Please enter your credit card information, we need some money"},{name:"error",type:"string",initialValue:"Your credit card expired"},{name:"size",type:"size",initialValue:"sm",defaultValue:"sm"},{name:"required",type:"boolean",initialValue:!0,defaultValue:!0}]};function Oa(m,n,e){let{props:t={}}=n;return m.$$set=u=>{"props"in u&&e(0,t=u.props)},[t]}class La extends Ia{constructor(n){super(),ha(this,n,Oa,Ra,ba,{props:0})}}const Ba=Object.freeze(Object.defineProperty({__proto__:null,configuration:Na,default:La,type:Ma},Symbol.toStringTag,{value:"Module"}));function Fa(m){let n;return{c(){n=c("Do not use InputWrapper with SvelteUI inputs, it is already included in most inputs.")},l(e){n=i(e,"Do not use InputWrapper with SvelteUI inputs, it is already included in most inputs.")},m(e,t){l(e,n,t)},d(e){e&&s(n)}}}function Ja(m){let n,e,t,u,o,_,w,I,M,y,wa=`<code class="language-svelte">// Incorrect usage, input is not accessible
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputWrapper</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextInput</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputWrapper</span><span class="token punctuation">></span></span>

// TextInput already includes InputWrapper
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextInput</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input label<span class="token punctuation">"</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input description<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code>`,N,S,Z,O,g,aa,x,na,ta,C,sa,ea,L,h,pa,T,oa,la,B,W,F,U,ua,J,b,ra,z,ca,ia,K,E,ya=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> InputWrapper <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputWrapper</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>with-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>with-label<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputWrapper</span><span class="token punctuation">></span></span>

// id is not required for div label as it is not connected to any element

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputWrapper</span> <span class="token attr-name">labelElement</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputWrapper</span><span class="token punctuation">></span></span></code>`,G;return document.title=n=ka+" - SvelteUI",t=new Aa({props:{title:ka,group:Qa,packageGroup:Xa,slug:Za,category:an,description:nn,importCode:tn,source:sn,docs:en}}),I=new Pa({props:{icon:qa,title:"Important",color:"blue",$$slots:{default:[Fa]},$$scope:{ctx:m}}}),W=new Ha({props:{demo:Ba}}),{c(){e=$(),A(t.$$.fragment),u=$(),o=k("h2"),_=c("Disclaimer"),w=$(),A(I.$$.fragment),M=$(),y=k("pre"),N=$(),S=k("h2"),Z=c("Usage"),O=$(),g=k("p"),aa=c("InputWrapper is used to wrap all SvelteUI inputs (Select (not yet implemented), "),x=k("a"),na=c("TextInput"),ta=c(", "),C=k("a"),sa=c("NumberInput"),ea=c(` and others).
It includes label with optional required asterisk, description and error message.`),L=$(),h=k("p"),pa=c("All SvelteUI inputs support the same props as InputWrapper. You can combine it with "),T=k("a"),oa=c("Input"),la=c(` component
to build your own custom inputs with the same style and behavior.`),B=$(),A(W.$$.fragment),F=$(),U=k("h2"),ua=c("Change label element"),J=$(),b=k("p"),ra=c(`Some inputs like RadioGroup (not yet implemented) may require to detach label from certain element.
To implement this, use `),z=k("code"),ca=c("labelElement"),ia=c(":"),K=$(),E=k("pre"),this.h()},l(a){Ua("svelte-pki6ul",document.head).forEach(s),e=v(a),H(t.$$.fragment,a),u=v(a),o=f(a,"H2",{});var R=d(o);_=i(R,"Disclaimer"),R.forEach(s),w=v(a),H(I.$$.fragment,a),M=v(a),y=f(a,"PRE",{class:!0});var Wa=d(y);Wa.forEach(s),N=v(a),S=f(a,"H2",{});var fa=d(S);Z=i(fa,"Usage"),fa.forEach(s),O=v(a),g=f(a,"P",{});var q=d(g);aa=i(q,"InputWrapper is used to wrap all SvelteUI inputs (Select (not yet implemented), "),x=f(q,"A",{href:!0});var da=d(x);na=i(da,"TextInput"),da.forEach(s),ta=i(q,", "),C=f(q,"A",{href:!0});var $a=d(C);sa=i($a,"NumberInput"),$a.forEach(s),ea=i(q,` and others).
It includes label with optional required asterisk, description and error message.`),q.forEach(s),L=v(a),h=f(a,"P",{});var Q=d(h);pa=i(Q,"All SvelteUI inputs support the same props as InputWrapper. You can combine it with "),T=f(Q,"A",{href:!0});var va=d(T);oa=i(va,"Input"),va.forEach(s),la=i(Q,` component
to build your own custom inputs with the same style and behavior.`),Q.forEach(s),B=v(a),H(W.$$.fragment,a),F=v(a),U=f(a,"H2",{});var ga=d(U);ua=i(ga,"Change label element"),ga.forEach(s),J=v(a),b=f(a,"P",{});var X=d(b);ra=i(X,`Some inputs like RadioGroup (not yet implemented) may require to detach label from certain element.
To implement this, use `),z=f(X,"CODE",{});var _a=d(z);ca=i(_a,"labelElement"),_a.forEach(s),ia=i(X,":"),X.forEach(s),K=v(a),E=f(a,"PRE",{class:!0});var Ea=d(E);Ea.forEach(s),this.h()},h(){Y(y,"class","language-svelte"),Y(x,"href",ma+"/core/text-input"),Y(C,"href",ma+"/core/number-input"),Y(T,"href",ma+"/core/input"),Y(E,"class","language-svelte")},m(a,p){l(a,e,p),P(t,a,p),l(a,u,p),l(a,o,p),r(o,_),l(a,w,p),P(I,a,p),l(a,M,p),l(a,y,p),y.innerHTML=wa,l(a,N,p),l(a,S,p),r(S,Z),l(a,O,p),l(a,g,p),r(g,aa),r(g,x),r(x,na),r(g,ta),r(g,C),r(C,sa),r(g,ea),l(a,L,p),l(a,h,p),r(h,pa),r(h,T),r(T,oa),r(h,la),l(a,B,p),P(W,a,p),l(a,F,p),l(a,U,p),r(U,ua),l(a,J,p),l(a,b,p),r(b,ra),r(b,z),r(z,ca),r(b,ia),l(a,K,p),l(a,E,p),E.innerHTML=ya,G=!0},p(a,[p]){(!G||p&0)&&n!==(n=ka+" - SvelteUI")&&(document.title=n);const R={};p&1&&(R.$$scope={dirty:p,ctx:a}),I.$set(R)},i(a){G||(D(t.$$.fragment,a),D(I.$$.fragment,a),D(W.$$.fragment,a),G=!0)},o(a){V(t.$$.fragment,a),V(I.$$.fragment,a),V(W.$$.fragment,a),G=!1},d(a){a&&s(e),j(t,a),a&&s(u),a&&s(o),a&&s(w),j(I,a),a&&s(M),a&&s(y),a&&s(N),a&&s(S),a&&s(O),a&&s(g),a&&s(L),a&&s(h),a&&s(B),j(W,a),a&&s(F),a&&s(U),a&&s(J),a&&s(b),a&&s(K),a&&s(E)}}}const Ka={title:"InputWrapper",group:"svelteuidev-core",packageGroup:"@svelteuidev/core",slug:"/core/input-wrapper/",category:"inputs",description:"Enhance custom inputs with label, error and description",importCode:"import { InputWrapper } from '@svelteuidev/core';",source:"svelteui-core/src/components/InputWrapper/InputWrapper.svelte",docs:"core/input-wrapper.md"},{title:ka,group:Qa,packageGroup:Xa,slug:Za,category:an,description:nn,importCode:tn,source:sn,docs:en}=Ka;class dn extends Ia{constructor(n){super(),ha(this,n,null,Ja,ba,{})}}export{dn as default,Ka as metadata};
