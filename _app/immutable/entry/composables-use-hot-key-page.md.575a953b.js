import{S as ht,i as _t,s as yt,y as B,z as W,A as q,g as G,d as X,B as F,a as h,k as a,c as _,l as r,m as l,h as t,b as p,J as Gt,q as u,r as c,w as Xt,a5 as Ft,F as Jt,a6 as Kt,al as Vt,n as dt,Y as o}from"../chunks/index.b0fe5a0f.js";import{T as Nt}from"../chunks/navigation.9bd98935.js";import{H as Qt}from"../chunks/Heading.19c03976.js";import{D as Rt}from"../chunks/Demo.82a35c94.js";import{C as Zt}from"../chunks/Center.b83aac32.js";import{h as eo,g as Bt}from"../chunks/use-hot-key.48c41cb1.js";import{T as to}from"../chunks/TextInput.5cadc6cd.js";function oo(y){let s;return{c(){s=u("Press ⌘+Enter or Ctrl+Enter to trigger an alert")},l(f){s=c(f,"Press ⌘+Enter or Ctrl+Enter to trigger an alert")},m(f,n){p(f,s,n)},d(f){f&&t(s)}}}function so(y){let s,f,n,v,k,m;return s=new Nt({props:{$$slots:{default:[oo]},$$scope:{ctx:y}}}),{c(){B(s.$$.fragment),f=h(),n=a("div")},l(d){W(s.$$.fragment,d),f=_(d),n=r(d,"DIV",{}),l(n).forEach(t)},m(d,$){q(s,d,$),p(d,f,$),p(d,n,$),v=!0,k||(m=Gt(eo.call(null,n,[["mod+Enter",y[0]]])),k=!0)},p(d,$){const w={};$&2&&(w.$$scope={dirty:$,ctx:d}),s.$set(w)},i(d){v||(G(s.$$.fragment,d),v=!0)},o(d){X(s.$$.fragment,d),v=!1},d(d){F(s,d),d&&t(f),d&&t(n),k=!1,m()}}}function no(y){let s,f;return s=new Zt({props:{$$slots:{default:[so]},$$scope:{ctx:y}}}),{c(){B(s.$$.fragment)},l(n){W(s.$$.fragment,n)},m(n,v){q(s,n,v),f=!0},p(n,[v]){const k={};v&2&&(k.$$scope={dirty:v,ctx:n}),s.$set(k)},i(n){f||(G(s.$$.fragment,n),f=!0)},o(n){X(s.$$.fragment,n),f=!1},d(n){F(s,n)}}}const ao=`
<script>
    import { hotkey } from '@svelteuidev/composables';

    function onSubmit() {
        alert("You've used a hotkey");
    }
<\/script>

<p>Press ⌘+Enter or Ctrl+Enter to trigger an alert</p>
<div use:hotkey={[['mod+Enter', () => onSubmit()]]}/>`,ro="demo",lo={code:ao};function io(){alert("You've used a hotkey")}function uo(y){return[()=>io()]}class co extends ht{constructor(s){super(),_t(this,s,uo,no,yt,{})}}const po=Object.freeze(Object.defineProperty({__proto__:null,configuration:lo,default:co,type:ro},Symbol.toStringTag,{value:"Module"}));function fo(y){let s,f,n;function v(m){y[1](m)}let k={placeholder:"Your message",label:"Press ⌘+Enter or Ctrl+Enter when input has focus to send message"};return y[0]!==void 0&&(k.value=y[0]),s=new to({props:k}),Xt.push(()=>Ft(s,"value",v)),s.$on("keydown",function(){Jt(Bt([["mod+Enter",y[2]]]))&&Bt([["mod+Enter",y[2]]]).apply(this,arguments)}),{c(){B(s.$$.fragment)},l(m){W(s.$$.fragment,m)},m(m,d){q(s,m,d),n=!0},p(m,[d]){y=m;const $={};!f&&d&1&&(f=!0,$.value=y[0],Kt(()=>f=!1)),s.$set($)},i(m){n||(G(s.$$.fragment,m),n=!0)},o(m){X(s.$$.fragment,m),n=!1},d(m){F(s,m)}}}const mo=`
<script>
	import { TextInput } from '@svelteuidev/core';
	import { getHotkeyHandler } from '@svelteuidev/composables';

	let value = 'I am using a hotkey to submit';

	function onSubmit(val) {
		alert(\`Your message says: \${val}\`);
	}
<\/script>

<TextInput
	placeholder="Your message"
	label="Press ⌘+Enter or Ctrl+Enter when input has focus to send message"
	bind:value
	on:keydown={getHotkeyHandler([['mod+Enter', () => onSubmit(value)]])}
/>
`,ho="demo",_o={code:mo};function yo(y){alert(`Your message says: ${y}`)}function vo(y,s,f){let n="I am using a hotkey to submit";function v(m){n=m,f(0,n)}return[n,v,()=>yo(n)]}class ko extends ht{constructor(s){super(),_t(this,s,vo,fo,yt,{})}}const $o=Object.freeze(Object.defineProperty({__proto__:null,configuration:_o,default:ko,type:ho},Symbol.toStringTag,{value:"Module"}));function Eo(y){let s,f,n,v,k,m,d,$,w,Ce,De,fe,S,J,Le,Ie,K,xe,de,C,me,U,Oe,he,g,V,Pe,Ae,N,Ue,je,_e,D,ye,j,Ye,ve,E,b,Q,ze,Me,Z,Re,Be,ee,We,qe,Ge,Y,te,Xe,Fe,Je,z,oe,Ke,Ve,Ne,L,se,Qe,Ze,I,et,ke,M,tt,$e,T,ne,x,ae,ot,st,re,nt,at,le,O,ie,rt,lt,ue,it,Ee,R,ut,be,P,Wt='<code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hotkey</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> <span class="token literal-property property">hotkeys</span><span class="token operator">:</span> HotkeyItem<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span>Action<span class="token operator">></span><span class="token punctuation">;</span></code>',ce;return document.title=s=mt+" - SvelteUI",n=new Qt({props:{title:mt,group:go,packageGroup:wo,slug:So,description:To,importCode:Ho,docs:Do,source:Co}}),C=new Rt({props:{demo:po}}),D=new Rt({props:{demo:$o}}),{c(){f=h(),B(n.$$.fragment),v=h(),k=a("h2"),m=u("Usage"),d=h(),$=a("p"),w=a("code"),Ce=u("use-hot-key"),De=u(" accepts an array of hotkeys and handler tuples:"),fe=h(),S=a("ul"),J=a("li"),Le=u("hotkey - hotkey string e.g. ctrl+E, shift+alt+L, mod+S"),Ie=h(),K=a("li"),xe=u("handler - event handler called when given combination was pressed"),de=h(),B(C.$$.fragment),me=h(),U=a("h2"),Oe=u("Targeting elements"),he=h(),g=a("p"),V=a("code"),Pe=u("use-hot-key"),Ae=u(" can only work with the document element; if you need to support other elements then you’ll need to create your own event listener. The package includes a "),N=a("code"),Ue=u("getHotkeyHandler"),je=u(" function that should be used in conjunction with on:keydown:"),_e=h(),B(D.$$.fragment),ye=h(),j=a("h2"),Ye=u("Supported formats"),ve=h(),E=a("ul"),b=a("li"),Q=a("code"),ze=u("mod+S"),Me=u(" – detects "),Z=a("code"),Re=u("⌘+S"),Be=u(" on macOS and "),ee=a("code"),We=u("Ctrl+S"),qe=u(" on Windows and Linux (depending on the mod key configured)"),Ge=h(),Y=a("li"),te=a("code"),Xe=u("ctrl+shift+X"),Fe=u(" – handles multiple modifiers"),Je=h(),z=a("li"),oe=a("code"),Ke=u("alt + shift + L"),Ve=u(" – you can use whitespace inside hotkey"),Ne=h(),L=a("li"),se=a("code"),Qe=u("ArrowLeft"),Ze=u(" – you can use special keys using this "),I=a("a"),et=u("format"),ke=h(),M=a("h2"),tt=u("Params"),$e=h(),T=a("table"),ne=a("thead"),x=a("tr"),ae=a("th"),ot=u("Param"),st=h(),re=a("th"),nt=u("Description"),at=h(),le=a("tbody"),O=a("tr"),ie=a("td"),rt=u("hotkeys"),lt=h(),ue=a("td"),it=u("An array of hot keys and their respective actions"),Ee=h(),R=a("h2"),ut=u("Definition"),be=h(),P=a("pre"),this.h()},l(e){Vt("svelte-pki6ul",document.head).forEach(t),f=_(e),W(n.$$.fragment,e),v=_(e),k=r(e,"H2",{});var vt=l(k);m=c(vt,"Usage"),vt.forEach(t),d=_(e),$=r(e,"P",{});var ct=l($);w=r(ct,"CODE",{});var kt=l(w);Ce=c(kt,"use-hot-key"),kt.forEach(t),De=c(ct," accepts an array of hotkeys and handler tuples:"),ct.forEach(t),fe=_(e),S=r(e,"UL",{});var ge=l(S);J=r(ge,"LI",{});var $t=l(J);Le=c($t,"hotkey - hotkey string e.g. ctrl+E, shift+alt+L, mod+S"),$t.forEach(t),Ie=_(ge),K=r(ge,"LI",{});var Et=l(K);xe=c(Et,"handler - event handler called when given combination was pressed"),Et.forEach(t),ge.forEach(t),de=_(e),W(C.$$.fragment,e),me=_(e),U=r(e,"H2",{});var bt=l(U);Oe=c(bt,"Targeting elements"),bt.forEach(t),he=_(e),g=r(e,"P",{});var pe=l(g);V=r(pe,"CODE",{});var gt=l(V);Pe=c(gt,"use-hot-key"),gt.forEach(t),Ae=c(pe," can only work with the document element; if you need to support other elements then you’ll need to create your own event listener. The package includes a "),N=r(pe,"CODE",{});var wt=l(N);Ue=c(wt,"getHotkeyHandler"),wt.forEach(t),je=c(pe," function that should be used in conjunction with on:keydown:"),pe.forEach(t),_e=_(e),W(D.$$.fragment,e),ye=_(e),j=r(e,"H2",{});var St=l(j);Ye=c(St,"Supported formats"),St.forEach(t),ve=_(e),E=r(e,"UL",{});var H=l(E);b=r(H,"LI",{});var A=l(b);Q=r(A,"CODE",{});var Tt=l(Q);ze=c(Tt,"mod+S"),Tt.forEach(t),Me=c(A," – detects "),Z=r(A,"CODE",{});var Ht=l(Z);Re=c(Ht,"⌘+S"),Ht.forEach(t),Be=c(A," on macOS and "),ee=r(A,"CODE",{});var Ct=l(ee);We=c(Ct,"Ctrl+S"),Ct.forEach(t),qe=c(A," on Windows and Linux (depending on the mod key configured)"),A.forEach(t),Ge=_(H),Y=r(H,"LI",{});var pt=l(Y);te=r(pt,"CODE",{});var Dt=l(te);Xe=c(Dt,"ctrl+shift+X"),Dt.forEach(t),Fe=c(pt," – handles multiple modifiers"),pt.forEach(t),Je=_(H),z=r(H,"LI",{});var ft=l(z);oe=r(ft,"CODE",{});var Lt=l(oe);Ke=c(Lt,"alt + shift + L"),Lt.forEach(t),Ve=c(ft," – you can use whitespace inside hotkey"),ft.forEach(t),Ne=_(H),L=r(H,"LI",{});var we=l(L);se=r(we,"CODE",{});var It=l(se);Qe=c(It,"ArrowLeft"),It.forEach(t),Ze=c(we," – you can use special keys using this "),I=r(we,"A",{href:!0,rel:!0});var xt=l(I);et=c(xt,"format"),xt.forEach(t),we.forEach(t),H.forEach(t),ke=_(e),M=r(e,"H2",{});var Ot=l(M);tt=c(Ot,"Params"),Ot.forEach(t),$e=_(e),T=r(e,"TABLE",{});var Se=l(T);ne=r(Se,"THEAD",{});var Pt=l(ne);x=r(Pt,"TR",{});var Te=l(x);ae=r(Te,"TH",{});var At=l(ae);ot=c(At,"Param"),At.forEach(t),st=_(Te),re=r(Te,"TH",{});var Ut=l(re);nt=c(Ut,"Description"),Ut.forEach(t),Te.forEach(t),Pt.forEach(t),at=_(Se),le=r(Se,"TBODY",{});var jt=l(le);O=r(jt,"TR",{});var He=l(O);ie=r(He,"TD",{});var Yt=l(ie);rt=c(Yt,"hotkeys"),Yt.forEach(t),lt=_(He),ue=r(He,"TD",{});var zt=l(ue);it=c(zt,"An array of hot keys and their respective actions"),zt.forEach(t),He.forEach(t),jt.forEach(t),Se.forEach(t),Ee=_(e),R=r(e,"H2",{});var Mt=l(R);ut=c(Mt,"Definition"),Mt.forEach(t),be=_(e),P=r(e,"PRE",{class:!0});var qt=l(P);qt.forEach(t),this.h()},h(){dt(I,"href","https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values"),dt(I,"rel","nofollow"),dt(P,"class","language-js")},m(e,i){p(e,f,i),q(n,e,i),p(e,v,i),p(e,k,i),o(k,m),p(e,d,i),p(e,$,i),o($,w),o(w,Ce),o($,De),p(e,fe,i),p(e,S,i),o(S,J),o(J,Le),o(S,Ie),o(S,K),o(K,xe),p(e,de,i),q(C,e,i),p(e,me,i),p(e,U,i),o(U,Oe),p(e,he,i),p(e,g,i),o(g,V),o(V,Pe),o(g,Ae),o(g,N),o(N,Ue),o(g,je),p(e,_e,i),q(D,e,i),p(e,ye,i),p(e,j,i),o(j,Ye),p(e,ve,i),p(e,E,i),o(E,b),o(b,Q),o(Q,ze),o(b,Me),o(b,Z),o(Z,Re),o(b,Be),o(b,ee),o(ee,We),o(b,qe),o(E,Ge),o(E,Y),o(Y,te),o(te,Xe),o(Y,Fe),o(E,Je),o(E,z),o(z,oe),o(oe,Ke),o(z,Ve),o(E,Ne),o(E,L),o(L,se),o(se,Qe),o(L,Ze),o(L,I),o(I,et),p(e,ke,i),p(e,M,i),o(M,tt),p(e,$e,i),p(e,T,i),o(T,ne),o(ne,x),o(x,ae),o(ae,ot),o(x,st),o(x,re),o(re,nt),o(T,at),o(T,le),o(le,O),o(O,ie),o(ie,rt),o(O,lt),o(O,ue),o(ue,it),p(e,Ee,i),p(e,R,i),o(R,ut),p(e,be,i),p(e,P,i),P.innerHTML=Wt,ce=!0},p(e,[i]){(!ce||i&0)&&s!==(s=mt+" - SvelteUI")&&(document.title=s)},i(e){ce||(G(n.$$.fragment,e),G(C.$$.fragment,e),G(D.$$.fragment,e),ce=!0)},o(e){X(n.$$.fragment,e),X(C.$$.fragment,e),X(D.$$.fragment,e),ce=!1},d(e){e&&t(f),F(n,e),e&&t(v),e&&t(k),e&&t(d),e&&t($),e&&t(fe),e&&t(S),e&&t(de),F(C,e),e&&t(me),e&&t(U),e&&t(he),e&&t(g),e&&t(_e),F(D,e),e&&t(ye),e&&t(j),e&&t(ve),e&&t(E),e&&t(ke),e&&t(M),e&&t($e),e&&t(T),e&&t(Ee),e&&t(R),e&&t(be),e&&t(P)}}}const bo={title:"use-hot-key",group:"svelteuidev-composables",packageGroup:"@svelteuidev/composables",slug:"/composables/use-hot-key/",description:"Listen for key combinations/shortcuts on document or a given element.",importCode:"import { hotkey } from '@svelteuidev/composables';",source:"svelteui-composables/src/actions/use-hot-key/use-hot-key.ts",docs:"composables/use-hot-key.md"},{title:mt,group:go,packageGroup:wo,slug:So,description:To,importCode:Ho,source:Co,docs:Do}=bo;class jo extends ht{constructor(s){super(),_t(this,s,null,Eo,yt,{})}}export{jo as default,bo as metadata};
