import{S as In,i as hn,s as bn,y as A,z as H,A as P,g as D,d as V,B as j,H as Sn,N as xn,a7 as Cn,C as Tn,a as $,k,q as c,al as Un,h as s,c as v,l as f,m as d,r as i,n as Y,b as l,Y as r}from"../chunks/index.b0fe5a0f.js";import{I as qn}from"../chunks/InfoCircled.ebf34b61.js";import"../chunks/navigation.9bd98935.js";import{H as An}from"../chunks/Heading.19c03976.js";import{D as Hn}from"../chunks/Demo.82a35c94.js";import{A as Pn}from"../chunks/Alert.f7feb653.js";import{C as Dn}from"../chunks/Center.b83aac32.js";import{I as Vn,a as jn}from"../chunks/Input.9e06e2ef.js";function zn(m){let a,e;return a=new jn({props:{id:"input-demo",placeholder:"Write here the information"}}),{c(){A(a.$$.fragment)},l(t){H(a.$$.fragment,t)},m(t,u){P(a,t,u),e=!0},p:Tn,i(t){e||(D(a.$$.fragment,t),e=!0)},o(t){V(a.$$.fragment,t),e=!1},d(t){j(a,t)}}}function Gn(m){let a,e;const t=[m[0]];let u={$$slots:{default:[zn]},$$scope:{ctx:m}};for(let o=0;o<t.length;o+=1)u=Sn(u,t[o]);return a=new Vn({props:u}),{c(){A(a.$$.fragment)},l(o){H(a.$$.fragment,o)},m(o,_){P(a,o,_),e=!0},p(o,_){const w=_&1?xn(t,[Cn(o[0])]):{};_&2&&(w.$$scope={dirty:_,ctx:o}),a.$set(w)},i(o){e||(D(a.$$.fragment,o),e=!0)},o(o){V(a.$$.fragment,o),e=!1},d(o){j(a,o)}}}function Rn(m){let a,e;return a=new Dn({props:{$$slots:{default:[Gn]},$$scope:{ctx:m}}}),{c(){A(a.$$.fragment)},l(t){H(a.$$.fragment,t)},m(t,u){P(a,t,u),e=!0},p(t,[u]){const o={};u&3&&(o.$$scope={dirty:u,ctx:t}),a.$set(o)},i(t){e||(D(a.$$.fragment,t),e=!0)},o(t){V(a.$$.fragment,t),e=!1},d(t){j(a,t)}}}const Yn=(m,a)=>`<script>
  import { Input, InputWrapper } from '@svelteuidev/core';
<\/script>

<InputWrapper id='input-demo' ${m}>
    <Input placeholder='Write here the information' />
</InputWrapper>`,Mn="configurator",Nn={codeTemplate:Yn,configurator:[{name:"label",type:"string",initialValue:"Credit card information"},{name:"description",type:"string",initialValue:"Please enter your credit card information, we need some money"},{name:"error",type:"string",initialValue:"Your credit card expired"},{name:"size",type:"size",initialValue:"sm",defaultValue:"sm"},{name:"required",type:"boolean",initialValue:!0,defaultValue:!0}]};function On(m,a,e){let{props:t={}}=a;return m.$$set=u=>{"props"in u&&e(0,t=u.props)},[t]}class Ln extends In{constructor(a){super(),hn(this,a,On,Rn,bn,{props:0})}}const Bn=Object.freeze(Object.defineProperty({__proto__:null,configuration:Nn,default:Ln,type:Mn},Symbol.toStringTag,{value:"Module"}));function Fn(m){let a;return{c(){a=c("Do not use InputWrapper with SvelteUI inputs, it is already included in most inputs.")},l(e){a=i(e,"Do not use InputWrapper with SvelteUI inputs, it is already included in most inputs.")},m(e,t){l(e,a,t)},d(e){e&&s(a)}}}function Jn(m){let a,e,t,u,o,_,w,I,M,y,wn=`<code class="language-svelte">// Incorrect usage, input is not accessible
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputWrapper</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextInput</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputWrapper</span><span class="token punctuation">></span></span>

// TextInput already includes InputWrapper
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextInput</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input label<span class="token punctuation">"</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input description<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code>`,N,S,Z,O,g,nn,x,an,tn,C,sn,en,L,h,pn,T,on,ln,B,W,F,U,un,J,b,rn,z,cn,mn,K,E,yn=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> InputWrapper <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputWrapper</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>with-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>with-label<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputWrapper</span><span class="token punctuation">></span></span>

// id is not required for div label as it is not connected to any element

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputWrapper</span> <span class="token attr-name">labelElement</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputWrapper</span><span class="token punctuation">></span></span></code>`,G;return document.title=a=kn+" - SvelteUI",t=new An({props:{title:kn,group:Qn,packageGroup:Xn,slug:Zn,category:na,description:aa,importCode:ta,source:sa,docs:ea}}),I=new Pn({props:{icon:qn,title:"Important",color:"blue",$$slots:{default:[Fn]},$$scope:{ctx:m}}}),W=new Hn({props:{demo:Bn}}),{c(){e=$(),A(t.$$.fragment),u=$(),o=k("h2"),_=c("Disclaimer"),w=$(),A(I.$$.fragment),M=$(),y=k("pre"),N=$(),S=k("h2"),Z=c("Usage"),O=$(),g=k("p"),nn=c("InputWrapper is used to wrap all SvelteUI inputs (Select (not yet implemented), "),x=k("a"),an=c("TextInput"),tn=c(", "),C=k("a"),sn=c("NumberInput"),en=c(` and others).
It includes label with optional required asterisk, description and error message.`),L=$(),h=k("p"),pn=c("All SvelteUI inputs support the same props as InputWrapper. You can combine it with "),T=k("a"),on=c("Input"),ln=c(` component
to build your own custom inputs with the same style and behavior.`),B=$(),A(W.$$.fragment),F=$(),U=k("h2"),un=c("Change label element"),J=$(),b=k("p"),rn=c(`Some inputs like RadioGroup (not yet implemented) may require to detach label from certain element.
To implement this, use `),z=k("code"),cn=c("labelElement"),mn=c(":"),K=$(),E=k("pre"),this.h()},l(n){Un("svelte-pki6ul",document.head).forEach(s),e=v(n),H(t.$$.fragment,n),u=v(n),o=f(n,"H2",{});var R=d(o);_=i(R,"Disclaimer"),R.forEach(s),w=v(n),H(I.$$.fragment,n),M=v(n),y=f(n,"PRE",{class:!0});var Wn=d(y);Wn.forEach(s),N=v(n),S=f(n,"H2",{});var fn=d(S);Z=i(fn,"Usage"),fn.forEach(s),O=v(n),g=f(n,"P",{});var q=d(g);nn=i(q,"InputWrapper is used to wrap all SvelteUI inputs (Select (not yet implemented), "),x=f(q,"A",{href:!0});var dn=d(x);an=i(dn,"TextInput"),dn.forEach(s),tn=i(q,", "),C=f(q,"A",{href:!0});var $n=d(C);sn=i($n,"NumberInput"),$n.forEach(s),en=i(q,` and others).
It includes label with optional required asterisk, description and error message.`),q.forEach(s),L=v(n),h=f(n,"P",{});var Q=d(h);pn=i(Q,"All SvelteUI inputs support the same props as InputWrapper. You can combine it with "),T=f(Q,"A",{href:!0});var vn=d(T);on=i(vn,"Input"),vn.forEach(s),ln=i(Q,` component
to build your own custom inputs with the same style and behavior.`),Q.forEach(s),B=v(n),H(W.$$.fragment,n),F=v(n),U=f(n,"H2",{});var gn=d(U);un=i(gn,"Change label element"),gn.forEach(s),J=v(n),b=f(n,"P",{});var X=d(b);rn=i(X,`Some inputs like RadioGroup (not yet implemented) may require to detach label from certain element.
To implement this, use `),z=f(X,"CODE",{});var _n=d(z);cn=i(_n,"labelElement"),_n.forEach(s),mn=i(X,":"),X.forEach(s),K=v(n),E=f(n,"PRE",{class:!0});var En=d(E);En.forEach(s),this.h()},h(){Y(y,"class","language-svelte"),Y(x,"href","/core/text-input"),Y(C,"href","/core/number-input"),Y(T,"href","/core/input"),Y(E,"class","language-svelte")},m(n,p){l(n,e,p),P(t,n,p),l(n,u,p),l(n,o,p),r(o,_),l(n,w,p),P(I,n,p),l(n,M,p),l(n,y,p),y.innerHTML=wn,l(n,N,p),l(n,S,p),r(S,Z),l(n,O,p),l(n,g,p),r(g,nn),r(g,x),r(x,an),r(g,tn),r(g,C),r(C,sn),r(g,en),l(n,L,p),l(n,h,p),r(h,pn),r(h,T),r(T,on),r(h,ln),l(n,B,p),P(W,n,p),l(n,F,p),l(n,U,p),r(U,un),l(n,J,p),l(n,b,p),r(b,rn),r(b,z),r(z,cn),r(b,mn),l(n,K,p),l(n,E,p),E.innerHTML=yn,G=!0},p(n,[p]){(!G||p&0)&&a!==(a=kn+" - SvelteUI")&&(document.title=a);const R={};p&1&&(R.$$scope={dirty:p,ctx:n}),I.$set(R)},i(n){G||(D(t.$$.fragment,n),D(I.$$.fragment,n),D(W.$$.fragment,n),G=!0)},o(n){V(t.$$.fragment,n),V(I.$$.fragment,n),V(W.$$.fragment,n),G=!1},d(n){n&&s(e),j(t,n),n&&s(u),n&&s(o),n&&s(w),j(I,n),n&&s(M),n&&s(y),n&&s(N),n&&s(S),n&&s(O),n&&s(g),n&&s(L),n&&s(h),n&&s(B),j(W,n),n&&s(F),n&&s(U),n&&s(J),n&&s(b),n&&s(K),n&&s(E)}}}const Kn={title:"InputWrapper",group:"svelteuidev-core",packageGroup:"@svelteuidev/core",slug:"/core/input-wrapper/",category:"inputs",description:"Enhance custom inputs with label, error and description",importCode:"import { InputWrapper } from '@svelteuidev/core';",source:"svelteui-core/src/components/InputWrapper/InputWrapper.svelte",docs:"core/input-wrapper.md"},{title:kn,group:Qn,packageGroup:Xn,slug:Zn,category:na,description:aa,importCode:ta,source:sa,docs:ea}=Kn;class ka extends In{constructor(a){super(),hn(this,a,null,Jn,bn,{})}}export{ka as default,Kn as metadata};
