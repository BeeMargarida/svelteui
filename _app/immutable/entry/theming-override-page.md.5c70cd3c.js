import{S as tn,i as sn,s as nn,y as lt,z as ct,A as rt,g as it,d as ut,B as kt,q as a,r as e,b as c,h as s,C as rn,a as f,k as r,al as un,c as d,l as i,m as u,n as v,Y as n}from"../chunks/index.b0fe5a0f.js";import{i as kn}from"../chunks/navigation.fd10cd14.js";import{H as fn}from"../chunks/Heading.bb67d8e2.js";import{b as Zs}from"../chunks/paths.605af923.js";import{D as dn}from"../chunks/Demo.e6142117.js";import{C as mn}from"../chunks/Center.d0c4d84f.js";import{B as hn}from"../chunks/Button.a7c0fda0.js";function vn(S){let l;return{c(){l=a("I love open source!")},l(k){l=e(k,"I love open source!")},m(k,o){c(k,l,o)},d(k){k&&s(l)}}}function gn(S){let l,k;return l=new kn({props:{slot:"leftIcon",size:16}}),{c(){lt(l.$$.fragment)},l(o){ct(l.$$.fragment,o)},m(o,m){rt(l,o,m),k=!0},p:rn,i(o){k||(it(l.$$.fragment,o),k=!0)},o(o){ut(l.$$.fragment,o),k=!1},d(o){kt(l,o)}}}function yn(S){let l,k;return l=new hn({props:{override:S[0],$$slots:{leftIcon:[gn],default:[vn]},$$scope:{ctx:S}}}),{c(){lt(l.$$.fragment)},l(o){ct(l.$$.fragment,o)},m(o,m){rt(l,o,m),k=!0},p(o,m){const g={};m&2&&(g.$$scope={dirty:m,ctx:o}),l.$set(g)},i(o){k||(it(l.$$.fragment,o),k=!0)},o(o){ut(l.$$.fragment,o),k=!1},d(o){kt(l,o)}}}function Sn(S){let l,k;return l=new mn({props:{$$slots:{default:[yn]},$$scope:{ctx:S}}}),{c(){lt(l.$$.fragment)},l(o){ct(l.$$.fragment,o)},m(o,m){rt(l,o,m),k=!0},p(o,[m]){const g={};m&2&&(g.$$scope={dirty:m,ctx:o}),l.$set(g)},i(o){k||(it(l.$$.fragment,o),k=!0)},o(o){ut(l.$$.fragment,o),k=!1},d(o){kt(l,o)}}}const $n=`
<script>
  import { Button } from '@svelteuidev/core';
  import { GithubLogo } from 'radix-icons-svelte';

  const PrimaryButton = {
    $$blue: '#228be6',
    boxShadow: '0 2px 14px $$blue',
    transition: 'all 0.2s ease-in-out',
    '&:hover': {
      boxShadow: '0 4px 20px $$blue'
    }
  };
<\/script>

<Button override={PrimaryButton}>
	<GithubLogo slot="leftIcon" size={16} /> I love open source!
</Button>
`,_n="demo",bn={code:$n};function wn(S){return[{$$blue:"#228be6",boxShadow:"0 2px 14px $$blue",transition:"all 0.2s ease-in-out","&:hover":{boxShadow:"0 4px 20px $$blue"}}]}class En extends tn{constructor(l){super(),sn(this,l,wn,Sn,nn,{})}}const xn=Object.freeze(Object.defineProperty({__proto__:null,configuration:bn,default:En,type:_n},Symbol.toStringTag,{value:"Module"}));function Cn(S){let l,k,o,m,g,Dt,ft,E,Bt,A,Ht,jt,dt,x,Lt,P,Mt,qt,mt,L,w,Gt,V,zt,Rt,M,Wt,Yt,ht,q,Ft,vt,$,Nt,K,Vt,Kt,Q,Qt,Jt,gt,T,yt,G,Xt,St,y,Zt,z,ts,ss,J,ns,as,X,es,os,$t,U,an=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStyles <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> condition <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token function">createStyles</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">theme<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> condition <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
			<span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span>
			<span class="token literal-property property">color</span><span class="token operator">:</span> theme<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">themeColor</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token literal-property property">fontSize</span><span class="token operator">:</span> condition <span class="token operator">?</span> <span class="token string">'22px'</span> <span class="token operator">:</span> <span class="token string">'16px'</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> getStyles <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> condition <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

// the returned function can take an object, and the override happens in the css property
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token function">getStyles</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'$grape400'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Some content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,_t,R,ps,bt,C,ls,Z,cs,rs,wt,D,en=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Box <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Box</span> <span class="token attr-name">root</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I was a div but now I'm a paragraph tag!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Box</span><span class="token punctuation">></span></span></code>`,Et,O,is,tt,us,ks,xt,W,fs,Ct,_,ds,st,ms,hs,nt,vs,gs,Ot,B,on=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppShell</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-shell h-full flex flex-col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>YourHeaderComponent</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>

  <span class="token comment">&lt;!-- Content --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container flex-grow<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

  <span class="token comment">&lt;!-- Footer --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>YourFooterComponent</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AppShell</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">global</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
 <span class="token comment">/* Target the first inner wrapper container inside the AppShell */</span>
 <span class="token selector">.app-shell > div</span> <span class="token punctuation">&#123;</span>
   <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
   <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
   <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token comment">/* Target the wrapper div *for content* which is two layers down inside the AppShell */</span>
 <span class="token selector">.app-shell > div > div.body</span> <span class="token punctuation">&#123;</span>
   <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code>`,It,h,ys,H,Ss,$s,at,_s,bs,j,et,ws,Es,ot,xs,Cs,pt;return document.title=l=Os+" - SvelteUI",o=new fn({props:{title:Os,description:In,docs:An}}),T=new dn({props:{demo:xn}}),{c(){k=f(),lt(o.$$.fragment),m=f(),g=r("h1"),Dt=a("Getting Started"),ft=f(),E=r("p"),Bt=a("SvelteUI makes it simple to override components default styles. We recommend reading the "),A=r("a"),Ht=a("Stitches Styling docs"),jt=a(" before overriding the SvelteUI component styles. This is because styling with SvelteUI is very similar to styling with vanilla CSS, or CSS-preprocessors (SCSS/Sass) but with extra features, and reading that will help you get started."),dt=f(),x=r("p"),Lt=a("Remember that all "),P=r("a"),Mt=a("Stitches"),qt=a(" features are available in SvelteUI since it uses Stitches as a styling engine."),mt=f(),L=r("blockquote"),w=r("p"),Gt=a("Note: The tokens used here like "),V=r("code"),zt=a("$$blue"),Rt=a(", etc.. are defined in the "),M=r("a"),Wt=a("default theme"),Yt=a(" section."),ht=f(),q=r("h2"),Ft=a("Using the css prop"),vt=f(),$=r("p"),Nt=a("SvelteUI provides all components the "),K=r("code"),Vt=a("override"),Kt=a(" prop for overriding styles easily. It’s like the "),Q=r("code"),Qt=a("style"),Jt=a(" attribute on normal elements, but it supports tokens, media queries, nesting and token-aware values."),gt=f(),lt(T.$$.fragment),yt=f(),G=r("h2"),Xt=a("Overriding styles with the createStyles function"),St=f(),y=r("p"),Zt=a("When styling using the "),z=r("a"),ts=a("createStyles function"),ss=a(", you can also override styles by passing an object to the "),J=r("code"),ns=a("css"),as=a(" property in the function returned from the "),X=r("code"),es=a("createStyles"),os=a(" function. It may sound confusing at first, but it is much simpler than you may think:"),$t=f(),U=r("pre"),_t=f(),R=r("h2"),ps=a("Overriding the HTML tag"),bt=f(),C=r("p"),ls=a("Various (but not all) components support changing their root elements with the "),Z=r("code"),cs=a("root"),rs=a(" prop:"),wt=f(),D=r("pre"),Et=f(),O=r("h2"),is=a("Overriding using Svelte’s "),tt=r("code"),us=a("<style global>"),ks=a(" functionality"),xt=f(),W=r("p"),fs=a("Svelte’s global CSS styling feature can be used to override and enhance styles for SvelteUI components and their internal DOM elements."),Ct=f(),_=r("p"),ds=a("Given a component with a known structure, like "),st=r("code"),ms=a("AppShell"),hs=a(", which contains a "),nt=r("code"),vs=a("div.app-shell"),gs=a(" element used as a container, the following component would work:"),Ot=f(),B=r("pre"),It=f(),h=r("p"),ys=a("The "),H=r("a"),Ss=a("TailwindCSS"),$s=a("-flavored example code above makes targeted changes to the implicit inner "),at=r("code"),_s=a("<div>"),bs=a(" contained in "),j=r("a"),et=r("code"),ws=a("AppShell"),Es=a(" and another internal "),ot=r("code"),xs=a("<div>"),Cs=a(" in order to create a full page AppShell which expands to the height of the page."),this.h()},l(t){un("svelte-pki6ul",document.head).forEach(s),k=d(t),ct(o.$$.fragment,t),m=d(t),g=i(t,"H1",{});var Is=u(g);Dt=e(Is,"Getting Started"),Is.forEach(s),ft=d(t),E=i(t,"P",{});var At=u(E);Bt=e(At,"SvelteUI makes it simple to override components default styles. We recommend reading the "),A=i(At,"A",{href:!0,rel:!0});var As=u(A);Ht=e(As,"Stitches Styling docs"),As.forEach(s),jt=e(At," before overriding the SvelteUI component styles. This is because styling with SvelteUI is very similar to styling with vanilla CSS, or CSS-preprocessors (SCSS/Sass) but with extra features, and reading that will help you get started."),At.forEach(s),dt=d(t),x=i(t,"P",{});var Pt=u(x);Lt=e(Pt,"Remember that all "),P=i(Pt,"A",{href:!0,rel:!0});var Ps=u(P);Mt=e(Ps,"Stitches"),Ps.forEach(s),qt=e(Pt," features are available in SvelteUI since it uses Stitches as a styling engine."),Pt.forEach(s),mt=d(t),L=i(t,"BLOCKQUOTE",{});var Ts=u(L);w=i(Ts,"P",{});var Y=u(w);Gt=e(Y,"Note: The tokens used here like "),V=i(Y,"CODE",{});var Us=u(V);zt=e(Us,"$$blue"),Us.forEach(s),Rt=e(Y,", etc.. are defined in the "),M=i(Y,"A",{href:!0});var Ds=u(M);Wt=e(Ds,"default theme"),Ds.forEach(s),Yt=e(Y," section."),Y.forEach(s),Ts.forEach(s),ht=d(t),q=i(t,"H2",{});var Bs=u(q);Ft=e(Bs,"Using the css prop"),Bs.forEach(s),vt=d(t),$=i(t,"P",{});var F=u($);Nt=e(F,"SvelteUI provides all components the "),K=i(F,"CODE",{});var Hs=u(K);Vt=e(Hs,"override"),Hs.forEach(s),Kt=e(F," prop for overriding styles easily. It’s like the "),Q=i(F,"CODE",{});var js=u(Q);Qt=e(js,"style"),js.forEach(s),Jt=e(F," attribute on normal elements, but it supports tokens, media queries, nesting and token-aware values."),F.forEach(s),gt=d(t),ct(T.$$.fragment,t),yt=d(t),G=i(t,"H2",{});var Ls=u(G);Xt=e(Ls,"Overriding styles with the createStyles function"),Ls.forEach(s),St=d(t),y=i(t,"P",{});var I=u(y);Zt=e(I,"When styling using the "),z=i(I,"A",{href:!0});var Ms=u(z);ts=e(Ms,"createStyles function"),Ms.forEach(s),ss=e(I,", you can also override styles by passing an object to the "),J=i(I,"CODE",{});var qs=u(J);ns=e(qs,"css"),qs.forEach(s),as=e(I," property in the function returned from the "),X=i(I,"CODE",{});var Gs=u(X);es=e(Gs,"createStyles"),Gs.forEach(s),os=e(I," function. It may sound confusing at first, but it is much simpler than you may think:"),I.forEach(s),$t=d(t),U=i(t,"PRE",{class:!0});var pn=u(U);pn.forEach(s),_t=d(t),R=i(t,"H2",{});var zs=u(R);ps=e(zs,"Overriding the HTML tag"),zs.forEach(s),bt=d(t),C=i(t,"P",{});var Tt=u(C);ls=e(Tt,"Various (but not all) components support changing their root elements with the "),Z=i(Tt,"CODE",{});var Rs=u(Z);cs=e(Rs,"root"),Rs.forEach(s),rs=e(Tt," prop:"),Tt.forEach(s),wt=d(t),D=i(t,"PRE",{class:!0});var ln=u(D);ln.forEach(s),Et=d(t),O=i(t,"H2",{});var Ut=u(O);is=e(Ut,"Overriding using Svelte’s "),tt=i(Ut,"CODE",{});var Ws=u(tt);us=e(Ws,"<style global>"),Ws.forEach(s),ks=e(Ut," functionality"),Ut.forEach(s),xt=d(t),W=i(t,"P",{});var Ys=u(W);fs=e(Ys,"Svelte’s global CSS styling feature can be used to override and enhance styles for SvelteUI components and their internal DOM elements."),Ys.forEach(s),Ct=d(t),_=i(t,"P",{});var N=u(_);ds=e(N,"Given a component with a known structure, like "),st=i(N,"CODE",{});var Fs=u(st);ms=e(Fs,"AppShell"),Fs.forEach(s),hs=e(N,", which contains a "),nt=i(N,"CODE",{});var Ns=u(nt);vs=e(Ns,"div.app-shell"),Ns.forEach(s),gs=e(N," element used as a container, the following component would work:"),N.forEach(s),Ot=d(t),B=i(t,"PRE",{class:!0});var cn=u(B);cn.forEach(s),It=d(t),h=i(t,"P",{});var b=u(h);ys=e(b,"The "),H=i(b,"A",{href:!0,rel:!0});var Vs=u(H);Ss=e(Vs,"TailwindCSS"),Vs.forEach(s),$s=e(b,"-flavored example code above makes targeted changes to the implicit inner "),at=i(b,"CODE",{});var Ks=u(at);_s=e(Ks,"<div>"),Ks.forEach(s),bs=e(b," contained in "),j=i(b,"A",{href:!0,rel:!0});var Qs=u(j);et=i(Qs,"CODE",{});var Js=u(et);ws=e(Js,"AppShell"),Js.forEach(s),Qs.forEach(s),Es=e(b," and another internal "),ot=i(b,"CODE",{});var Xs=u(ot);xs=e(Xs,"<div>"),Xs.forEach(s),Cs=e(b," in order to create a full page AppShell which expands to the height of the page."),b.forEach(s),this.h()},h(){v(A,"href","https://stitches.dev/docs/styling"),v(A,"rel","nofollow"),v(P,"href","https://stitches.dev"),v(P,"rel","nofollow"),v(M,"href",Zs+"/theming/default-theme"),v(z,"href",Zs+"/theming/create-styles#styling-with-svelteui"),v(U,"class","language-svelte"),v(D,"class","language-svelte"),v(B,"class","language-svelte"),v(H,"href","https://tailwindcss.com"),v(H,"rel","nofollow"),v(j,"href","https://github.com/svelteuidev/svelteui/blob/main/packages/svelteui-core/src/components/AppShell/AppShell.svelte"),v(j,"rel","nofollow")},m(t,p){c(t,k,p),rt(o,t,p),c(t,m,p),c(t,g,p),n(g,Dt),c(t,ft,p),c(t,E,p),n(E,Bt),n(E,A),n(A,Ht),n(E,jt),c(t,dt,p),c(t,x,p),n(x,Lt),n(x,P),n(P,Mt),n(x,qt),c(t,mt,p),c(t,L,p),n(L,w),n(w,Gt),n(w,V),n(V,zt),n(w,Rt),n(w,M),n(M,Wt),n(w,Yt),c(t,ht,p),c(t,q,p),n(q,Ft),c(t,vt,p),c(t,$,p),n($,Nt),n($,K),n(K,Vt),n($,Kt),n($,Q),n(Q,Qt),n($,Jt),c(t,gt,p),rt(T,t,p),c(t,yt,p),c(t,G,p),n(G,Xt),c(t,St,p),c(t,y,p),n(y,Zt),n(y,z),n(z,ts),n(y,ss),n(y,J),n(J,ns),n(y,as),n(y,X),n(X,es),n(y,os),c(t,$t,p),c(t,U,p),U.innerHTML=an,c(t,_t,p),c(t,R,p),n(R,ps),c(t,bt,p),c(t,C,p),n(C,ls),n(C,Z),n(Z,cs),n(C,rs),c(t,wt,p),c(t,D,p),D.innerHTML=en,c(t,Et,p),c(t,O,p),n(O,is),n(O,tt),n(tt,us),n(O,ks),c(t,xt,p),c(t,W,p),n(W,fs),c(t,Ct,p),c(t,_,p),n(_,ds),n(_,st),n(st,ms),n(_,hs),n(_,nt),n(nt,vs),n(_,gs),c(t,Ot,p),c(t,B,p),B.innerHTML=on,c(t,It,p),c(t,h,p),n(h,ys),n(h,H),n(H,Ss),n(h,$s),n(h,at),n(at,_s),n(h,bs),n(h,j),n(j,et),n(et,ws),n(h,Es),n(h,ot),n(ot,xs),n(h,Cs),pt=!0},p(t,[p]){(!pt||p&0)&&l!==(l=Os+" - SvelteUI")&&(document.title=l)},i(t){pt||(it(o.$$.fragment,t),it(T.$$.fragment,t),pt=!0)},o(t){ut(o.$$.fragment,t),ut(T.$$.fragment,t),pt=!1},d(t){t&&s(k),kt(o,t),t&&s(m),t&&s(g),t&&s(ft),t&&s(E),t&&s(dt),t&&s(x),t&&s(mt),t&&s(L),t&&s(ht),t&&s(q),t&&s(vt),t&&s($),t&&s(gt),kt(T,t),t&&s(yt),t&&s(G),t&&s(St),t&&s(y),t&&s($t),t&&s(U),t&&s(_t),t&&s(R),t&&s(bt),t&&s(C),t&&s(wt),t&&s(D),t&&s(Et),t&&s(O),t&&s(xt),t&&s(W),t&&s(Ct),t&&s(_),t&&s(Ot),t&&s(B),t&&s(It),t&&s(h)}}}const On={title:"Override",description:"Overriding base styles.",docs:"theming/override.md"},{title:Os,description:In,docs:An}=On;class Ln extends tn{constructor(l){super(),sn(this,l,null,Cn,nn,{})}}export{Ln as default,On as metadata};
