import{S as De,i as Oe,s as Ce,y as M,z as Y,A as q,g as z,d as A,B,a as f,c as v,b as c,h as t,q as p,r as i,k as u,al as Le,l as m,m as h,n as We,Y as n}from"../chunks/index.b0fe5a0f.js";import{T as je,c as Me}from"../chunks/navigation.618498c8.js";import{H as Ye}from"../chunks/Heading.a23d207d.js";import"../chunks/paths.48415ce3.js";import{D as qe}from"../chunks/Demo.7e60bc72.js";import{S as ze}from"../chunks/Stack.d0bbbc24.js";import{S as Ae}from"../chunks/Switch.d4621302.js";function Be(g){let s;return{c(){s=p("Press to change the theme")},l(r){s=i(r,"Press to change the theme")},m(r,a){c(r,s,a)},d(r){r&&t(s)}}}function Re(g){let s,r,a,d;return s=new je({props:{$$slots:{default:[Be]},$$scope:{ctx:g}}}),a=new Ae({}),a.$on("change",g[0]),{c(){M(s.$$.fragment),r=f(),M(a.$$.fragment)},l(o){Y(s.$$.fragment,o),r=v(o),Y(a.$$.fragment,o)},m(o,_){q(s,o,_),c(o,r,_),q(a,o,_),d=!0},p(o,_){const y={};_&2&&(y.$$scope={dirty:_,ctx:o}),s.$set(y)},i(o){d||(z(s.$$.fragment,o),z(a.$$.fragment,o),d=!0)},o(o){A(s.$$.fragment,o),A(a.$$.fragment,o),d=!1},d(o){B(s,o),o&&t(r),B(a,o)}}}function Fe(g){let s,r;return s=new ze({props:{align:"center",$$slots:{default:[Re]},$$scope:{ctx:g}}}),{c(){M(s.$$.fragment)},l(a){Y(s.$$.fragment,a)},m(a,d){q(s,a,d),r=!0},p(a,[d]){const o={};d&2&&(o.$$scope={dirty:d,ctx:a}),s.$set(o)},i(a){r||(z(s.$$.fragment,a),r=!0)},o(a){A(s.$$.fragment,a),r=!1},d(a){B(s,a)}}}const Je=`
<script>
 	import { colorScheme, SvelteUIProvider, Stack, Switch, Text } from '@svelteuidev/core';

	function toggleTheme() {
		colorScheme.update((v) => (v === 'light' ? 'dark' : 'light'));
	}
<\/script>

<SvelteUIProvider withGlobalStyles themeObserver={$colorScheme}>
    <Stack align='center'>
        <Text>Press to change the theme</Text>
        <Switch on:change={toggleTheme} />
    </Stack>
</SvelteUIProvider>
`,Ke="demo",Ne={code:Je};function Qe(g){function s(){Me.update(r=>r==="light"?"dark":"light")}return[s]}class Ve extends De{constructor(s){super(),Oe(this,s,Qe,Fe,Ce,{})}}const Xe=Object.freeze(Object.defineProperty({__proto__:null,configuration:Ne,default:Ve,type:Ke},Symbol.toStringTag,{value:"Module"}));function Ze(g){let s,r,a,d,o,_,y,S,Z,T,ee,te,R,w,F,I,se,J,$,D,ae,oe,O,ne,le,C,re,ce,K,E,Ge=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> SvelteUIProvider <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SvelteUIProvider</span> <span class="token attr-name">withGlobalStyles</span> <span class="token attr-name">themeObserver=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token string">'dark'</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>YourApp</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SvelteUIProvider</span><span class="token punctuation">></span></span></code>`,N,x,pe,Q,U,ie,V,k,G,ue,me,H,he,de,L,fe,ve,W,ke,j;return document.title=s=$e+" - SvelteUI",a=new Ye({props:{title:$e,description:tt,docs:st}}),w=new qe({props:{demo:Xe}}),{c(){r=f(),M(a.$$.fragment),d=f(),o=u("h2"),_=p("Getting Started"),y=f(),S=u("p"),Z=p("Without any additional steps, all SvelteUI components support the dark color scheme by default. Wrap your application in SvelteUIProvider and specify the "),T=u("code"),ee=p("themeObserver"),te=p(" prop to use a dark color scheme:"),R=f(),M(w.$$.fragment),F=f(),I=u("h2"),se=p("Global styles"),J=f(),$=u("p"),D=u("code"),ae=p('theme.colors["dark700"].value'),oe=p(" shade is considered to be the body background color and "),O=u("code"),ne=p('theme.colors["dark50"].value'),le=p(" shade is used as text color with dark color scheme. You can add them by setting the "),C=u("code"),re=p("withGlobalStyles"),ce=p(" prop on SvelteUIProvider, which includes them by default:"),K=f(),E=u("pre"),N=f(),x=u("h2"),pe=p("More to come"),Q=f(),U=u("p"),ie=p("We are in constant development, so here are some things you can expect down the line:"),V=f(),k=u("ul"),G=u("li"),ue=p("Subscribe to theme changes throughout the app"),me=f(),H=u("li"),he=p("Saving theme in local storage"),de=f(),L=u("li"),fe=p("Changing theme based on keyboard shortcut"),ve=f(),W=u("li"),ke=p("Detect preferred color scheme"),this.h()},l(e){Le("svelte-pki6ul",document.head).forEach(t),r=v(e),Y(a.$$.fragment,e),d=v(e),o=m(e,"H2",{});var _e=h(o);_=i(_e,"Getting Started"),_e.forEach(t),y=v(e),S=m(e,"P",{});var X=h(S);Z=i(X,"Without any additional steps, all SvelteUI components support the dark color scheme by default. Wrap your application in SvelteUIProvider and specify the "),T=m(X,"CODE",{});var ge=h(T);ee=i(ge,"themeObserver"),ge.forEach(t),te=i(X," prop to use a dark color scheme:"),X.forEach(t),R=v(e),Y(w.$$.fragment,e),F=v(e),I=m(e,"H2",{});var Se=h(I);se=i(Se,"Global styles"),Se.forEach(t),J=v(e),$=m(e,"P",{});var P=h($);D=m(P,"CODE",{});var be=h(D);ae=i(be,'theme.colors["dark700"].value'),be.forEach(t),oe=i(P," shade is considered to be the body background color and "),O=m(P,"CODE",{});var ye=h(O);ne=i(ye,'theme.colors["dark50"].value'),ye.forEach(t),le=i(P," shade is used as text color with dark color scheme. You can add them by setting the "),C=m(P,"CODE",{});var we=h(C);re=i(we,"withGlobalStyles"),we.forEach(t),ce=i(P," prop on SvelteUIProvider, which includes them by default:"),P.forEach(t),K=v(e),E=m(e,"PRE",{class:!0});var He=h(E);He.forEach(t),N=v(e),x=m(e,"H2",{});var Ee=h(x);pe=i(Ee,"More to come"),Ee.forEach(t),Q=v(e),U=m(e,"P",{});var Pe=h(U);ie=i(Pe,"We are in constant development, so here are some things you can expect down the line:"),Pe.forEach(t),V=v(e),k=m(e,"UL",{});var b=h(k);G=m(b,"LI",{});var Ie=h(G);ue=i(Ie,"Subscribe to theme changes throughout the app"),Ie.forEach(t),me=v(b),H=m(b,"LI",{});var xe=h(H);he=i(xe,"Saving theme in local storage"),xe.forEach(t),de=v(b),L=m(b,"LI",{});var Ue=h(L);fe=i(Ue,"Changing theme based on keyboard shortcut"),Ue.forEach(t),ve=v(b),W=m(b,"LI",{});var Te=h(W);ke=i(Te,"Detect preferred color scheme"),Te.forEach(t),b.forEach(t),this.h()},h(){We(E,"class","language-svelte")},m(e,l){c(e,r,l),q(a,e,l),c(e,d,l),c(e,o,l),n(o,_),c(e,y,l),c(e,S,l),n(S,Z),n(S,T),n(T,ee),n(S,te),c(e,R,l),q(w,e,l),c(e,F,l),c(e,I,l),n(I,se),c(e,J,l),c(e,$,l),n($,D),n(D,ae),n($,oe),n($,O),n(O,ne),n($,le),n($,C),n(C,re),n($,ce),c(e,K,l),c(e,E,l),E.innerHTML=Ge,c(e,N,l),c(e,x,l),n(x,pe),c(e,Q,l),c(e,U,l),n(U,ie),c(e,V,l),c(e,k,l),n(k,G),n(G,ue),n(k,me),n(k,H),n(H,he),n(k,de),n(k,L),n(L,fe),n(k,ve),n(k,W),n(W,ke),j=!0},p(e,[l]){(!j||l&0)&&s!==(s=$e+" - SvelteUI")&&(document.title=s)},i(e){j||(z(a.$$.fragment,e),z(w.$$.fragment,e),j=!0)},o(e){A(a.$$.fragment,e),A(w.$$.fragment,e),j=!1},d(e){e&&t(r),B(a,e),e&&t(d),e&&t(o),e&&t(y),e&&t(S),e&&t(R),B(w,e),e&&t(F),e&&t(I),e&&t(J),e&&t($),e&&t(K),e&&t(E),e&&t(N),e&&t(x),e&&t(Q),e&&t(U),e&&t(V),e&&t(k)}}}const et={title:"Dark Theme",description:"Change the color scheme of your application.",docs:"theming/dark-theme.md"},{title:$e,description:tt,docs:st}=et;class it extends De{constructor(s){super(),Oe(this,s,null,Ze,Ce,{})}}export{it as default,et as metadata};
