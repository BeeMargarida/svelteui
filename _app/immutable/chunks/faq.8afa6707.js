import{S as Ft,i as Ot,s as Qt,a as r,k as l,q as o,y as $t,al as zt,h as a,c as u,l as i,m as c,r as p,z as Ut,n as k,b as n,W as e,A as Ct,X as Gt,g as xt,d as At,B as Pt}from"./index.b4f0bbdc.js";import"./navigation.17f733d0.js";import{B as Nt}from"./BottomNav.3ef68d29.js";import{S as Wt}from"./Space.a7a52d8c.js";function Xt(Bt){let I,$,V,j,U,Z,q,h,Ht=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@svelteui/dev"</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>animation-bounce<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>I have a Tailwind animation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span><span class="token punctuation">></span></span></code>`,L,m,tt,P,at,st,M,d,jt=`<code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./src/**/*.&#123;html,js,svelte,ts&#125;'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">important</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// &lt;-- adding this line will give your Tailwind classes !important by default</span>
	<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,R,y,nt,B,et,ot,Y,w,qt='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>font-bold !font-medium<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This will be medium even though bold comes later in the CSS.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code>',D,v,pt,H,lt,it,F,_,Lt='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sm:hover:!tw-font-bold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>',O,g,ct,S,rt,Q,b,z,C,ut,G,f,ft,E,kt,mt,x,yt,vt,N,T,W;return b=new Wt({props:{h:"xl"}}),T=new Nt({props:{type:"prev",slug:"contributing",title:"Contributing",group:"Getting Started"}}),{c(){I=r(),$=l("h2"),V=o("How do I integrate TailwindCSS with SvelteUI?"),j=r(),U=l("p"),Z=o("This may come as a surprise, but Tailwind integrates with SvelteUI pretty well. If you find that you simply want to add classes to a component to enhance it, then you can add the class like you would with any other element:"),q=r(),h=l("pre"),L=r(),m=l("p"),tt=o("If you want to have your Tailwind classes override SvelteUI styles then a simple way to achieve that is altering your Tailwind config to generate utilities as “!important”, by setting the "),P=l("code"),at=o("important"),st=o(" key in your configuration options to true:"),M=r(),d=l("pre"),R=r(),y=l("p"),nt=o("Alternatively, you can make any utility important by adding a "),B=l("code"),et=o("!"),ot=o(" character to the beginning:"),Y=r(),w=l("pre"),D=r(),v=l("p"),pt=o("The "),H=l("code"),lt=o("!"),it=o(" always goes at the beginning of the utility name, after any variants, but before any prefix:"),F=r(),_=l("pre"),O=r(),g=l("p"),ct=o("This allows you to increase specificity over the styles you don’t control. You can read more about configuration options on the official "),S=l("a"),rt=o("Tailwind docs"),Q=r(),$t(b.$$.fragment),z=r(),C=l("h2"),ut=o("Can I use other css-in-js libraries or SCSS/SASS with SvelteUI?"),G=r(),f=l("p"),ft=o("Yes, but keep in mind that SvelteUI already uses "),E=l("a"),kt=o("Stitches"),mt=o(", so you might end up with style conflicts and have to overwrite styles with !important. Before selecting other libraries, please consider using SvelteUI’s "),x=l("a"),yt=o("built-in solution"),vt=o("."),N=r(),$t(T.$$.fragment),this.h()},l(t){zt("svelte-bve6sd",document.head).forEach(a),I=u(t),$=i(t,"H2",{});var dt=c($);V=p(dt,"How do I integrate TailwindCSS with SvelteUI?"),dt.forEach(a),j=u(t),U=i(t,"P",{});var wt=c(U);Z=p(wt,"This may come as a surprise, but Tailwind integrates with SvelteUI pretty well. If you find that you simply want to add classes to a component to enhance it, then you can add the class like you would with any other element:"),wt.forEach(a),q=u(t),h=i(t,"PRE",{class:!0});var Mt=c(h);Mt.forEach(a),L=u(t),m=i(t,"P",{});var X=c(m);tt=p(X,"If you want to have your Tailwind classes override SvelteUI styles then a simple way to achieve that is altering your Tailwind config to generate utilities as “!important”, by setting the "),P=i(X,"CODE",{});var _t=c(P);at=p(_t,"important"),_t.forEach(a),st=p(X," key in your configuration options to true:"),X.forEach(a),M=u(t),d=i(t,"PRE",{class:!0});var Rt=c(d);Rt.forEach(a),R=u(t),y=i(t,"P",{});var J=c(y);nt=p(J,"Alternatively, you can make any utility important by adding a "),B=i(J,"CODE",{});var gt=c(B);et=p(gt,"!"),gt.forEach(a),ot=p(J," character to the beginning:"),J.forEach(a),Y=u(t),w=i(t,"PRE",{class:!0});var Yt=c(w);Yt.forEach(a),D=u(t),v=i(t,"P",{});var K=c(v);pt=p(K,"The "),H=i(K,"CODE",{});var St=c(H);lt=p(St,"!"),St.forEach(a),it=p(K," always goes at the beginning of the utility name, after any variants, but before any prefix:"),K.forEach(a),F=u(t),_=i(t,"PRE",{class:!0});var Dt=c(_);Dt.forEach(a),O=u(t),g=i(t,"P",{});var ht=c(g);ct=p(ht,"This allows you to increase specificity over the styles you don’t control. You can read more about configuration options on the official "),S=i(ht,"A",{href:!0,rel:!0});var bt=c(S);rt=p(bt,"Tailwind docs"),bt.forEach(a),ht.forEach(a),Q=u(t),Ut(b.$$.fragment,t),z=u(t),C=i(t,"H2",{});var Et=c(C);ut=p(Et,"Can I use other css-in-js libraries or SCSS/SASS with SvelteUI?"),Et.forEach(a),G=u(t),f=i(t,"P",{});var A=c(f);ft=p(A,"Yes, but keep in mind that SvelteUI already uses "),E=i(A,"A",{href:!0,rel:!0});var Tt=c(E);kt=p(Tt,"Stitches"),Tt.forEach(a),mt=p(A,", so you might end up with style conflicts and have to overwrite styles with !important. Before selecting other libraries, please consider using SvelteUI’s "),x=i(A,"A",{href:!0});var It=c(x);yt=p(It,"built-in solution"),It.forEach(a),vt=p(A,"."),A.forEach(a),N=u(t),Ut(T.$$.fragment,t),this.h()},h(){document.title="FAQ - SvelteUI",k(h,"class","language-svelte"),k(d,"class","language-js"),k(w,"class","language-html"),k(_,"class","language-html"),k(S,"href","https://tailwindcss.com/docs/configuration#important"),k(S,"rel","nofollow"),k(E,"href","https://stitches.dev"),k(E,"rel","nofollow"),k(x,"href","theming/create-styles")},m(t,s){n(t,I,s),n(t,$,s),e($,V),n(t,j,s),n(t,U,s),e(U,Z),n(t,q,s),n(t,h,s),h.innerHTML=Ht,n(t,L,s),n(t,m,s),e(m,tt),e(m,P),e(P,at),e(m,st),n(t,M,s),n(t,d,s),d.innerHTML=jt,n(t,R,s),n(t,y,s),e(y,nt),e(y,B),e(B,et),e(y,ot),n(t,Y,s),n(t,w,s),w.innerHTML=qt,n(t,D,s),n(t,v,s),e(v,pt),e(v,H),e(H,lt),e(v,it),n(t,F,s),n(t,_,s),_.innerHTML=Lt,n(t,O,s),n(t,g,s),e(g,ct),e(g,S),e(S,rt),n(t,Q,s),Ct(b,t,s),n(t,z,s),n(t,C,s),e(C,ut),n(t,G,s),n(t,f,s),e(f,ft),e(f,E),e(E,kt),e(f,mt),e(f,x),e(x,yt),e(f,vt),n(t,N,s),Ct(T,t,s),W=!0},p:Gt,i(t){W||(xt(b.$$.fragment,t),xt(T.$$.fragment,t),W=!0)},o(t){At(b.$$.fragment,t),At(T.$$.fragment,t),W=!1},d(t){t&&a(I),t&&a($),t&&a(j),t&&a(U),t&&a(q),t&&a(h),t&&a(L),t&&a(m),t&&a(M),t&&a(d),t&&a(R),t&&a(y),t&&a(Y),t&&a(w),t&&a(D),t&&a(v),t&&a(F),t&&a(_),t&&a(O),t&&a(g),t&&a(Q),Pt(b,t),t&&a(z),t&&a(C),t&&a(G),t&&a(f),t&&a(N),Pt(T,t)}}}const ta={title:"FAQ"};class aa extends Ft{constructor(I){super(),Ot(this,I,null,Xt,Qt,{})}}export{aa as default,ta as metadata};
