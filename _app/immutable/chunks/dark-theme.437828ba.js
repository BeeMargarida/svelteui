import{S as Ee,i as Pe,s as xe,y as R,z as X,A as F,g as J,d as K,B as N,a as v,c as $,b as u,h as a,q as p,r as i,k as m,l as h,m as d,n as Ue,W as s,X as De}from"./index.b4f0bbdc.js";import{D as Oe}from"./Demo.9cccb4ab.js";import{S as Ce}from"./Stack.545b11b0.js";import{T as Ge}from"./Text.d4cabcdc.js";import{S as We}from"./Switch.d0a1e406.js";import{c as Le}from"./Box.195443f6.js";function je(g){let t;return{c(){t=p("Press to change the theme")},l(l){t=i(l,"Press to change the theme")},m(l,o){u(l,t,o)},d(l){l&&a(t)}}}function He(g){let t,l,o,c;return t=new Ge({props:{$$slots:{default:[je]},$$scope:{ctx:g}}}),o=new We({}),o.$on("change",g[0]),{c(){R(t.$$.fragment),l=v(),R(o.$$.fragment)},l(n){X(t.$$.fragment,n),l=$(n),X(o.$$.fragment,n)},m(n,f){F(t,n,f),u(n,l,f),F(o,n,f),c=!0},p(n,f){const E={};f&2&&(E.$$scope={dirty:f,ctx:n}),t.$set(E)},i(n){c||(J(t.$$.fragment,n),J(o.$$.fragment,n),c=!0)},o(n){K(t.$$.fragment,n),K(o.$$.fragment,n),c=!1},d(n){N(t,n),n&&a(l),N(o,n)}}}function Me(g){let t,l;return t=new Ce({props:{align:"center",$$slots:{default:[He]},$$scope:{ctx:g}}}),{c(){R(t.$$.fragment)},l(o){X(t.$$.fragment,o)},m(o,c){F(t,o,c),l=!0},p(o,[c]){const n={};c&2&&(n.$$scope={dirty:c,ctx:o}),t.$set(n)},i(o){l||(J(t.$$.fragment,o),l=!0)},o(o){K(t.$$.fragment,o),l=!1},d(o){N(t,o)}}}const Ye=`
<script>
 	import { colorScheme, SvelteUIProvider, Stack, Switch, Text } from '@svelteuidev/core';

	function toggleTheme() {
		colorScheme.update((v) => (v === 'light' ? 'dark' : 'light'));
	}
<\/script>

<SvelteUIProvider withGlobalStyles themeObserver={$colorScheme}>
    <Stack align='center'>
        <Text>Press to change the theme</Text>
        <Switch on:change={toggleTheme} />
    </Stack>
</SvelteUIProvider>
`,qe="demo",ze={code:Ye};function Ae(g){function t(){Le.update(l=>l==="light"?"dark":"light")}return[t]}class Be extends Ee{constructor(t){super(),Pe(this,t,Ae,Me,xe,{})}}const Re=Object.freeze(Object.defineProperty({__proto__:null,configuration:ze,default:Be,type:qe},Symbol.toStringTag,{value:"Module"}));function Xe(g){let t,l,o,c,n,f,E,Q,L,b,j,P,V,H,_,T,Z,ee,U,te,ae,D,se,oe,M,y,Ie=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> SvelteUIProvider <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SvelteUIProvider</span> <span class="token attr-name">withGlobalStyles</span> <span class="token attr-name">themeObserver=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token string">'dark'</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>YourApp</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SvelteUIProvider</span><span class="token punctuation">></span></span></code>`,Y,x,ne,q,I,le,z,k,O,re,ce,C,pe,ie,G,ue,me,W,he,A;return b=new Oe({props:{demo:Re}}),{c(){t=m("h2"),l=p("Getting Started"),o=v(),c=m("p"),n=p("Without any additional steps, all SvelteUI components support the dark color scheme by default. Wrap your application in SvelteUIProvider and specify the "),f=m("code"),E=p("themeObserver"),Q=p(" prop to use a dark color scheme:"),L=v(),R(b.$$.fragment),j=v(),P=m("h2"),V=p("Global styles"),H=v(),_=m("p"),T=m("code"),Z=p('theme.colors["dark700"].value'),ee=p(" shade is considered to be the body background color and "),U=m("code"),te=p('theme.colors["dark50"].value'),ae=p(" shade is used as text color with dark color scheme. You can add them by setting the "),D=m("code"),se=p("withGlobalStyles"),oe=p(" prop on SvelteUIProvider, which includes them by default:"),M=v(),y=m("pre"),Y=v(),x=m("h2"),ne=p("More to come"),q=v(),I=m("p"),le=p("We are in constant development, so here are some things you can expect down the line:"),z=v(),k=m("ul"),O=m("li"),re=p("Subscribe to theme changes throughout the app"),ce=v(),C=m("li"),pe=p("Saving theme in local storage"),ie=v(),G=m("li"),ue=p("Changing theme based on keyboard shortcut"),me=v(),W=m("li"),he=p("Detect preferred color scheme"),this.h()},l(e){t=h(e,"H2",{});var r=d(t);l=i(r,"Getting Started"),r.forEach(a),o=$(e),c=h(e,"P",{});var B=d(c);n=i(B,"Without any additional steps, all SvelteUI components support the dark color scheme by default. Wrap your application in SvelteUIProvider and specify the "),f=h(B,"CODE",{});var de=d(f);E=i(de,"themeObserver"),de.forEach(a),Q=i(B," prop to use a dark color scheme:"),B.forEach(a),L=$(e),X(b.$$.fragment,e),j=$(e),P=h(e,"H2",{});var fe=d(P);V=i(fe,"Global styles"),fe.forEach(a),H=$(e),_=h(e,"P",{});var w=d(_);T=h(w,"CODE",{});var ke=d(T);Z=i(ke,'theme.colors["dark700"].value'),ke.forEach(a),ee=i(w," shade is considered to be the body background color and "),U=h(w,"CODE",{});var ve=d(U);te=i(ve,'theme.colors["dark50"].value'),ve.forEach(a),ae=i(w," shade is used as text color with dark color scheme. You can add them by setting the "),D=h(w,"CODE",{});var $e=d(D);se=i($e,"withGlobalStyles"),$e.forEach(a),oe=i(w," prop on SvelteUIProvider, which includes them by default:"),w.forEach(a),M=$(e),y=h(e,"PRE",{class:!0});var Te=d(y);Te.forEach(a),Y=$(e),x=h(e,"H2",{});var _e=d(x);ne=i(_e,"More to come"),_e.forEach(a),q=$(e),I=h(e,"P",{});var ge=d(I);le=i(ge,"We are in constant development, so here are some things you can expect down the line:"),ge.forEach(a),z=$(e),k=h(e,"UL",{});var S=d(k);O=h(S,"LI",{});var Se=d(O);re=i(Se,"Subscribe to theme changes throughout the app"),Se.forEach(a),ce=$(S),C=h(S,"LI",{});var be=d(C);pe=i(be,"Saving theme in local storage"),be.forEach(a),ie=$(S),G=h(S,"LI",{});var ye=d(G);ue=i(ye,"Changing theme based on keyboard shortcut"),ye.forEach(a),me=$(S),W=h(S,"LI",{});var we=d(W);he=i(we,"Detect preferred color scheme"),we.forEach(a),S.forEach(a),this.h()},h(){Ue(y,"class","language-svelte")},m(e,r){u(e,t,r),s(t,l),u(e,o,r),u(e,c,r),s(c,n),s(c,f),s(f,E),s(c,Q),u(e,L,r),F(b,e,r),u(e,j,r),u(e,P,r),s(P,V),u(e,H,r),u(e,_,r),s(_,T),s(T,Z),s(_,ee),s(_,U),s(U,te),s(_,ae),s(_,D),s(D,se),s(_,oe),u(e,M,r),u(e,y,r),y.innerHTML=Ie,u(e,Y,r),u(e,x,r),s(x,ne),u(e,q,r),u(e,I,r),s(I,le),u(e,z,r),u(e,k,r),s(k,O),s(O,re),s(k,ce),s(k,C),s(C,pe),s(k,ie),s(k,G),s(G,ue),s(k,me),s(k,W),s(W,he),A=!0},p:De,i(e){A||(J(b.$$.fragment,e),A=!0)},o(e){K(b.$$.fragment,e),A=!1},d(e){e&&a(t),e&&a(o),e&&a(c),e&&a(L),N(b,e),e&&a(j),e&&a(P),e&&a(H),e&&a(_),e&&a(M),e&&a(y),e&&a(Y),e&&a(x),e&&a(q),e&&a(I),e&&a(z),e&&a(k)}}}const Ze={title:"Dark Theme",description:"Change the color scheme of your application.",docs:"theming/dark-theme.md"};class et extends Ee{constructor(t){super(),Pe(this,t,null,Xe,xe,{})}}export{et as default,Ze as metadata};
