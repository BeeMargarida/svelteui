import{S as H,i as W,s as G,D as ze,y as w,z as E,A as S,J as Ce,a6 as Ue,g,d as b,B as k,a as h,c as I,b as u,X as rt,h as a,q as f,r as m,e as xe,a2 as Pe,k as $,l as _,m as v,W as p,n as pe}from"./index.b4f0bbdc.js";import{I as De}from"./InfoCircled.41a18796.js";import{D as K}from"./Demo.9cccb4ab.js";import{A as je}from"./Alert.cab756e0.js";import{E as Te}from"./EnvelopeClosed.ea600c81.js";import{a as O}from"./Input.32dba1e9.js";import{M as Oe}from"./MagnifyingGlass.6d2ade11.js";import{B as Me}from"./Badge.e4be72ab.js";function Ve(d){let e,o;const n=[{icon:Te},d[0]];let l={};for(let s=0;s<n.length;s+=1)l=ze(l,n[s]);return e=new O({props:l}),{c(){w(e.$$.fragment)},l(s){E(e.$$.fragment,s)},m(s,r){S(e,s,r),o=!0},p(s,[r]){const c=r&1?Ce(n,[r&0&&{icon:Te},r&1&&Ue(s[0])]):{};e.$set(c)},i(s){o||(g(e.$$.fragment,s),o=!0)},o(s){b(e.$$.fragment,s),o=!1},d(s){k(e,s)}}}const Be=(d,e)=>`<script>
  import { Input, InputWrapper } from '@svelteuidev/core';
  import { EnvelopeClosed } from 'radix-icons-svelte';
<\/script>

<Input icon={EnvelopeClosed} ${d} />`,Ae="configurator",He={codeTemplate:Be,configurator:[{name:"variant",type:"select",data:[{label:"default",value:"default"},{label:"filled",value:"filled"},{label:"unstyled",value:"unstyled"},{label:"headless",value:"headless"}],initialValue:"default",defaultValue:"default"},{name:"placeholder",type:"string",initialValue:"Your email"},{name:"radius",type:"size",initialValue:"sm",defaultValue:"sm"},{name:"size",type:"size",initialValue:"sm",defaultValue:"sm"},{name:"disabled",type:"boolean",initialValue:!1,defaultValue:!1},{name:"invalid",type:"boolean",initialValue:!1,defaultValue:!1}],multiline:!0};function We(d,e,o){let{props:n={}}=e;return d.$$set=l=>{"props"in l&&o(0,n=l.props)},[n]}class Ge extends H{constructor(e){super(),W(this,e,We,Ve,G,{props:0})}}const Ne=Object.freeze(Object.defineProperty({__proto__:null,configuration:He,default:Ge,type:Ae},Symbol.toStringTag,{value:"Module"}));function qe(d){let e,o,n,l,s,r;return e=new O({props:{variant:"default",placeholder:"Default variant"}}),n=new O({props:{variant:"filled",placeholder:"Filled variant"}}),s=new O({props:{variant:"unstyled",placeholder:"Unstyled variant"}}),{c(){w(e.$$.fragment),o=h(),w(n.$$.fragment),l=h(),w(s.$$.fragment)},l(c){E(e.$$.fragment,c),o=I(c),E(n.$$.fragment,c),l=I(c),E(s.$$.fragment,c)},m(c,x){S(e,c,x),u(c,o,x),S(n,c,x),u(c,l,x),S(s,c,x),r=!0},p:rt,i(c){r||(g(e.$$.fragment,c),g(n.$$.fragment,c),g(s.$$.fragment,c),r=!0)},o(c){b(e.$$.fragment,c),b(n.$$.fragment,c),b(s.$$.fragment,c),r=!1},d(c){k(e,c),c&&a(o),k(n,c),c&&a(l),k(s,c)}}}const Fe=`<script>
    import { Input } from '@svelteuidev/core';
<\/script>

<Input variant='default' placeholder='Default variant' />
<Input variant='filled' placeholder='Filled variant' />
<Input variant='unstyled' placeholder='Unstyled variant' />`,Je="demo",Le={code:Fe};class Re extends H{constructor(e){super(),W(this,e,null,qe,G,{})}}const Xe=Object.freeze(Object.defineProperty({__proto__:null,configuration:Le,default:Re,type:Je},Symbol.toStringTag,{value:"Module"}));function Ye(d){let e;return{c(){e=f("new")},l(o){e=m(o,"new")},m(o,n){u(o,e,n)},d(o){o&&a(e)}}}function Ke(d){let e,o;return e=new Me({props:{slot:"rightSection",color:"blue",variant:"filled",$$slots:{default:[Ye]},$$scope:{ctx:d}}}),{c(){w(e.$$.fragment)},l(n){E(e.$$.fragment,n)},m(n,l){S(e,n,l),o=!0},p(n,l){const s={};l&1&&(s.$$scope={dirty:l,ctx:n}),e.$set(s)},i(n){o||(g(e.$$.fragment,n),o=!0)},o(n){b(e.$$.fragment,n),o=!1},d(n){k(e,n)}}}function Qe(d){let e,o;return e=new O({props:{icon:Oe,placeholder:"Search",rightSectionWidth:70,styles:{rightSection:{pointerEvents:"none"}},$$slots:{rightSection:[Ke]},$$scope:{ctx:d}}}),{c(){w(e.$$.fragment)},l(n){E(e.$$.fragment,n)},m(n,l){S(e,n,l),o=!0},p(n,[l]){const s={};l&1&&(s.$$scope={dirty:l,ctx:n}),e.$set(s)},i(n){o||(g(e.$$.fragment,n),o=!0)},o(n){b(e.$$.fragment,n),o=!1},d(n){k(e,n)}}}const Ze=`<script>
    import { Badge, Input } from '@svelteuidev/core';
    import { MagnifyingGlass } from 'radix-icons-svelte';
<\/script>

<Input
    icon={MagnifyingGlass}
    placeholder='Search'
    rightSectionWidth={70}
    styles={{ rightSection: { pointerEvents: 'none' } }}
>
    <Badge slot='rightSection' color='blue' variant='filled'>
        new
    </Badge>
</Input>`,tn="demo",en={code:Ze};class nn extends H{constructor(e){super(),W(this,e,null,Qe,G,{})}}const sn=Object.freeze(Object.defineProperty({__proto__:null,configuration:en,default:nn,type:tn},Symbol.toStringTag,{value:"Module"}));function on(d,e,o){const n=d.slice();return n[0]=e[o],n}function an(d){let e,o;return e=new O({props:{size:d[0],placeholder:`${d[0]} input size`}}),{c(){w(e.$$.fragment)},l(n){E(e.$$.fragment,n)},m(n,l){S(e,n,l),o=!0},p:rt,i(n){o||(g(e.$$.fragment,n),o=!0)},o(n){b(e.$$.fragment,n),o=!1},d(n){k(e,n)}}}function ln(d){let e,o,n=["xs","sm","md","lg","xl"],l=[];for(let s=0;s<5;s+=1)l[s]=an(on(d,n,s));return{c(){for(let s=0;s<5;s+=1)l[s].c();e=xe()},l(s){for(let r=0;r<5;r+=1)l[r].l(s);e=xe()},m(s,r){for(let c=0;c<5;c+=1)l[c]&&l[c].m(s,r);u(s,e,r),o=!0},p:rt,i(s){if(!o){for(let r=0;r<5;r+=1)g(l[r]);o=!0}},o(s){l=l.filter(Boolean);for(let r=0;r<5;r+=1)b(l[r]);o=!1},d(s){Pe(l,s),s&&a(e)}}}const rn="demo",pn={};class un extends H{constructor(e){super(),W(this,e,null,ln,G,{})}}const cn=Object.freeze(Object.defineProperty({__proto__:null,configuration:pn,default:un,type:rn},Symbol.toStringTag,{value:"Module"}));function fn(d){let e;return{c(){e=f("Button input")},l(o){e=m(o,"Button input")},m(o,n){u(o,e,n)},d(o){o&&a(e)}}}function mn(d){let e,o,n,l,s;return{c(){e=$("option"),o=f("1"),n=h(),l=$("option"),s=f("2"),this.h()},l(r){e=_(r,"OPTION",{});var c=v(e);o=m(c,"1"),c.forEach(a),n=I(r),l=_(r,"OPTION",{});var x=v(l);s=m(x,"2"),x.forEach(a),this.h()},h(){e.__value="1",e.value=e.__value,l.__value="2",l.value=l.__value},m(r,c){u(r,e,c),p(e,o),u(r,n,c),u(r,l,c),p(l,s)},p:rt,d(r){r&&a(e),r&&a(n),r&&a(l)}}}function dn(d){let e,o,n,l;return e=new O({props:{root:"button",$$slots:{default:[fn]},$$scope:{ctx:d}}}),n=new O({props:{root:"select",$$slots:{default:[mn]},$$scope:{ctx:d}}}),{c(){w(e.$$.fragment),o=h(),w(n.$$.fragment)},l(s){E(e.$$.fragment,s),o=I(s),E(n.$$.fragment,s)},m(s,r){S(e,s,r),u(s,o,r),S(n,s,r),l=!0},p(s,[r]){const c={};r&1&&(c.$$scope={dirty:r,ctx:s}),e.$set(c);const x={};r&1&&(x.$$scope={dirty:r,ctx:s}),n.$set(x)},i(s){l||(g(e.$$.fragment,s),g(n.$$.fragment,s),l=!0)},o(s){b(e.$$.fragment,s),b(n.$$.fragment,s),l=!1},d(s){k(e,s),s&&a(o),k(n,s)}}}const $n=`<script>
    import { Input } from '@svelteuidev/core';
<\/script>

<Input root="button">Button input</Input>
<Input root="select">
    <option value="1">1</option>
    <option value="2">2</option>
</Input>`,_n="demo",vn={code:$n};class hn extends H{constructor(e){super(),W(this,e,null,dn,G,{})}}const In=Object.freeze(Object.defineProperty({__proto__:null,configuration:vn,default:hn,type:_n},Symbol.toStringTag,{value:"Module"}));function yn(d){let e,o;return{c(){e=$("p"),o=f("$"),this.h()},l(n){e=_(n,"P",{slot:!0});var l=v(e);o=m(l,"$"),l.forEach(a),this.h()},h(){pe(e,"slot","rightSection")},m(n,l){u(n,e,l),p(e,o)},p:rt,d(n){n&&a(e)}}}function gn(d){let e,o;return e=new O({props:{override:{input:{width:"100%",boxSizing:"border-box"}},icon:Oe,variant:"headless",placeholder:"Add your own styles with styles API",$$slots:{rightSection:[yn]},$$scope:{ctx:d}}}),{c(){w(e.$$.fragment)},l(n){E(e.$$.fragment,n)},m(n,l){S(e,n,l),o=!0},p(n,[l]){const s={};l&1&&(s.$$scope={dirty:l,ctx:n}),e.$set(s)},i(n){o||(g(e.$$.fragment,n),o=!0)},o(n){b(e.$$.fragment,n),o=!1},d(n){k(e,n)}}}const bn=`<script>
    import { Input } from '@svelteuidev/core';
    import { MagnifyingGlass } from 'radix-icons-svelte';
<\/script>

<Input
    icon={MagnifyingGlass}
    variant="headless"
    placeholder="Add your own styles with styles API"
>
    <p slot="rightSection">$</p>
</Input>`,wn="demo",En={code:bn};class Sn extends H{constructor(e){super(),W(this,e,null,gn,G,{})}}const kn=Object.freeze(Object.defineProperty({__proto__:null,configuration:En,default:Sn,type:wn},Symbol.toStringTag,{value:"Module"}));function xn(d){let e;return{c(){e=f("In most cases, you should not use Input component in your application. The Input component is a base for other inputs and was not designed to be used directly.")},l(o){e=m(o,"In most cases, you should not use Input component in your application. The Input component is a base for other inputs and was not designed to be used directly.")},m(o,n){u(o,e,n)},d(o){o&&a(e)}}}function Tn(d){let e,o,n,l,s,r,c=`<code class="language-svelte">// Incorrect usage, input is not accessible
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputWrapper</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputWrapper</span><span class="token punctuation">></span></span>

// Use TextInput instead of Input everywhere you want to use Input, // it is accessible by default
and includes InputWrapper
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextInput</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input label<span class="token punctuation">"</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Input description<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code>`,x,N,Ct,it,z,Ut,q,Pt,Dt,pt,D,ut,F,jt,ct,C,Mt,Q,Vt,Bt,ft,j,mt,J,At,dt,L,Ht,$t,M,_t,R,Wt,vt,y,Gt,Z,Nt,qt,tt,Ft,Jt,et,Lt,Rt,nt,Xt,Yt,st,Kt,Qt,ot,Zt,te,ht,V,It,X,ee,yt,U,ne,at,se,oe,gt,B,bt,Y,ae,wt,P,le,lt,re,ie,Et,A,St;return l=new je({props:{icon:De,title:"Important",color:"blue",$$slots:{default:[xn]},$$scope:{ctx:d}}}),D=new K({props:{demo:Ne}}),j=new K({props:{demo:Xe}}),M=new K({props:{demo:sn}}),V=new K({props:{demo:cn}}),B=new K({props:{demo:In}}),A=new K({props:{demo:kn}}),{c(){e=$("h2"),o=f("Disclaimer"),n=h(),w(l.$$.fragment),s=h(),r=$("pre"),x=h(),N=$("h2"),Ct=f("Usage"),it=h(),z=$("p"),Ut=f("Input component is used as base for all other inputs ("),q=$("a"),Pt=f("TextInput"),Dt=f(`, Textarea (not yet implemented) and others). The single purpose of Input is to provide shared styles and features to other inputs.
Use other components listed above to build forms (as they provide better accessibility) and Input component as base for your own custom inputs with SvelteUI theme.`),pt=h(),w(D.$$.fragment),ut=h(),F=$("h2"),jt=f("Variants"),ct=h(),C=$("p"),Mt=f("Input has 3 variants, all of which are available on all SvelteUI inputs. Note that "),Q=$("code"),Vt=f("unstyled"),Bt=f(" input variant may significantly impact usability, so use it wisely."),ft=h(),w(j.$$.fragment),mt=h(),J=$("h2"),At=f("Icon and right section"),dt=h(),L=$("p"),Ht=f("The Input component has two ways to render an Icon. The left Icon is passed in as a prop, and it is any valid Svelte Component. The right Icon is passed in through a named slot."),$t=h(),w(M.$$.fragment),_t=h(),R=$("h2"),Wt=f("Sizes"),vt=h(),y=$("p"),Gt=f("Component has 5 pre-made sizes: "),Z=$("code"),Nt=f("xs"),qt=f(", "),tt=$("code"),Ft=f("sm"),Jt=f(", "),et=$("code"),Lt=f("md"),Rt=f(", "),nt=$("code"),Xt=f("lg"),Yt=f(", "),st=$("code"),Kt=f("xl"),Qt=f(". Use "),ot=$("code"),Zt=f("size"),te=f(" prop to control input height, padding and font-size:"),ht=h(),w(V.$$.fragment),It=h(),X=$("h2"),ee=f("Custom component"),yt=h(),U=$("p"),ne=f("As Input component is intended to be a base for all other inputs, you can pass the "),at=$("code"),se=f("root"),oe=f(" prop which will define the root element:"),gt=h(),w(B.$$.fragment),bt=h(),Y=$("h2"),ae=f("Headless variant"),wt=h(),P=$("p"),le=f(`If you want to add your own styles to Input, it’s better to start from scratch rather than overriding SvelteUI styles.
Use special `),lt=$("code"),re=f("headless"),ie=f(" variant which does not include any SvelteUI styles but still supports all other features: icon, right section, etc.:"),Et=h(),w(A.$$.fragment),this.h()},l(t){e=_(t,"H2",{});var i=v(e);o=m(i,"Disclaimer"),i.forEach(a),n=I(t),E(l.$$.fragment,t),s=I(t),r=_(t,"PRE",{class:!0});var kt=v(r);kt.forEach(a),x=I(t),N=_(t,"H2",{});var ue=v(N);Ct=m(ue,"Usage"),ue.forEach(a),it=I(t),z=_(t,"P",{});var xt=v(z);Ut=m(xt,"Input component is used as base for all other inputs ("),q=_(xt,"A",{href:!0});var ce=v(q);Pt=m(ce,"TextInput"),ce.forEach(a),Dt=m(xt,`, Textarea (not yet implemented) and others). The single purpose of Input is to provide shared styles and features to other inputs.
Use other components listed above to build forms (as they provide better accessibility) and Input component as base for your own custom inputs with SvelteUI theme.`),xt.forEach(a),pt=I(t),E(D.$$.fragment,t),ut=I(t),F=_(t,"H2",{});var fe=v(F);jt=m(fe,"Variants"),fe.forEach(a),ct=I(t),C=_(t,"P",{});var Tt=v(C);Mt=m(Tt,"Input has 3 variants, all of which are available on all SvelteUI inputs. Note that "),Q=_(Tt,"CODE",{});var me=v(Q);Vt=m(me,"unstyled"),me.forEach(a),Bt=m(Tt," input variant may significantly impact usability, so use it wisely."),Tt.forEach(a),ft=I(t),E(j.$$.fragment,t),mt=I(t),J=_(t,"H2",{});var de=v(J);At=m(de,"Icon and right section"),de.forEach(a),dt=I(t),L=_(t,"P",{});var $e=v(L);Ht=m($e,"The Input component has two ways to render an Icon. The left Icon is passed in as a prop, and it is any valid Svelte Component. The right Icon is passed in through a named slot."),$e.forEach(a),$t=I(t),E(M.$$.fragment,t),_t=I(t),R=_(t,"H2",{});var _e=v(R);Wt=m(_e,"Sizes"),_e.forEach(a),vt=I(t),y=_(t,"P",{});var T=v(y);Gt=m(T,"Component has 5 pre-made sizes: "),Z=_(T,"CODE",{});var ve=v(Z);Nt=m(ve,"xs"),ve.forEach(a),qt=m(T,", "),tt=_(T,"CODE",{});var he=v(tt);Ft=m(he,"sm"),he.forEach(a),Jt=m(T,", "),et=_(T,"CODE",{});var Ie=v(et);Lt=m(Ie,"md"),Ie.forEach(a),Rt=m(T,", "),nt=_(T,"CODE",{});var ye=v(nt);Xt=m(ye,"lg"),ye.forEach(a),Yt=m(T,", "),st=_(T,"CODE",{});var ge=v(st);Kt=m(ge,"xl"),ge.forEach(a),Qt=m(T,". Use "),ot=_(T,"CODE",{});var be=v(ot);Zt=m(be,"size"),be.forEach(a),te=m(T," prop to control input height, padding and font-size:"),T.forEach(a),ht=I(t),E(V.$$.fragment,t),It=I(t),X=_(t,"H2",{});var we=v(X);ee=m(we,"Custom component"),we.forEach(a),yt=I(t),U=_(t,"P",{});var Ot=v(U);ne=m(Ot,"As Input component is intended to be a base for all other inputs, you can pass the "),at=_(Ot,"CODE",{});var Ee=v(at);se=m(Ee,"root"),Ee.forEach(a),oe=m(Ot," prop which will define the root element:"),Ot.forEach(a),gt=I(t),E(B.$$.fragment,t),bt=I(t),Y=_(t,"H2",{});var Se=v(Y);ae=m(Se,"Headless variant"),Se.forEach(a),wt=I(t),P=_(t,"P",{});var zt=v(P);le=m(zt,`If you want to add your own styles to Input, it’s better to start from scratch rather than overriding SvelteUI styles.
Use special `),lt=_(zt,"CODE",{});var ke=v(lt);re=m(ke,"headless"),ke.forEach(a),ie=m(zt," variant which does not include any SvelteUI styles but still supports all other features: icon, right section, etc.:"),zt.forEach(a),Et=I(t),E(A.$$.fragment,t),this.h()},h(){pe(r,"class","language-svelte"),pe(q,"href","core/text-input")},m(t,i){u(t,e,i),p(e,o),u(t,n,i),S(l,t,i),u(t,s,i),u(t,r,i),r.innerHTML=c,u(t,x,i),u(t,N,i),p(N,Ct),u(t,it,i),u(t,z,i),p(z,Ut),p(z,q),p(q,Pt),p(z,Dt),u(t,pt,i),S(D,t,i),u(t,ut,i),u(t,F,i),p(F,jt),u(t,ct,i),u(t,C,i),p(C,Mt),p(C,Q),p(Q,Vt),p(C,Bt),u(t,ft,i),S(j,t,i),u(t,mt,i),u(t,J,i),p(J,At),u(t,dt,i),u(t,L,i),p(L,Ht),u(t,$t,i),S(M,t,i),u(t,_t,i),u(t,R,i),p(R,Wt),u(t,vt,i),u(t,y,i),p(y,Gt),p(y,Z),p(Z,Nt),p(y,qt),p(y,tt),p(tt,Ft),p(y,Jt),p(y,et),p(et,Lt),p(y,Rt),p(y,nt),p(nt,Xt),p(y,Yt),p(y,st),p(st,Kt),p(y,Qt),p(y,ot),p(ot,Zt),p(y,te),u(t,ht,i),S(V,t,i),u(t,It,i),u(t,X,i),p(X,ee),u(t,yt,i),u(t,U,i),p(U,ne),p(U,at),p(at,se),p(U,oe),u(t,gt,i),S(B,t,i),u(t,bt,i),u(t,Y,i),p(Y,ae),u(t,wt,i),u(t,P,i),p(P,le),p(P,lt),p(lt,re),p(P,ie),u(t,Et,i),S(A,t,i),St=!0},p(t,[i]){const kt={};i&1&&(kt.$$scope={dirty:i,ctx:t}),l.$set(kt)},i(t){St||(g(l.$$.fragment,t),g(D.$$.fragment,t),g(j.$$.fragment,t),g(M.$$.fragment,t),g(V.$$.fragment,t),g(B.$$.fragment,t),g(A.$$.fragment,t),St=!0)},o(t){b(l.$$.fragment,t),b(D.$$.fragment,t),b(j.$$.fragment,t),b(M.$$.fragment,t),b(V.$$.fragment,t),b(B.$$.fragment,t),b(A.$$.fragment,t),St=!1},d(t){t&&a(e),t&&a(n),k(l,t),t&&a(s),t&&a(r),t&&a(x),t&&a(N),t&&a(it),t&&a(z),t&&a(pt),k(D,t),t&&a(ut),t&&a(F),t&&a(ct),t&&a(C),t&&a(ft),k(j,t),t&&a(mt),t&&a(J),t&&a(dt),t&&a(L),t&&a($t),k(M,t),t&&a(_t),t&&a(R),t&&a(vt),t&&a(y),t&&a(ht),k(V,t),t&&a(It),t&&a(X),t&&a(yt),t&&a(U),t&&a(gt),k(B,t),t&&a(bt),t&&a(Y),t&&a(wt),t&&a(P),t&&a(Et),k(A,t)}}}const Vn={title:"Input",group:"svelteuidev-core",packageGroup:"@svelteuidev/core",slug:"/core/input/",category:"inputs",description:"Base component to create custom inputs",importCode:"import { Input } from '@svelteuidev/core';",source:"svelteui-core/src/components/Input/Input.svelte",docs:"core/input.md"};class Bn extends H{constructor(e){super(),W(this,e,null,Tn,G,{})}}export{Bn as default,Vn as metadata};
