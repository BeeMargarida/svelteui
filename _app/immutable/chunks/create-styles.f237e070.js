import{S as Xa,i as Na,s as Ka,k as e,q as c,l as o,m as p,r,h as t,n as g,b as l,W as a,X as vp,y as us,z as ks,A as ms,g as fs,d as ds,B as hs,a as u,c as k,a0 as gp,L as Yp}from"./index.b4f0bbdc.js";import{I as Mp}from"./InfoCircled.41a18796.js";import{D as Je}from"./Demo.9cccb4ab.js";import{f as so}from"./Box.195443f6.js";import{G as bp}from"./Group.db734d69.js";import{A as Fp}from"./Alert.cab756e0.js";import{S as Wp}from"./Space.a7a52d8c.js";function qp(b){let i,f,m,d,h;return{c(){i=e("div"),f=e("div"),m=c("createStyles function demo"),this.h()},l(y){i=o(y,"DIV",{class:!0});var v=p(i);f=o(v,"DIV",{class:!0});var S=p(f);m=r(S,"createStyles function demo"),S.forEach(t),v.forEach(t),this.h()},h(){g(f,"class",d=b[1].child),g(i,"class",h=b[0]())},m(y,v){l(y,i,v),a(i,f),a(f,m)},p(y,[v]){v&2&&d!==(d=y[1].child)&&g(f,"class",d),v&1&&h!==(h=y[0]())&&g(i,"class",h)},i:vp,o:vp,d(y){y&&t(i)}}}const Gp=`
<script>
	import { createStyles } from '@svelteuidev/core';

	const useStyles = createStyles((theme) => {
		return {
			root: {
				[\`\${theme.dark} &\`]: {
					// using of SvelteUI utilities
					// bc === backgroundColor
					bc: theme.colors['dark500'].value
				},
				// subscribe to color scheme changes right in your styles
				// use theme functions to make styling easier
				backgroundColor: theme.fn.themeColor('gray', 1),
				maxWidth: 400,
				width: '100%',
				height: 180,
				display: 'flex',
				alignItems: 'center',
				justifyContent: 'center',
				marginLeft: 'auto',
				marginRight: 'auto',
				borderRadius: theme.radii.sm.value,
				fontSize: theme.fontSizes.xs.value,

				// Dynamic media queries, define breakpoints in theme, use anywhere
				// You can use the theme object, or tokens, it's up to you
				'@sm': {
					'.child': {
						fontSize: '$md'
					}
				}
			},

			child: {
				[\`\${theme.dark} &\`]: {
					bc: theme.colors['dark800'].value,
					color: 'White'
				},
				backgroundColor: 'White',
				padding: '$mdPX',
				borderRadius: theme.radii.sm.value,
				boxShadow: theme.shadows.md,
				color: 'Black'
			}
		};
	});

	$: ({ classes, getStyles } = useStyles());
<\/script>

<div class={getStyles()}>
	<div class={classes.child}>css function demo</div>
</div>
`,Vp="demo",Xp={code:Gp};function Np(b,i,f){let m,d;const h=so(y=>({root:{[`${y.dark} &`]:{bc:y.colors.dark500.value},backgroundColor:y.fn.themeColor("gray",1),maxWidth:400,width:"100%",height:180,display:"flex",alignItems:"center",justifyContent:"center",marginLeft:"auto",marginRight:"auto",borderRadius:y.radii.sm.value,fontSize:y.fontSizes.xs.value,"@sm":{".child":{fontSize:"$md"}}},child:{[`${y.dark} &`]:{bc:y.colors.dark800.value,color:"White"},backgroundColor:"White",padding:"$mdPX",borderRadius:y.radii.sm.value,boxShadow:y.shadows.md,color:"Black"}}));return f(1,{classes:m,getStyles:d}=h(),m,f(0,d)),[d,m]}class Kp extends Xa{constructor(i){super(),Na(this,i,Np,qp,Ka,{})}}const Jp=Object.freeze(Object.defineProperty({__proto__:null,configuration:Xp,default:Kp,type:Vp},Symbol.toStringTag,{value:"Module"}));function Qp(b){let i,f,m,d,h,y,v,S,w;return{c(){i=e("button"),f=c("First"),d=u(),h=e("button"),y=c("Second"),this.h()},l(_){i=o(_,"BUTTON",{class:!0,type:!0});var $=p(i);f=r($,"First"),$.forEach(t),d=k(_),h=o(_,"BUTTON",{class:!0,type:!0});var H=p(h);y=r(H,"Second"),H.forEach(t),this.h()},h(){g(i,"class",m=b[2](b[1](),{active:b[0]===0})),g(i,"type","button"),g(h,"class",v=b[2](b[1](),{active:b[0]===1})),g(h,"type","button")},m(_,$){l(_,i,$),a(i,f),l(_,d,$),l(_,h,$),a(h,y),S||(w=[gp(i,"click",b[3]),gp(h,"click",b[4])],S=!0)},p(_,$){$&7&&m!==(m=_[2](_[1](),{active:_[0]===0}))&&g(i,"class",m),$&7&&v!==(v=_[2](_[1](),{active:_[0]===1}))&&g(h,"class",v)},d(_){_&&t(i),_&&t(d),_&&t(h),S=!1,Yp(w)}}}function Zp(b){let i,f;return i=new bp({props:{position:"center",$$slots:{default:[Qp]},$$scope:{ctx:b}}}),{c(){us(i.$$.fragment)},l(m){ks(i.$$.fragment,m)},m(m,d){ms(i,m,d),f=!0},p(m,[d]){const h={};d&71&&(h.$$scope={dirty:d,ctx:m}),i.$set(h)},i(m){f||(fs(i.$$.fragment,m),f=!0)},o(m){ds(i.$$.fragment,m),f=!1},d(m){hs(i,m)}}}const sl=`
    <script>
	import { createStyles } from '@svelteuidev/core';

	let active = 0;

	const useStyles = createStyles((theme) => ({
		root: {
			[\`\${theme.dark} &\`]: {
				bc: theme.fn.themeColor('dark', 5),
				color: 'white'
			},
			backgroundColor: theme.fn.themeColor('gray', 1),
			border: 0,
			color: 'black',
			borderRadius: theme.radii.md.value,
			padding: \`\${+theme.space.sm.value}px \${+theme.space.lg.value}px\`,
			cursor: 'pointer',
			margin: +theme.space.md.value,
			'&.active': {
				backgroundColor: theme.fn.themeColor('blue', 6),
				color: 'white'
			}
		}
	}));

	$: ({ cx, getStyles } = useStyles());
<\/script>

<button
    class={cx(getStyles(), { active: active === 0 })}
    on:click={() => (active = 0)}
    type="button"
>
    First
</button>
<button
    class={cx(getStyles(), { active: active === 1 })}
    on:click={() => (active = 1)}
    type="button"
>
    Second
</button>
`,tl="demo",al={code:sl};function nl(b,i,f){let m,d,h=0;const y=so(w=>({root:{[`${w.dark} &`]:{bc:w.fn.themeColor("dark",5),color:"white"},backgroundColor:w.fn.themeColor("gray",1),border:0,color:"black",borderRadius:w.radii.md.value,padding:`${+w.space.sm.value}px ${+w.space.lg.value}px`,cursor:"pointer",margin:+w.space.md.value,"&.active":{backgroundColor:w.fn.themeColor("blue",6),color:"white"}}})),v=()=>f(0,h=0),S=()=>f(0,h=1);return f(2,{cx:m,getStyles:d}=y(),m,f(1,d)),[h,d,m,v,S]}class el extends Xa{constructor(i){super(),Na(this,i,nl,Zp,Ka,{})}}const ol=Object.freeze(Object.defineProperty({__proto__:null,configuration:al,default:el,type:tl},Symbol.toStringTag,{value:"Module"}));function pl(b){let i,f,m,d,h,y;return{c(){i=e("button"),f=c(Qe),m=c(" button with "),d=c(Ze),h=c("px radius"),this.h()},l(v){i=o(v,"BUTTON",{type:!0,class:!0});var S=p(i);f=r(S,Qe),m=r(S," button with "),d=r(S,Ze),h=r(S,"px radius"),S.forEach(t),this.h()},h(){g(i,"type","button"),g(i,"class",y=b[0]())},m(v,S){l(v,i,S),a(i,f),a(i,m),a(i,d),a(i,h)},p(v,S){S&1&&y!==(y=v[0]())&&g(i,"class",y)},d(v){v&&t(i)}}}function ll(b){let i,f;return i=new bp({props:{position:"center",$$slots:{default:[pl]},$$scope:{ctx:b}}}),{c(){us(i.$$.fragment)},l(m){ks(i.$$.fragment,m)},m(m,d){ms(i,m,d),f=!0},p(m,[d]){const h={};d&5&&(h.$$scope={dirty:d,ctx:m}),i.$set(h)},i(m){f||(fs(i.$$.fragment,m),f=!0)},o(m){ds(i.$$.fragment,m),f=!1},d(m){hs(i,m)}}}const cl=`
<script>
	import { createStyles } from '@svelteuidev/core';

	interface ButtonProps {
		color: 'blue' | 'violet';
		radius: number;
	}

	let color: ButtonProps['color'] = 'blue';
	let radius: ButtonProps['radius'] = 50;

	const useStyles = createStyles((theme, { color, radius }: ButtonProps) => ({
		root: {
			color: 'white',
			backgroundColor: theme.fn.themeColor(color, 6),
			borderRadius: radius,
			padding: '$mdPX',
			margin: '$mdPX',
			border: 0,
			cursor: 'pointer'
		}
	}));

	// This is reactive destructuring
	$: ({ getStyles } = useStyles({ color, radius }));
<\/script>

<button type="button" class={getStyles()}>
	{color} button with {radius}px radius
</button>
`,rl="demo",il={code:cl};let Qe="blue",Ze=50;function ul(b,i,f){let m;const d=so((h,{color:y,radius:v})=>({root:{color:"white",backgroundColor:h.fn.themeColor(y,6),borderRadius:v,padding:"$mdPX",margin:"$mdPX",border:0,cursor:"pointer"}}));return f(0,{getStyles:m}=d({color:Qe,radius:Ze}),m),[m]}class kl extends Xa{constructor(i){super(),Na(this,i,ul,ll,Ka,{})}}const ml=Object.freeze(Object.defineProperty({__proto__:null,configuration:il,default:kl,type:rl},Symbol.toStringTag,{value:"Module"}));function fl(b){let i;return{c(){i=c("Do not use external libraries like `classnames` or `clsx` with class names created with `createStyles` function as it will produce style collisions.")},l(f){i=r(f,"Do not use external libraries like `classnames` or `clsx` with class names created with `createStyles` function as it will produce style collisions.")},m(f,m){l(f,i,m)},d(f){f&&t(i)}}}function dl(b){let i,f,m,d,h,y,v,S,w,_,$,H,Ja,Qa,Yt,ys,Za,Mt,vs,sn,Ft,E,Ns,tn,an,Ks,nn,en,Js,on,pn,Qs,ln,cn,Zs,rn,Wt,gs,un,qt,L,kn,st,mn,fn,Gt,K,Vt,B,dn,tt,hn,yn,Xt,A,at,vn,gn,nt,bn,Nt,Y,Sn,et,_n,wn,Kt,M,ot,U,pt,En,$n,lt,Tn,Cn,ct,In,Pn,T,D,rt,it,xn,jn,ut,kt,Un,Dn,mt,On,zn,O,ft,dt,Rn,Hn,ht,yt,Ln,Bn,vt,An,Yn,z,gt,bt,Mn,Fn,St,_t,Wn,qn,wt,Gn,Vn,R,Et,$t,Xn,Nn,Tt,Ct,Kn,Jn,It,Qn,Jt,bs,Zn,Qt,C,se,Pt,te,ae,xt,ne,ee,Zt,J,sa,Ss,oe,ta,F,pe,jt,le,ce,aa,W,na,Q,ea,Z,oa,_s,re,pa,q,ie,Ut,ue,ke,la,ss,Sp=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStyles <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span>

    <span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token function">createStyles</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">theme</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token operator">...</span>baseStyles
            <span class="token punctuation">&#125;</span>
            <span class="token comment">// the required key to define your variants</span>
            <span class="token literal-property property">variants</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// you can think of each property on the variant property as an identifier</span>
                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">// then each property on the "identifier" is the desired variant style</span>
                    <span class="token literal-property property">violet</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                        <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'blueviolet'</span><span class="token punctuation">,</span>
                        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>
                        <span class="token string-property property">'&amp;:hover'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                            <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'darkviolet'</span><span class="token punctuation">,</span>
                        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">gray</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                        <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'gainsboro'</span><span class="token punctuation">,</span>
                        <span class="token string-property property">'&amp;:hover'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                            <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'lightgray'</span><span class="token punctuation">,</span>
                        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

    <span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>getStyles<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

// declare your variants in the object passed into styles
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
    <span class="token attr-name">class=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token function">getStyles</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">css</span><span class="token operator">:</span> overrides<span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'violet'</span><span class="token punctuation">,</span> <span class="token literal-property property">moreVariants</span><span class="token operator">:</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
<span class="token punctuation">></span></span>
    Some content
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code>`,ca,I,me,Dt,fe,de,ts,he,ye,ra,ws,Ot,ve,ia,Es,ge,ua,G,be,$s,Se,_e,ka,Ts,we,ma,P,Ee,zt,$e,Te,Rt,Ce,Ie,fa,as,_p=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createTheme <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> newTheme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
			<span class="token literal-property property">hiContrast</span><span class="token operator">:</span> <span class="token string">'hsl(206,2%,93%)'</span><span class="token punctuation">,</span>
			<span class="token literal-property property">loContrast</span><span class="token operator">:</span> <span class="token string">'hsl(206,8%,8%)'</span><span class="token punctuation">,</span>

			<span class="token literal-property property">gray100</span><span class="token operator">:</span> <span class="token string">'hsl(206,8%,12%)'</span><span class="token punctuation">,</span>
			<span class="token literal-property property">gray200</span><span class="token operator">:</span> <span class="token string">'hsl(206,7%,14%)'</span><span class="token punctuation">,</span>
			<span class="token literal-property property">gray300</span><span class="token operator">:</span> <span class="token string">'hsl(206,7%,15%)'</span><span class="token punctuation">,</span>
			<span class="token literal-property property">gray400</span><span class="token operator">:</span> <span class="token string">'hsl(206,7%,24%)'</span><span class="token punctuation">,</span>
			<span class="token literal-property property">gray500</span><span class="token operator">:</span> <span class="token string">'hsl(206,7%,30%)'</span><span class="token punctuation">,</span>
			<span class="token literal-property property">gray600</span><span class="token operator">:</span> <span class="token string">'hsl(206,5%,53%)'</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">space</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">fonts</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`,da,V,Pe,Ht,xe,je,ha,Cs,Ue,ya,ns,wp=`<code class="language-js"><span class="token keyword">const</span> newTheme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token string">'new-theme'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,va,Is,De,ga,es,Ep=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// imports and other things</span>
    <span class="token keyword">const</span> newTheme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token string">'new-theme'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SvelteUIProvider</span> <span class="token attr-name">class=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>newTheme<span class="token punctuation">&#125;</span></span> <span class="token attr-name">themeObserver=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Box</span><span class="token punctuation">></span></span>Content nested in the new theme.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Box</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SvelteUIProvider</span><span class="token punctuation">></span></span></code>`,ba,Ps,Oe,Sa,xs,ze,_a,js,Re,wa,os,$p=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createTheme<span class="token punctuation">,</span> theme <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span>

    <span class="token keyword">const</span> newTheme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">primary</span><span class="token operator">:</span> <span class="token string">'pink'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token operator">...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>`,Ea,Us,He,$a,ps,Tp=`<code class="language-js"><span class="token comment">// default theme</span>
theme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary<span class="token punctuation">;</span> <span class="token comment">// var(--colors-primary)</span>
theme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// #228be6</span>
theme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>token<span class="token punctuation">;</span> <span class="token comment">// primary</span>
theme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>scale<span class="token punctuation">;</span> <span class="token comment">// colors</span>
theme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>variable<span class="token punctuation">;</span> <span class="token comment">// --colors-primary</span>
theme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>computedValue<span class="token punctuation">;</span> <span class="token comment">// var(--colors-primary)</span>

<span class="token comment">// new theme</span>
newTheme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary<span class="token punctuation">;</span> <span class="token comment">// var(--colors-primary)</span>
newTheme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// pink</span>
newTheme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>token<span class="token punctuation">;</span> <span class="token comment">// primary</span>
newTheme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>scale<span class="token punctuation">;</span> <span class="token comment">// colors</span>
newTheme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>variable<span class="token punctuation">;</span> <span class="token comment">// --colors-primary</span>
newTheme<span class="token punctuation">.</span>colors<span class="token punctuation">.</span>primary<span class="token punctuation">.</span>computedValue<span class="token punctuation">;</span> <span class="token comment">// var(--colors-primary)</span></code>`,Ta,Ds,Le,Ca,Os,Be,Ia,ls,Cp=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> SvelteUIProvider<span class="token punctuation">,</span> Box<span class="token punctuation">,</span> css<span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> newTheme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token string">'new-theme'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newTheme<span class="token punctuation">.</span>selector<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &amp;</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// background color will be pink when newTheme is being used</span>
            <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'$primary'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment">// background color will be blue when theme is being used</span>
        <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'$primary'</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SvelteUIProvider</span> <span class="token attr-name">class=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>newTheme<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token function">styles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Some content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SvelteUIProvider</span><span class="token punctuation">></span></span></code>`,Pa,zs,Ae,xa,x,Ye,Lt,Me,Fe,Rs,We,qe,ja,cs,Ip=`<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> globalCss <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span>
<span class="token comment">// declare this anywhere you can export it, or directly in your top level component.</span>
<span class="token keyword">const</span> globalStyles <span class="token operator">=</span> <span class="token function">globalCss</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ua,Hs,Ge,Da,rs,Pp=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> globalStyles <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'styles.js'</span>

    <span class="token function">globalStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SvelteUIProvider</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>YourApp</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SvelteUIProvider</span><span class="token punctuation">></span></span></code>`,Oa,Ls,Ve,za,X,Xe,Bt,Ne,Ke,Ra,is,xp=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> keyframes<span class="token punctuation">,</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> scaleUp <span class="token operator">=</span> <span class="token function">keyframes</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token string-property property">'0%'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'scale(1)'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token string-property property">'100%'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'scale(1.5)'</span> <span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
		<span class="token string-property property">'&amp;:hover'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
			<span class="token literal-property property">animation</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>scaleUp<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> 200ms</span><span class="token template-punctuation string">&#96;</span></span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">override=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>styles<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>I will grow on hover<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span></code>`,Ha;return K=new Je({props:{demo:Jp}}),J=new Je({props:{demo:ml}}),W=new Fp({props:{icon:Mp,title:"Tip",$$slots:{default:[fl]},$$scope:{ctx:b}}}),Q=new Je({props:{demo:ol}}),Z=new Wp({props:{h:"xl"}}),{c(){i=e("h2"),f=c("Preamble"),m=u(),d=e("p"),h=c("This section will cover creating your own themes on top of the already provided light and dark themes, as well as how to use SvelteUI’s styling features throughout your application."),y=u(),v=e("p"),S=c("All SvelteUI components are built with the CSS-in-JS library "),w=e("a"),_=c("Stitches"),$=c(". It is recommended that you use the "),H=e("code"),Ja=c("createStyles"),Qa=c(" function to create styles for the rest of your application because it is the easiest way to use the SvelteUI theme, but it is not required. You can use any other styling tools and languages alongside SvelteUI if you prefer."),Yt=u(),ys=e("h2"),Za=c("Features"),Mt=u(),vs=e("p"),sn=c("If you choose to go with the SvelteUI styling engine then you get access to these features:"),Ft=u(),E=e("ul"),Ns=e("li"),tn=c("A fast and lightweight theming solution with near-zero runtime"),an=u(),Ks=e("li"),nn=c("Subscriptions to your SvelteUI theming context"),en=u(),Js=e("li"),on=c("Supports all Stitches features: CSS extraction during server side rendering, lazy evaluation, dynamic theming, smart tokens, CSS prop, utils, a fully-typed API and more"),pn=u(),Qs=e("li"),ln=c("Server side rendering support: for SvelteKit or any other environment"),cn=u(),Zs=e("li"),rn=c("Fully featured TypeScript and IDE Intellisense support"),Wt=u(),gs=e("h2"),un=c("Styling with SvelteUI"),qt=u(),L=e("p"),kn=c("When creating styles in SvelteUI, you should use the "),st=e("code"),mn=c("createStyles"),fn=c(" function. It allows you to subscribe to the current theme context from anywhere. Basic usage looks like this:"),Gt=u(),us(K.$$.fragment),Vt=u(),B=e("p"),dn=c("When using "),tt=e("code"),hn=c("createStyles"),yn=c(" you must:"),Xt=u(),A=e("ul"),at=e("li"),vn=c("Pass in an object, or a function the returns an object."),gn=u(),nt=e("li"),bn=c("The object must contain a root property. These are the styles that will be the top level of your element composition (i.e a container)."),Nt=u(),Y=e("p"),Sn=c("The "),et=e("code"),_n=c("createStyles"),wn=c(" function theme object differs from the general theme object. It extends the normal one, giving you extra utilities."),Kt=u(),M=e("table"),ot=e("thead"),U=e("tr"),pt=e("th"),En=c("property"),$n=u(),lt=e("th"),Tn=c("value"),Cn=u(),ct=e("th"),In=c("description"),Pn=u(),T=e("tbody"),D=e("tr"),rt=e("td"),it=e("code"),xn=c("theme.dark"),jn=u(),ut=e("td"),kt=e("code"),Un=c("dark-theme"),Dn=u(),mt=e("td"),On=c("dark theme selector"),zn=u(),O=e("tr"),ft=e("td"),dt=e("code"),Rn=c("theme.fn.themeColor"),Hn=u(),ht=e("td"),yt=e("code"),Ln=c("(color, shade) => SvelteUIColor"),Bn=u(),vt=e("td"),An=c("function that takes a color and shade, then returns the color’s hex value"),Yn=u(),z=e("tr"),gt=e("td"),bt=e("code"),Mn=c("theme.fn.size"),Fn=u(),St=e("td"),_t=e("code"),Wn=c('({"{ size, sizing }"}) => SvelteUISpace'),qn=u(),wt=e("td"),Gn=c("function that takes an object with a size value (number / ‘xs-xl’) and an object of sizes, then returns the sizing value"),Vn=u(),R=e("tr"),Et=e("td"),$t=e("code"),Xn=c("theme.fn.radius"),Nn=u(),Tt=e("td"),Ct=e("code"),Kn=c("(radii) => SvelteUIRadius"),Jn=u(),It=e("td"),Qn=c("function that takes a size value (number / ‘xs-xl’), then returns a radius value"),Jt=u(),bs=e("h2"),Zn=c("Style Parameters"),Qt=u(),C=e("p"),se=c("You can receive any amount of parameters as second argument of "),Pt=e("code"),te=c("createStyles"),ae=c(" function, later you will need to pass those parameters as argument to "),xt=e("code"),ne=c("useStyles"),ee=c(" function:"),Zt=u(),us(J.$$.fragment),sa=u(),Ss=e("h2"),oe=c("Merging Classes (cx function)"),ta=u(),F=e("p"),pe=c("To merge class names use the "),jt=e("code"),le=c("cx"),ce=c(" function, it has the same API as classnames package."),aa=u(),us(W.$$.fragment),na=u(),us(Q.$$.fragment),ea=u(),us(Z.$$.fragment),oa=u(),_s=e("h2"),re=c("Variants"),pa=u(),q=e("p"),ie=c("You can add variants to your styles by using the "),Ut=e("code"),ue=c("variants"),ke=c(" key. There is no limit to how many variants you can add."),la=u(),ss=e("pre"),ca=u(),I=e("p"),me=c("Styling with SvelteUI is very similar to styling with vanilla CSS, or CSS-preprocessors (SCSS/Sass) with extra features. You can choose your preferred method of styling, but we "),Dt=e("strong"),fe=c("strongly"),de=c(" recommend you read this "),ts=e("a"),he=c("styling guide"),ye=c(" to get up to speed."),ra=u(),ws=e("blockquote"),Ot=e("p"),ve=c("Need anymore styling information? Raise an issue on GitHub and ask any questions you have."),ia=u(),Es=e("h1"),ge=c("Theming"),ua=u(),G=e("p"),be=c("SvelteUI comes with a default light and dark theme out of the box. If you would like to use the standard theme then you can read more about that in the "),$s=e("a"),Se=c("default theme"),_e=c(" section. It is suggested that you either read the default theming section, or the Stitches custom theming section first."),ka=u(),Ts=e("h2"),we=c("Custom theme"),ma=u(),P=e("p"),Ee=c("You can create new themes with the "),zt=e("code"),$e=c("createTheme"),Te=c(" function. We recommend using the 10 step color scale explained in the default theming section. The "),Rt=e("code"),Ce=c("createTheme"),Ie=c(" function gives you access to all the theming tokens available through the theme object, so that you can customize everything to your liking."),fa=u(),as=e("pre"),da=u(),V=e("p"),Pe=c("The "),Ht=e("code"),xe=c("newTheme"),je=c(" const represents a hashed class, which can be added at any point in your application."),ha=u(),Cs=e("p"),Ue=c("You can define the theme class to be used by passing it as the first argument:"),ya=u(),ns=e("pre"),va=u(),Is=e("p"),De=c("To apply the new theme, add it to your SvelteUIProvider"),ga=u(),es=e("pre"),ba=u(),Ps=e("h2"),Oe=c("Theme object"),Sa=u(),xs=e("p"),ze=c("The themes generated are objects containing useful token data."),_a=u(),js=e("p"),Re=c("For example, given the following default theme and new theme created above:"),wa=u(),os=e("pre"),Ea=u(),Us=e("p"),He=c("You can use the returned theme objects to read the tokens, like so:"),$a=u(),ps=e("pre"),Ta=u(),Ds=e("h2"),Le=c("Theme specific styles"),Ca=u(),Os=e("p"),Be=c("You can add styles based on themes by retrieving the dynamically generated theme class. This is how SvelteUI components support dark theme usage:"),Ia=u(),ls=e("pre"),Pa=u(),zs=e("h2"),Ae=c("Global styles"),xa=u(),x=e("p"),Ye=c("For handling things like global resets or custom global styling, you can use the "),Lt=e("code"),Me=c("globalCss"),Fe=c(" function to generate it. SvelteUI comes with global styles and a CSS reset by default. More information on that in the "),Rs=e("a"),We=c("SvelteUIProvider section"),qe=c("."),ja=u(),cs=e("pre"),Ua=u(),Hs=e("p"),Ge=c("Then import it in your top level component i.e +layout.svelte or App.svelte"),Da=u(),rs=e("pre"),Oa=u(),Ls=e("h2"),Ve=c("Keyframes"),za=u(),X=e("p"),Xe=c("For creating CSS animations, you can either use the Svelte transition api, or SvelteUI’s "),Bt=e("code"),Ne=c("keyframes"),Ke=c(" function, which is a function to create a global CSS @keyframe rule."),Ra=u(),is=e("pre"),this.h()},l(s){i=o(s,"H2",{});var n=p(i);f=r(n,"Preamble"),n.forEach(t),m=k(s),d=o(s,"P",{});var At=p(d);h=r(At,"This section will cover creating your own themes on top of the already provided light and dark themes, as well as how to use SvelteUI’s styling features throughout your application."),At.forEach(t),y=k(s),v=o(s,"P",{});var Bs=p(v);S=r(Bs,"All SvelteUI components are built with the CSS-in-JS library "),w=o(Bs,"A",{href:!0,rel:!0});var to=p(w);_=r(to,"Stitches"),to.forEach(t),$=r(Bs,". It is recommended that you use the "),H=o(Bs,"CODE",{});var ao=p(H);Ja=r(ao,"createStyles"),ao.forEach(t),Qa=r(Bs," function to create styles for the rest of your application because it is the easiest way to use the SvelteUI theme, but it is not required. You can use any other styling tools and languages alongside SvelteUI if you prefer."),Bs.forEach(t),Yt=k(s),ys=o(s,"H2",{});var no=p(ys);Za=r(no,"Features"),no.forEach(t),Mt=k(s),vs=o(s,"P",{});var eo=p(vs);sn=r(eo,"If you choose to go with the SvelteUI styling engine then you get access to these features:"),eo.forEach(t),Ft=k(s),E=o(s,"UL",{});var j=p(E);Ns=o(j,"LI",{});var oo=p(Ns);tn=r(oo,"A fast and lightweight theming solution with near-zero runtime"),oo.forEach(t),an=k(j),Ks=o(j,"LI",{});var po=p(Ks);nn=r(po,"Subscriptions to your SvelteUI theming context"),po.forEach(t),en=k(j),Js=o(j,"LI",{});var lo=p(Js);on=r(lo,"Supports all Stitches features: CSS extraction during server side rendering, lazy evaluation, dynamic theming, smart tokens, CSS prop, utils, a fully-typed API and more"),lo.forEach(t),pn=k(j),Qs=o(j,"LI",{});var co=p(Qs);ln=r(co,"Server side rendering support: for SvelteKit or any other environment"),co.forEach(t),cn=k(j),Zs=o(j,"LI",{});var ro=p(Zs);rn=r(ro,"Fully featured TypeScript and IDE Intellisense support"),ro.forEach(t),j.forEach(t),Wt=k(s),gs=o(s,"H2",{});var io=p(gs);un=r(io,"Styling with SvelteUI"),io.forEach(t),qt=k(s),L=o(s,"P",{});var La=p(L);kn=r(La,"When creating styles in SvelteUI, you should use the "),st=o(La,"CODE",{});var uo=p(st);mn=r(uo,"createStyles"),uo.forEach(t),fn=r(La," function. It allows you to subscribe to the current theme context from anywhere. Basic usage looks like this:"),La.forEach(t),Gt=k(s),ks(K.$$.fragment,s),Vt=k(s),B=o(s,"P",{});var Ba=p(B);dn=r(Ba,"When using "),tt=o(Ba,"CODE",{});var ko=p(tt);hn=r(ko,"createStyles"),ko.forEach(t),yn=r(Ba," you must:"),Ba.forEach(t),Xt=k(s),A=o(s,"UL",{});var Aa=p(A);at=o(Aa,"LI",{});var mo=p(at);vn=r(mo,"Pass in an object, or a function the returns an object."),mo.forEach(t),gn=k(Aa),nt=o(Aa,"LI",{});var fo=p(nt);bn=r(fo,"The object must contain a root property. These are the styles that will be the top level of your element composition (i.e a container)."),fo.forEach(t),Aa.forEach(t),Nt=k(s),Y=o(s,"P",{});var Ya=p(Y);Sn=r(Ya,"The "),et=o(Ya,"CODE",{});var ho=p(et);_n=r(ho,"createStyles"),ho.forEach(t),wn=r(Ya," function theme object differs from the general theme object. It extends the normal one, giving you extra utilities."),Ya.forEach(t),Kt=k(s),M=o(s,"TABLE",{});var Ma=p(M);ot=o(Ma,"THEAD",{});var yo=p(ot);U=o(yo,"TR",{});var As=p(U);pt=o(As,"TH",{});var vo=p(pt);En=r(vo,"property"),vo.forEach(t),$n=k(As),lt=o(As,"TH",{});var go=p(lt);Tn=r(go,"value"),go.forEach(t),Cn=k(As),ct=o(As,"TH",{});var bo=p(ct);In=r(bo,"description"),bo.forEach(t),As.forEach(t),yo.forEach(t),Pn=k(Ma),T=o(Ma,"TBODY",{});var N=p(T);D=o(N,"TR",{});var Ys=p(D);rt=o(Ys,"TD",{});var So=p(rt);it=o(So,"CODE",{});var _o=p(it);xn=r(_o,"theme.dark"),_o.forEach(t),So.forEach(t),jn=k(Ys),ut=o(Ys,"TD",{});var wo=p(ut);kt=o(wo,"CODE",{});var Eo=p(kt);Un=r(Eo,"dark-theme"),Eo.forEach(t),wo.forEach(t),Dn=k(Ys),mt=o(Ys,"TD",{});var $o=p(mt);On=r($o,"dark theme selector"),$o.forEach(t),Ys.forEach(t),zn=k(N),O=o(N,"TR",{});var Ms=p(O);ft=o(Ms,"TD",{});var To=p(ft);dt=o(To,"CODE",{});var Co=p(dt);Rn=r(Co,"theme.fn.themeColor"),Co.forEach(t),To.forEach(t),Hn=k(Ms),ht=o(Ms,"TD",{});var Io=p(ht);yt=o(Io,"CODE",{});var Po=p(yt);Ln=r(Po,"(color, shade) => SvelteUIColor"),Po.forEach(t),Io.forEach(t),Bn=k(Ms),vt=o(Ms,"TD",{});var xo=p(vt);An=r(xo,"function that takes a color and shade, then returns the color’s hex value"),xo.forEach(t),Ms.forEach(t),Yn=k(N),z=o(N,"TR",{});var Fs=p(z);gt=o(Fs,"TD",{});var jo=p(gt);bt=o(jo,"CODE",{});var Uo=p(bt);Mn=r(Uo,"theme.fn.size"),Uo.forEach(t),jo.forEach(t),Fn=k(Fs),St=o(Fs,"TD",{});var Do=p(St);_t=o(Do,"CODE",{});var Oo=p(_t);Wn=r(Oo,'({"{ size, sizing }"}) => SvelteUISpace'),Oo.forEach(t),Do.forEach(t),qn=k(Fs),wt=o(Fs,"TD",{});var zo=p(wt);Gn=r(zo,"function that takes an object with a size value (number / ‘xs-xl’) and an object of sizes, then returns the sizing value"),zo.forEach(t),Fs.forEach(t),Vn=k(N),R=o(N,"TR",{});var Ws=p(R);Et=o(Ws,"TD",{});var Ro=p(Et);$t=o(Ro,"CODE",{});var Ho=p($t);Xn=r(Ho,"theme.fn.radius"),Ho.forEach(t),Ro.forEach(t),Nn=k(Ws),Tt=o(Ws,"TD",{});var Lo=p(Tt);Ct=o(Lo,"CODE",{});var Bo=p(Ct);Kn=r(Bo,"(radii) => SvelteUIRadius"),Bo.forEach(t),Lo.forEach(t),Jn=k(Ws),It=o(Ws,"TD",{});var Ao=p(It);Qn=r(Ao,"function that takes a size value (number / ‘xs-xl’), then returns a radius value"),Ao.forEach(t),Ws.forEach(t),N.forEach(t),Ma.forEach(t),Jt=k(s),bs=o(s,"H2",{});var Yo=p(bs);Zn=r(Yo,"Style Parameters"),Yo.forEach(t),Qt=k(s),C=o(s,"P",{});var qs=p(C);se=r(qs,"You can receive any amount of parameters as second argument of "),Pt=o(qs,"CODE",{});var Mo=p(Pt);te=r(Mo,"createStyles"),Mo.forEach(t),ae=r(qs," function, later you will need to pass those parameters as argument to "),xt=o(qs,"CODE",{});var Fo=p(xt);ne=r(Fo,"useStyles"),Fo.forEach(t),ee=r(qs," function:"),qs.forEach(t),Zt=k(s),ks(J.$$.fragment,s),sa=k(s),Ss=o(s,"H2",{});var Wo=p(Ss);oe=r(Wo,"Merging Classes (cx function)"),Wo.forEach(t),ta=k(s),F=o(s,"P",{});var Fa=p(F);pe=r(Fa,"To merge class names use the "),jt=o(Fa,"CODE",{});var qo=p(jt);le=r(qo,"cx"),qo.forEach(t),ce=r(Fa," function, it has the same API as classnames package."),Fa.forEach(t),aa=k(s),ks(W.$$.fragment,s),na=k(s),ks(Q.$$.fragment,s),ea=k(s),ks(Z.$$.fragment,s),oa=k(s),_s=o(s,"H2",{});var Go=p(_s);re=r(Go,"Variants"),Go.forEach(t),pa=k(s),q=o(s,"P",{});var Wa=p(q);ie=r(Wa,"You can add variants to your styles by using the "),Ut=o(Wa,"CODE",{});var Vo=p(Ut);ue=r(Vo,"variants"),Vo.forEach(t),ke=r(Wa," key. There is no limit to how many variants you can add."),Wa.forEach(t),la=k(s),ss=o(s,"PRE",{class:!0});var jp=p(ss);jp.forEach(t),ca=k(s),I=o(s,"P",{});var Gs=p(I);me=r(Gs,"Styling with SvelteUI is very similar to styling with vanilla CSS, or CSS-preprocessors (SCSS/Sass) with extra features. You can choose your preferred method of styling, but we "),Dt=o(Gs,"STRONG",{});var Xo=p(Dt);fe=r(Xo,"strongly"),Xo.forEach(t),de=r(Gs," recommend you read this "),ts=o(Gs,"A",{href:!0,rel:!0});var No=p(ts);he=r(No,"styling guide"),No.forEach(t),ye=r(Gs," to get up to speed."),Gs.forEach(t),ra=k(s),ws=o(s,"BLOCKQUOTE",{});var Ko=p(ws);Ot=o(Ko,"P",{});var Jo=p(Ot);ve=r(Jo,"Need anymore styling information? Raise an issue on GitHub and ask any questions you have."),Jo.forEach(t),Ko.forEach(t),ia=k(s),Es=o(s,"H1",{});var Qo=p(Es);ge=r(Qo,"Theming"),Qo.forEach(t),ua=k(s),G=o(s,"P",{});var qa=p(G);be=r(qa,"SvelteUI comes with a default light and dark theme out of the box. If you would like to use the standard theme then you can read more about that in the "),$s=o(qa,"A",{href:!0});var Zo=p($s);Se=r(Zo,"default theme"),Zo.forEach(t),_e=r(qa," section. It is suggested that you either read the default theming section, or the Stitches custom theming section first."),qa.forEach(t),ka=k(s),Ts=o(s,"H2",{});var sp=p(Ts);we=r(sp,"Custom theme"),sp.forEach(t),ma=k(s),P=o(s,"P",{});var Vs=p(P);Ee=r(Vs,"You can create new themes with the "),zt=o(Vs,"CODE",{});var tp=p(zt);$e=r(tp,"createTheme"),tp.forEach(t),Te=r(Vs," function. We recommend using the 10 step color scale explained in the default theming section. The "),Rt=o(Vs,"CODE",{});var ap=p(Rt);Ce=r(ap,"createTheme"),ap.forEach(t),Ie=r(Vs," function gives you access to all the theming tokens available through the theme object, so that you can customize everything to your liking."),Vs.forEach(t),fa=k(s),as=o(s,"PRE",{class:!0});var Up=p(as);Up.forEach(t),da=k(s),V=o(s,"P",{});var Ga=p(V);Pe=r(Ga,"The "),Ht=o(Ga,"CODE",{});var np=p(Ht);xe=r(np,"newTheme"),np.forEach(t),je=r(Ga," const represents a hashed class, which can be added at any point in your application."),Ga.forEach(t),ha=k(s),Cs=o(s,"P",{});var ep=p(Cs);Ue=r(ep,"You can define the theme class to be used by passing it as the first argument:"),ep.forEach(t),ya=k(s),ns=o(s,"PRE",{class:!0});var Dp=p(ns);Dp.forEach(t),va=k(s),Is=o(s,"P",{});var op=p(Is);De=r(op,"To apply the new theme, add it to your SvelteUIProvider"),op.forEach(t),ga=k(s),es=o(s,"PRE",{class:!0});var Op=p(es);Op.forEach(t),ba=k(s),Ps=o(s,"H2",{});var pp=p(Ps);Oe=r(pp,"Theme object"),pp.forEach(t),Sa=k(s),xs=o(s,"P",{});var lp=p(xs);ze=r(lp,"The themes generated are objects containing useful token data."),lp.forEach(t),_a=k(s),js=o(s,"P",{});var cp=p(js);Re=r(cp,"For example, given the following default theme and new theme created above:"),cp.forEach(t),wa=k(s),os=o(s,"PRE",{class:!0});var zp=p(os);zp.forEach(t),Ea=k(s),Us=o(s,"P",{});var rp=p(Us);He=r(rp,"You can use the returned theme objects to read the tokens, like so:"),rp.forEach(t),$a=k(s),ps=o(s,"PRE",{class:!0});var Rp=p(ps);Rp.forEach(t),Ta=k(s),Ds=o(s,"H2",{});var ip=p(Ds);Le=r(ip,"Theme specific styles"),ip.forEach(t),Ca=k(s),Os=o(s,"P",{});var up=p(Os);Be=r(up,"You can add styles based on themes by retrieving the dynamically generated theme class. This is how SvelteUI components support dark theme usage:"),up.forEach(t),Ia=k(s),ls=o(s,"PRE",{class:!0});var Hp=p(ls);Hp.forEach(t),Pa=k(s),zs=o(s,"H2",{});var kp=p(zs);Ae=r(kp,"Global styles"),kp.forEach(t),xa=k(s),x=o(s,"P",{});var Xs=p(x);Ye=r(Xs,"For handling things like global resets or custom global styling, you can use the "),Lt=o(Xs,"CODE",{});var mp=p(Lt);Me=r(mp,"globalCss"),mp.forEach(t),Fe=r(Xs," function to generate it. SvelteUI comes with global styles and a CSS reset by default. More information on that in the "),Rs=o(Xs,"A",{href:!0});var fp=p(Rs);We=r(fp,"SvelteUIProvider section"),fp.forEach(t),qe=r(Xs,"."),Xs.forEach(t),ja=k(s),cs=o(s,"PRE",{class:!0});var Lp=p(cs);Lp.forEach(t),Ua=k(s),Hs=o(s,"P",{});var dp=p(Hs);Ge=r(dp,"Then import it in your top level component i.e +layout.svelte or App.svelte"),dp.forEach(t),Da=k(s),rs=o(s,"PRE",{class:!0});var Bp=p(rs);Bp.forEach(t),Oa=k(s),Ls=o(s,"H2",{});var hp=p(Ls);Ve=r(hp,"Keyframes"),hp.forEach(t),za=k(s),X=o(s,"P",{});var Va=p(X);Xe=r(Va,"For creating CSS animations, you can either use the Svelte transition api, or SvelteUI’s "),Bt=o(Va,"CODE",{});var yp=p(Bt);Ne=r(yp,"keyframes"),yp.forEach(t),Ke=r(Va," function, which is a function to create a global CSS @keyframe rule."),Va.forEach(t),Ra=k(s),is=o(s,"PRE",{class:!0});var Ap=p(is);Ap.forEach(t),this.h()},h(){g(w,"href","https://stitches.dev/"),g(w,"rel","nofollow"),g(ss,"class","language-svelte"),g(ts,"href","https://stitches.dev/docs/styling"),g(ts,"rel","nofollow"),g($s,"href","theming/default"),g(as,"class","language-svelte"),g(ns,"class","language-js"),g(es,"class","language-svelte"),g(os,"class","language-svelte"),g(ps,"class","language-js"),g(ls,"class","language-svelte"),g(Rs,"href","theming/svelteui-provider"),g(cs,"class","language-js"),g(rs,"class","language-svelte"),g(is,"class","language-svelte")},m(s,n){l(s,i,n),a(i,f),l(s,m,n),l(s,d,n),a(d,h),l(s,y,n),l(s,v,n),a(v,S),a(v,w),a(w,_),a(v,$),a(v,H),a(H,Ja),a(v,Qa),l(s,Yt,n),l(s,ys,n),a(ys,Za),l(s,Mt,n),l(s,vs,n),a(vs,sn),l(s,Ft,n),l(s,E,n),a(E,Ns),a(Ns,tn),a(E,an),a(E,Ks),a(Ks,nn),a(E,en),a(E,Js),a(Js,on),a(E,pn),a(E,Qs),a(Qs,ln),a(E,cn),a(E,Zs),a(Zs,rn),l(s,Wt,n),l(s,gs,n),a(gs,un),l(s,qt,n),l(s,L,n),a(L,kn),a(L,st),a(st,mn),a(L,fn),l(s,Gt,n),ms(K,s,n),l(s,Vt,n),l(s,B,n),a(B,dn),a(B,tt),a(tt,hn),a(B,yn),l(s,Xt,n),l(s,A,n),a(A,at),a(at,vn),a(A,gn),a(A,nt),a(nt,bn),l(s,Nt,n),l(s,Y,n),a(Y,Sn),a(Y,et),a(et,_n),a(Y,wn),l(s,Kt,n),l(s,M,n),a(M,ot),a(ot,U),a(U,pt),a(pt,En),a(U,$n),a(U,lt),a(lt,Tn),a(U,Cn),a(U,ct),a(ct,In),a(M,Pn),a(M,T),a(T,D),a(D,rt),a(rt,it),a(it,xn),a(D,jn),a(D,ut),a(ut,kt),a(kt,Un),a(D,Dn),a(D,mt),a(mt,On),a(T,zn),a(T,O),a(O,ft),a(ft,dt),a(dt,Rn),a(O,Hn),a(O,ht),a(ht,yt),a(yt,Ln),a(O,Bn),a(O,vt),a(vt,An),a(T,Yn),a(T,z),a(z,gt),a(gt,bt),a(bt,Mn),a(z,Fn),a(z,St),a(St,_t),a(_t,Wn),a(z,qn),a(z,wt),a(wt,Gn),a(T,Vn),a(T,R),a(R,Et),a(Et,$t),a($t,Xn),a(R,Nn),a(R,Tt),a(Tt,Ct),a(Ct,Kn),a(R,Jn),a(R,It),a(It,Qn),l(s,Jt,n),l(s,bs,n),a(bs,Zn),l(s,Qt,n),l(s,C,n),a(C,se),a(C,Pt),a(Pt,te),a(C,ae),a(C,xt),a(xt,ne),a(C,ee),l(s,Zt,n),ms(J,s,n),l(s,sa,n),l(s,Ss,n),a(Ss,oe),l(s,ta,n),l(s,F,n),a(F,pe),a(F,jt),a(jt,le),a(F,ce),l(s,aa,n),ms(W,s,n),l(s,na,n),ms(Q,s,n),l(s,ea,n),ms(Z,s,n),l(s,oa,n),l(s,_s,n),a(_s,re),l(s,pa,n),l(s,q,n),a(q,ie),a(q,Ut),a(Ut,ue),a(q,ke),l(s,la,n),l(s,ss,n),ss.innerHTML=Sp,l(s,ca,n),l(s,I,n),a(I,me),a(I,Dt),a(Dt,fe),a(I,de),a(I,ts),a(ts,he),a(I,ye),l(s,ra,n),l(s,ws,n),a(ws,Ot),a(Ot,ve),l(s,ia,n),l(s,Es,n),a(Es,ge),l(s,ua,n),l(s,G,n),a(G,be),a(G,$s),a($s,Se),a(G,_e),l(s,ka,n),l(s,Ts,n),a(Ts,we),l(s,ma,n),l(s,P,n),a(P,Ee),a(P,zt),a(zt,$e),a(P,Te),a(P,Rt),a(Rt,Ce),a(P,Ie),l(s,fa,n),l(s,as,n),as.innerHTML=_p,l(s,da,n),l(s,V,n),a(V,Pe),a(V,Ht),a(Ht,xe),a(V,je),l(s,ha,n),l(s,Cs,n),a(Cs,Ue),l(s,ya,n),l(s,ns,n),ns.innerHTML=wp,l(s,va,n),l(s,Is,n),a(Is,De),l(s,ga,n),l(s,es,n),es.innerHTML=Ep,l(s,ba,n),l(s,Ps,n),a(Ps,Oe),l(s,Sa,n),l(s,xs,n),a(xs,ze),l(s,_a,n),l(s,js,n),a(js,Re),l(s,wa,n),l(s,os,n),os.innerHTML=$p,l(s,Ea,n),l(s,Us,n),a(Us,He),l(s,$a,n),l(s,ps,n),ps.innerHTML=Tp,l(s,Ta,n),l(s,Ds,n),a(Ds,Le),l(s,Ca,n),l(s,Os,n),a(Os,Be),l(s,Ia,n),l(s,ls,n),ls.innerHTML=Cp,l(s,Pa,n),l(s,zs,n),a(zs,Ae),l(s,xa,n),l(s,x,n),a(x,Ye),a(x,Lt),a(Lt,Me),a(x,Fe),a(x,Rs),a(Rs,We),a(x,qe),l(s,ja,n),l(s,cs,n),cs.innerHTML=Ip,l(s,Ua,n),l(s,Hs,n),a(Hs,Ge),l(s,Da,n),l(s,rs,n),rs.innerHTML=Pp,l(s,Oa,n),l(s,Ls,n),a(Ls,Ve),l(s,za,n),l(s,X,n),a(X,Xe),a(X,Bt),a(Bt,Ne),a(X,Ke),l(s,Ra,n),l(s,is,n),is.innerHTML=xp,Ha=!0},p(s,[n]){const At={};n&1&&(At.$$scope={dirty:n,ctx:s}),W.$set(At)},i(s){Ha||(fs(K.$$.fragment,s),fs(J.$$.fragment,s),fs(W.$$.fragment,s),fs(Q.$$.fragment,s),fs(Z.$$.fragment,s),Ha=!0)},o(s){ds(K.$$.fragment,s),ds(J.$$.fragment,s),ds(W.$$.fragment,s),ds(Q.$$.fragment,s),ds(Z.$$.fragment,s),Ha=!1},d(s){s&&t(i),s&&t(m),s&&t(d),s&&t(y),s&&t(v),s&&t(Yt),s&&t(ys),s&&t(Mt),s&&t(vs),s&&t(Ft),s&&t(E),s&&t(Wt),s&&t(gs),s&&t(qt),s&&t(L),s&&t(Gt),hs(K,s),s&&t(Vt),s&&t(B),s&&t(Xt),s&&t(A),s&&t(Nt),s&&t(Y),s&&t(Kt),s&&t(M),s&&t(Jt),s&&t(bs),s&&t(Qt),s&&t(C),s&&t(Zt),hs(J,s),s&&t(sa),s&&t(Ss),s&&t(ta),s&&t(F),s&&t(aa),hs(W,s),s&&t(na),hs(Q,s),s&&t(ea),hs(Z,s),s&&t(oa),s&&t(_s),s&&t(pa),s&&t(q),s&&t(la),s&&t(ss),s&&t(ca),s&&t(I),s&&t(ra),s&&t(ws),s&&t(ia),s&&t(Es),s&&t(ua),s&&t(G),s&&t(ka),s&&t(Ts),s&&t(ma),s&&t(P),s&&t(fa),s&&t(as),s&&t(da),s&&t(V),s&&t(ha),s&&t(Cs),s&&t(ya),s&&t(ns),s&&t(va),s&&t(Is),s&&t(ga),s&&t(es),s&&t(ba),s&&t(Ps),s&&t(Sa),s&&t(xs),s&&t(_a),s&&t(js),s&&t(wa),s&&t(os),s&&t(Ea),s&&t(Us),s&&t($a),s&&t(ps),s&&t(Ta),s&&t(Ds),s&&t(Ca),s&&t(Os),s&&t(Ia),s&&t(ls),s&&t(Pa),s&&t(zs),s&&t(xa),s&&t(x),s&&t(ja),s&&t(cs),s&&t(Ua),s&&t(Hs),s&&t(Da),s&&t(rs),s&&t(Oa),s&&t(Ls),s&&t(za),s&&t(X),s&&t(Ra),s&&t(is)}}}const wl={title:"Customize theme",description:"Learn how to create your own themes and styles.",docs:"theming/create-styles.md"};class El extends Xa{constructor(i){super(),Na(this,i,null,dl,Ka,{})}}export{El as default,wl as metadata};
