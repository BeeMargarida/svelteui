import{S as ge,i as ve,s as ke,y as O,z as E,A as x,g as z,d as L,B as F,D as je,J as He,a6 as Ae,a as k,c as S,b as u,X as Pe,h as n,k as d,q as c,l as $,m as h,r as p,n as Ge,W as l}from"./index.b4f0bbdc.js";import{D as Ne}from"./Demo.9cccb4ab.js";import{C as Me}from"./Center.c93e1a75.js";import{S as J}from"./Switch.d0a1e406.js";import{G as qe}from"./Group.db734d69.js";function Ue(_){let t,i;const s=[{checked:!0},_[0]];let r={};for(let o=0;o<s.length;o+=1)r=je(r,s[o]);return t=new J({props:r}),{c(){O(t.$$.fragment)},l(o){E(t.$$.fragment,o)},m(o,b){x(t,o,b),i=!0},p(o,b){const w=b&1?He(s,[s[0],Ae(o[0])]):{};t.$set(w)},i(o){i||(z(t.$$.fragment,o),i=!0)},o(o){L(t.$$.fragment,o),i=!1},d(o){F(t,o)}}}function Be(_){let t,i;return t=new Me({props:{$$slots:{default:[Ue]},$$scope:{ctx:_}}}),{c(){O(t.$$.fragment)},l(s){E(t.$$.fragment,s)},m(s,r){x(t,s,r),i=!0},p(s,[r]){const o={};r&3&&(o.$$scope={dirty:r,ctx:s}),t.$set(o)},i(s){i||(z(t.$$.fragment,s),i=!0)},o(s){L(t.$$.fragment,s),i=!1},d(s){F(t,s)}}}const Je=(_,t)=>`<script>
  import { Switch } from '@svelteuidev/core';
<\/script>

<Switch checked ${_} />`,Re="configurator",We={codeTemplate:Je,configurator:[{name:"label",type:"string",initialValue:"I agree to sell my privacy"},{name:"size",type:"size",initialValue:"sm",defaultValue:"sm"},{name:"radius",type:"size",initialValue:"xl",defaultValue:"xl"},{name:"color",type:"color",initialValue:"blue",defaultValue:"blue"},{name:"disabled",type:"boolean",initialValue:!1,defaultValue:!1}],multiline:!0};function Xe(_,t,i){let{props:s={}}=t;return _.$$set=r=>{"props"in r&&i(0,s=r.props)},[s]}class Ke extends ge{constructor(t){super(),ve(this,t,Xe,Be,ke,{props:0})}}const Qe=Object.freeze(Object.defineProperty({__proto__:null,configuration:We,default:Ke,type:Re},Symbol.toStringTag,{value:"Module"}));function Ye(_){let t,i,s,r,o,b,w,C;return t=new J({props:{size:"sm",onLabel:"ON",offLabel:"OFF"}}),s=new J({props:{size:"md",onLabel:"ON",offLabel:"OFF"}}),o=new J({props:{size:"lg",onLabel:"ON",offLabel:"OFF"}}),w=new J({props:{size:"xl",onLabel:"ON",offLabel:"OFF"}}),{c(){O(t.$$.fragment),i=k(),O(s.$$.fragment),r=k(),O(o.$$.fragment),b=k(),O(w.$$.fragment)},l(a){E(t.$$.fragment,a),i=S(a),E(s.$$.fragment,a),r=S(a),E(o.$$.fragment,a),b=S(a),E(w.$$.fragment,a)},m(a,v){x(t,a,v),u(a,i,v),x(s,a,v),u(a,r,v),x(o,a,v),u(a,b,v),x(w,a,v),C=!0},p:Pe,i(a){C||(z(t.$$.fragment,a),z(s.$$.fragment,a),z(o.$$.fragment,a),z(w.$$.fragment,a),C=!0)},o(a){L(t.$$.fragment,a),L(s.$$.fragment,a),L(o.$$.fragment,a),L(w.$$.fragment,a),C=!1},d(a){F(t,a),a&&n(i),F(s,a),a&&n(r),F(o,a),a&&n(b),F(w,a)}}}function Ze(_){let t,i;return t=new qe({props:{position:"center",$$slots:{default:[Ye]},$$scope:{ctx:_}}}),{c(){O(t.$$.fragment)},l(s){E(t.$$.fragment,s)},m(s,r){x(t,s,r),i=!0},p(s,[r]){const o={};r&1&&(o.$$scope={dirty:r,ctx:s}),t.$set(o)},i(s){i||(z(t.$$.fragment,s),i=!0)},o(s){L(t.$$.fragment,s),i=!1},d(s){F(t,s)}}}const et=`<script>
	import { Switch } from '@svelteuidev/core';
<\/script>

<Switch size='sm' onLabel="ON" offLabel="OFF" />
<Switch size='md' onLabel="ON" offLabel="OFF" />
<Switch size='lg' onLabel="ON" offLabel="OFF" />
<Switch size='xl' onLabel="ON" offLabel="OFF" />
`,tt="demo",st={code:et};class at extends ge{constructor(t){super(),ve(this,t,null,Ze,ke,{})}}const nt=Object.freeze(Object.defineProperty({__proto__:null,configuration:st,default:at,type:tt},Symbol.toStringTag,{value:"Module"}));function ot(_){let t,i,s,r,o,b,w,C,a,v,te,R,D,W,P,se,X,m,ae,H,ne,oe,A,le,re,G,ie,ce,M,pe,fe,q,ue,me,K,V,Q,T,de,Y,y,$e,U,he,_e,B,be,we,Z,N,Te=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span> <span class="token punctuation">/></span></span> // -> not ok, input is not labeled
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>I agree to everything<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> // -> ok, input and label is connected
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>I agree to everything<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> // -> ok, label is not visible but will be announced by
screen reader</code>`,ee;return D=new Ne({props:{demo:Qe}}),V=new Ne({props:{demo:nt}}),{c(){t=d("h2"),i=c("Usage"),s=k(),r=d("p"),o=c("Switch component is used to enable/disable something, normally used for boolean values or for binary actions. The component dispatches an "),b=d("code"),w=c("on:change"),C=c(" event, and supports a "),a=d("code"),v=c("checked"),te=c(" prop for programmatically setting the checked state."),R=k(),O(D.$$.fragment),W=k(),P=d("h2"),se=c("Inner labels and Size"),X=k(),m=d("p"),ae=c("There is support for inserting text inside the switch for when it is enabled and/or disabled. It is also possible to control the size of the switch with predefined values: "),H=d("code"),ne=c("xs"),oe=c(", "),A=d("code"),le=c("sm"),re=c(", "),G=d("code"),ie=c("md"),ce=c(", "),M=d("code"),pe=c("lg"),fe=c(", "),q=d("code"),ue=c("xl"),me=c("."),K=k(),O(V.$$.fragment),Q=k(),T=d("h2"),de=c("Accessibility"),Y=k(),y=d("p"),$e=c("Switch is a regular input with checkbox type. Provide "),U=d("code"),he=c("aria-label"),_e=c(" if Switch is used without "),B=d("code"),be=c("label"),we=c(":"),Z=k(),N=d("pre"),this.h()},l(e){t=$(e,"H2",{});var f=h(t);i=p(f,"Usage"),f.forEach(n),s=S(e),r=$(e,"P",{});var I=h(r);o=p(I,"Switch component is used to enable/disable something, normally used for boolean values or for binary actions. The component dispatches an "),b=$(I,"CODE",{});var Se=h(b);w=p(Se,"on:change"),Se.forEach(n),C=p(I," event, and supports a "),a=$(I,"CODE",{});var ye=h(a);v=p(ye,"checked"),ye.forEach(n),te=p(I," prop for programmatically setting the checked state."),I.forEach(n),R=S(e),E(D.$$.fragment,e),W=S(e),P=$(e,"H2",{});var Oe=h(P);se=p(Oe,"Inner labels and Size"),Oe.forEach(n),X=S(e),m=$(e,"P",{});var g=h(m);ae=p(g,"There is support for inserting text inside the switch for when it is enabled and/or disabled. It is also possible to control the size of the switch with predefined values: "),H=$(g,"CODE",{});var Ee=h(H);ne=p(Ee,"xs"),Ee.forEach(n),oe=p(g,", "),A=$(g,"CODE",{});var xe=h(A);le=p(xe,"sm"),xe.forEach(n),re=p(g,", "),G=$(g,"CODE",{});var ze=h(G);ie=p(ze,"md"),ze.forEach(n),ce=p(g,", "),M=$(g,"CODE",{});var Le=h(M);pe=p(Le,"lg"),Le.forEach(n),fe=p(g,", "),q=$(g,"CODE",{});var Fe=h(q);ue=p(Fe,"xl"),Fe.forEach(n),me=p(g,"."),g.forEach(n),K=S(e),E(V.$$.fragment,e),Q=S(e),T=$(e,"H2",{});var Ce=h(T);de=p(Ce,"Accessibility"),Ce.forEach(n),Y=S(e),y=$(e,"P",{});var j=h(y);$e=p(j,"Switch is a regular input with checkbox type. Provide "),U=$(j,"CODE",{});var De=h(U);he=p(De,"aria-label"),De.forEach(n),_e=p(j," if Switch is used without "),B=$(j,"CODE",{});var Ve=h(B);be=p(Ve,"label"),Ve.forEach(n),we=p(j,":"),j.forEach(n),Z=S(e),N=$(e,"PRE",{class:!0});var Ie=h(N);Ie.forEach(n),this.h()},h(){Ge(N,"class","language-svelte")},m(e,f){u(e,t,f),l(t,i),u(e,s,f),u(e,r,f),l(r,o),l(r,b),l(b,w),l(r,C),l(r,a),l(a,v),l(r,te),u(e,R,f),x(D,e,f),u(e,W,f),u(e,P,f),l(P,se),u(e,X,f),u(e,m,f),l(m,ae),l(m,H),l(H,ne),l(m,oe),l(m,A),l(A,le),l(m,re),l(m,G),l(G,ie),l(m,ce),l(m,M),l(M,pe),l(m,fe),l(m,q),l(q,ue),l(m,me),u(e,K,f),x(V,e,f),u(e,Q,f),u(e,T,f),l(T,de),u(e,Y,f),u(e,y,f),l(y,$e),l(y,U),l(U,he),l(y,_e),l(y,B),l(B,be),l(y,we),u(e,Z,f),u(e,N,f),N.innerHTML=Te,ee=!0},p:Pe,i(e){ee||(z(D.$$.fragment,e),z(V.$$.fragment,e),ee=!0)},o(e){L(D.$$.fragment,e),L(V.$$.fragment,e),ee=!1},d(e){e&&n(t),e&&n(s),e&&n(r),e&&n(R),F(D,e),e&&n(W),e&&n(P),e&&n(X),e&&n(m),e&&n(K),F(V,e),e&&n(Q),e&&n(T),e&&n(Y),e&&n(y),e&&n(Z),e&&n(N)}}}const ut={title:"Switch",group:"svelteuidev-core",packageGroup:"@svelteuidev/core",slug:"/core/switch/",category:"inputs",description:"Capture boolean input from user",importCode:"import { Switch } from '@svelteuidev/core';",source:"svelteui-core/src/components/Switch/Switch.svelte",docs:"core/switch.md"};function lt(_){return[]}class mt extends ge{constructor(t){super(),ve(this,t,lt,ot,ke,{})}}export{mt as default,ut as metadata};
