import{S as ct,i as pt,s as ft,y as ne,z as ae,A as re,g as le,d as ie,B as ue,a as _,k as n,c as v,l as a,m as r,h as t,b as p,F as zt,q as i,r as u,w as Mt,a4 as Rt,K as Wt,a5 as Bt,n as ut,W as o,X as Xt}from"./index.b4f0bbdc.js";import{D as At}from"./Demo.9cccb4ab.js";import{C as qt}from"./Center.c93e1a75.js";import{T as Kt}from"./Text.d4cabcdc.js";import{h as Ft,g as jt}from"./use-hot-key.48c41cb1.js";import{T as Gt}from"./TextInput.1349bcfb.js";function Vt(h){let s;return{c(){s=i("Press ⌘+Enter or Ctrl+Enter to trigger an alert")},l(f){s=u(f,"Press ⌘+Enter or Ctrl+Enter to trigger an alert")},m(f,l){p(f,s,l)},d(f){f&&t(s)}}}function Jt(h){let s,f,l,y,k,m;return s=new Kt({props:{$$slots:{default:[Vt]},$$scope:{ctx:h}}}),{c(){ne(s.$$.fragment),f=_(),l=n("div")},l(d){ae(s.$$.fragment,d),f=v(d),l=a(d,"DIV",{}),r(l).forEach(t)},m(d,$){re(s,d,$),p(d,f,$),p(d,l,$),y=!0,k||(m=zt(Ft.call(null,l,[["mod+Enter",h[0]]])),k=!0)},p(d,$){const b={};$&2&&(b.$$scope={dirty:$,ctx:d}),s.$set(b)},i(d){y||(le(s.$$.fragment,d),y=!0)},o(d){ie(s.$$.fragment,d),y=!1},d(d){ue(s,d),d&&t(f),d&&t(l),k=!1,m()}}}function Nt(h){let s,f;return s=new qt({props:{$$slots:{default:[Jt]},$$scope:{ctx:h}}}),{c(){ne(s.$$.fragment)},l(l){ae(s.$$.fragment,l)},m(l,y){re(s,l,y),f=!0},p(l,[y]){const k={};y&2&&(k.$$scope={dirty:y,ctx:l}),s.$set(k)},i(l){f||(le(s.$$.fragment,l),f=!0)},o(l){ie(s.$$.fragment,l),f=!1},d(l){ue(s,l)}}}const Qt=`
<script>
    import { hotkey } from '@svelteuidev/composables';

    function onSubmit() {
        alert("You've used a hotkey");
    }
<\/script>

<p>Press ⌘+Enter or Ctrl+Enter to trigger an alert</p>
<div use:hotkey={[['mod+Enter', () => onSubmit()]]}/>`,Zt="demo",eo={code:Qt};function to(){alert("You've used a hotkey")}function oo(h){return[()=>to()]}class so extends ct{constructor(s){super(),pt(this,s,oo,Nt,ft,{})}}const no=Object.freeze(Object.defineProperty({__proto__:null,configuration:eo,default:so,type:Zt},Symbol.toStringTag,{value:"Module"}));function ao(h){let s,f,l;function y(m){h[1](m)}let k={placeholder:"Your message",label:"Press ⌘+Enter or Ctrl+Enter when input has focus to send message"};return h[0]!==void 0&&(k.value=h[0]),s=new Gt({props:k}),Mt.push(()=>Rt(s,"value",y)),s.$on("keydown",function(){Wt(jt([["mod+Enter",h[2]]]))&&jt([["mod+Enter",h[2]]]).apply(this,arguments)}),{c(){ne(s.$$.fragment)},l(m){ae(s.$$.fragment,m)},m(m,d){re(s,m,d),l=!0},p(m,[d]){h=m;const $={};!f&&d&1&&(f=!0,$.value=h[0],Bt(()=>f=!1)),s.$set($)},i(m){l||(le(s.$$.fragment,m),l=!0)},o(m){ie(s.$$.fragment,m),l=!1},d(m){ue(s,m)}}}const ro=`
<script>
	import { TextInput } from '@svelteuidev/core';
	import { getHotkeyHandler } from '@svelteuidev/composables';

	let value = 'I am using a hotkey to submit';

	function onSubmit(val) {
		alert(\`Your message says: \${val}\`);
	}
<\/script>

<TextInput
	placeholder="Your message"
	label="Press ⌘+Enter or Ctrl+Enter when input has focus to send message"
	bind:value
	on:keydown={getHotkeyHandler([['mod+Enter', () => onSubmit(value)]])}
/>
`,lo="demo",io={code:ro};function uo(h){alert(`Your message says: ${h}`)}function co(h,s,f){let l="I am using a hotkey to submit";function y(m){l=m,f(0,l)}return[l,y,()=>uo(l)]}class po extends ct{constructor(s){super(),pt(this,s,co,ao,ft,{})}}const fo=Object.freeze(Object.defineProperty({__proto__:null,configuration:io,default:po,type:lo},Symbol.toStringTag,{value:"Module"}));function mo(h){let s,f,l,y,k,m,d,$,b,R,Te,He,W,Ce,ce,H,pe,A,De,fe,w,B,Le,Oe,X,xe,Ie,de,C,me,j,Pe,he,E,g,q,Ae,je,K,Ue,Ye,F,ze,Me,Re,U,G,We,Be,Xe,Y,V,qe,Ke,Fe,D,J,Ge,Ve,L,Je,ye,z,Ne,_e,S,N,O,Q,Qe,Ze,Z,et,tt,ee,x,te,ot,st,oe,nt,ve,M,at,ke,I,Ut='<code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hotkey</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> <span class="token literal-property property">hotkeys</span><span class="token operator">:</span> HotkeyItem<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span>Action<span class="token operator">></span><span class="token punctuation">;</span></code>',$e;return H=new At({props:{demo:no}}),C=new At({props:{demo:fo}}),{c(){s=n("h2"),f=i("Usage"),l=_(),y=n("p"),k=n("code"),m=i("use-hot-key"),d=i(" accepts an array of hotkeys and handler tuples:"),$=_(),b=n("ul"),R=n("li"),Te=i("hotkey - hotkey string e.g. ctrl+E, shift+alt+L, mod+S"),He=_(),W=n("li"),Ce=i("handler - event handler called when given combination was pressed"),ce=_(),ne(H.$$.fragment),pe=_(),A=n("h2"),De=i("Targeting elements"),fe=_(),w=n("p"),B=n("code"),Le=i("use-hot-key"),Oe=i(" can only work with the document element; if you need to support other elements then you’ll need to create your own event listener. The package includes a "),X=n("code"),xe=i("getHotkeyHandler"),Ie=i(" function that should be used in conjunction with on:keydown:"),de=_(),ne(C.$$.fragment),me=_(),j=n("h2"),Pe=i("Supported formats"),he=_(),E=n("ul"),g=n("li"),q=n("code"),Ae=i("mod+S"),je=i(" – detects "),K=n("code"),Ue=i("⌘+S"),Ye=i(" on macOS and "),F=n("code"),ze=i("Ctrl+S"),Me=i(" on Windows and Linux (depending on the mod key configured)"),Re=_(),U=n("li"),G=n("code"),We=i("ctrl+shift+X"),Be=i(" – handles multiple modifiers"),Xe=_(),Y=n("li"),V=n("code"),qe=i("alt + shift + L"),Ke=i(" – you can use whitespace inside hotkey"),Fe=_(),D=n("li"),J=n("code"),Ge=i("ArrowLeft"),Ve=i(" – you can use special keys using this "),L=n("a"),Je=i("format"),ye=_(),z=n("h2"),Ne=i("Params"),_e=_(),S=n("table"),N=n("thead"),O=n("tr"),Q=n("th"),Qe=i("Param"),Ze=_(),Z=n("th"),et=i("Description"),tt=_(),ee=n("tbody"),x=n("tr"),te=n("td"),ot=i("hotkeys"),st=_(),oe=n("td"),nt=i("An array of hot keys and their respective actions"),ve=_(),M=n("h2"),at=i("Definition"),ke=_(),I=n("pre"),this.h()},l(e){s=a(e,"H2",{});var c=r(s);f=u(c,"Usage"),c.forEach(t),l=v(e),y=a(e,"P",{});var rt=r(y);k=a(rt,"CODE",{});var dt=r(k);m=u(dt,"use-hot-key"),dt.forEach(t),d=u(rt," accepts an array of hotkeys and handler tuples:"),rt.forEach(t),$=v(e),b=a(e,"UL",{});var Ee=r(b);R=a(Ee,"LI",{});var mt=r(R);Te=u(mt,"hotkey - hotkey string e.g. ctrl+E, shift+alt+L, mod+S"),mt.forEach(t),He=v(Ee),W=a(Ee,"LI",{});var ht=r(W);Ce=u(ht,"handler - event handler called when given combination was pressed"),ht.forEach(t),Ee.forEach(t),ce=v(e),ae(H.$$.fragment,e),pe=v(e),A=a(e,"H2",{});var yt=r(A);De=u(yt,"Targeting elements"),yt.forEach(t),fe=v(e),w=a(e,"P",{});var se=r(w);B=a(se,"CODE",{});var _t=r(B);Le=u(_t,"use-hot-key"),_t.forEach(t),Oe=u(se," can only work with the document element; if you need to support other elements then you’ll need to create your own event listener. The package includes a "),X=a(se,"CODE",{});var vt=r(X);xe=u(vt,"getHotkeyHandler"),vt.forEach(t),Ie=u(se," function that should be used in conjunction with on:keydown:"),se.forEach(t),de=v(e),ae(C.$$.fragment,e),me=v(e),j=a(e,"H2",{});var kt=r(j);Pe=u(kt,"Supported formats"),kt.forEach(t),he=v(e),E=a(e,"UL",{});var T=r(E);g=a(T,"LI",{});var P=r(g);q=a(P,"CODE",{});var $t=r(q);Ae=u($t,"mod+S"),$t.forEach(t),je=u(P," – detects "),K=a(P,"CODE",{});var Et=r(K);Ue=u(Et,"⌘+S"),Et.forEach(t),Ye=u(P," on macOS and "),F=a(P,"CODE",{});var bt=r(F);ze=u(bt,"Ctrl+S"),bt.forEach(t),Me=u(P," on Windows and Linux (depending on the mod key configured)"),P.forEach(t),Re=v(T),U=a(T,"LI",{});var lt=r(U);G=a(lt,"CODE",{});var gt=r(G);We=u(gt,"ctrl+shift+X"),gt.forEach(t),Be=u(lt," – handles multiple modifiers"),lt.forEach(t),Xe=v(T),Y=a(T,"LI",{});var it=r(Y);V=a(it,"CODE",{});var wt=r(V);qe=u(wt,"alt + shift + L"),wt.forEach(t),Ke=u(it," – you can use whitespace inside hotkey"),it.forEach(t),Fe=v(T),D=a(T,"LI",{});var be=r(D);J=a(be,"CODE",{});var St=r(J);Ge=u(St,"ArrowLeft"),St.forEach(t),Ve=u(be," – you can use special keys using this "),L=a(be,"A",{href:!0,rel:!0});var Tt=r(L);Je=u(Tt,"format"),Tt.forEach(t),be.forEach(t),T.forEach(t),ye=v(e),z=a(e,"H2",{});var Ht=r(z);Ne=u(Ht,"Params"),Ht.forEach(t),_e=v(e),S=a(e,"TABLE",{});var ge=r(S);N=a(ge,"THEAD",{});var Ct=r(N);O=a(Ct,"TR",{});var we=r(O);Q=a(we,"TH",{});var Dt=r(Q);Qe=u(Dt,"Param"),Dt.forEach(t),Ze=v(we),Z=a(we,"TH",{});var Lt=r(Z);et=u(Lt,"Description"),Lt.forEach(t),we.forEach(t),Ct.forEach(t),tt=v(ge),ee=a(ge,"TBODY",{});var Ot=r(ee);x=a(Ot,"TR",{});var Se=r(x);te=a(Se,"TD",{});var xt=r(te);ot=u(xt,"hotkeys"),xt.forEach(t),st=v(Se),oe=a(Se,"TD",{});var It=r(oe);nt=u(It,"An array of hot keys and their respective actions"),It.forEach(t),Se.forEach(t),Ot.forEach(t),ge.forEach(t),ve=v(e),M=a(e,"H2",{});var Pt=r(M);at=u(Pt,"Definition"),Pt.forEach(t),ke=v(e),I=a(e,"PRE",{class:!0});var Yt=r(I);Yt.forEach(t),this.h()},h(){ut(L,"href","https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values"),ut(L,"rel","nofollow"),ut(I,"class","language-js")},m(e,c){p(e,s,c),o(s,f),p(e,l,c),p(e,y,c),o(y,k),o(k,m),o(y,d),p(e,$,c),p(e,b,c),o(b,R),o(R,Te),o(b,He),o(b,W),o(W,Ce),p(e,ce,c),re(H,e,c),p(e,pe,c),p(e,A,c),o(A,De),p(e,fe,c),p(e,w,c),o(w,B),o(B,Le),o(w,Oe),o(w,X),o(X,xe),o(w,Ie),p(e,de,c),re(C,e,c),p(e,me,c),p(e,j,c),o(j,Pe),p(e,he,c),p(e,E,c),o(E,g),o(g,q),o(q,Ae),o(g,je),o(g,K),o(K,Ue),o(g,Ye),o(g,F),o(F,ze),o(g,Me),o(E,Re),o(E,U),o(U,G),o(G,We),o(U,Be),o(E,Xe),o(E,Y),o(Y,V),o(V,qe),o(Y,Ke),o(E,Fe),o(E,D),o(D,J),o(J,Ge),o(D,Ve),o(D,L),o(L,Je),p(e,ye,c),p(e,z,c),o(z,Ne),p(e,_e,c),p(e,S,c),o(S,N),o(N,O),o(O,Q),o(Q,Qe),o(O,Ze),o(O,Z),o(Z,et),o(S,tt),o(S,ee),o(ee,x),o(x,te),o(te,ot),o(x,st),o(x,oe),o(oe,nt),p(e,ve,c),p(e,M,c),o(M,at),p(e,ke,c),p(e,I,c),I.innerHTML=Ut,$e=!0},p:Xt,i(e){$e||(le(H.$$.fragment,e),le(C.$$.fragment,e),$e=!0)},o(e){ie(H.$$.fragment,e),ie(C.$$.fragment,e),$e=!1},d(e){e&&t(s),e&&t(l),e&&t(y),e&&t($),e&&t(b),e&&t(ce),ue(H,e),e&&t(pe),e&&t(A),e&&t(fe),e&&t(w),e&&t(de),ue(C,e),e&&t(me),e&&t(j),e&&t(he),e&&t(E),e&&t(ye),e&&t(z),e&&t(_e),e&&t(S),e&&t(ve),e&&t(M),e&&t(ke),e&&t(I)}}}const Eo={title:"use-hot-key",group:"svelteuidev-composables",packageGroup:"@svelteuidev/composables",slug:"/composables/use-hot-key/",description:"Listen for key combinations/shortcuts on document or a given element.",importCode:"import { hotkey } from '@svelteuidev/composables';",source:"svelteui-composables/src/actions/use-hot-key/use-hot-key.ts",docs:"composables/use-hot-key.md"};class bo extends ct{constructor(s){super(),pt(this,s,null,mo,ft,{})}}export{bo as default,Eo as metadata};
