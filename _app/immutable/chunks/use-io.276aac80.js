const i=(e,o)=>new CustomEvent(e,{detail:o}),h={root:null,rootMargin:"0px",threshold:0,unobserveOnEnter:!1};function b(e,o={}){const{root:u,rootMargin:l,threshold:v,unobserveOnEnter:d}={...h,...o};let r={x:void 0,y:void 0};const n={vertical:void 0,horizontal:void 0};if(typeof IntersectionObserver<"u"&&e){const s=new IntersectionObserver((f,a)=>{f.forEach(t=>{r.y>t.boundingClientRect.y?n.vertical="up":n.vertical="down",r.x>t.boundingClientRect.x?n.horizontal="left":n.horizontal="right",r={y:t.boundingClientRect.y,x:t.boundingClientRect.x};const c={inView:t.isIntersecting,entry:t,scrollDirection:n,node:e,observer:a};e.dispatchEvent(i("change",c)),t.isIntersecting?(e.dispatchEvent(i("enter",c)),d&&a.unobserve(e)):e.dispatchEvent(i("leave",c))})},{root:u,rootMargin:l,threshold:v});return setTimeout(()=>{e.dispatchEvent(i("init",{observer:s,node:e}))},0),s.observe(e),{destroy:()=>{s.unobserve(e)}}}}export{b as i};
