import{S as Vt,i as Yt,s as Kt,y as xs,z as Cs,A as Os,g as Is,d as As,B as Ps,q as a,r as e,b as u,h as t,X as Qt,k as c,a as d,l as r,m as i,c as h,n as v,W as n}from"./index.b4f0bbdc.js";import{D as an}from"./Demo.9cccb4ab.js";import{G as en}from"./GithubLogo.46fc195e.js";import{C as on}from"./Center.c93e1a75.js";import{B as pn}from"./Button.b50e74fc.js";function ln(y){let o;return{c(){o=a("I love open source!")},l(k){o=e(k,"I love open source!")},m(k,p){u(k,o,p)},d(k){k&&t(o)}}}function cn(y){let o,k;return o=new en({props:{slot:"leftIcon",size:16}}),{c(){xs(o.$$.fragment)},l(p){Cs(o.$$.fragment,p)},m(p,f){Os(o,p,f),k=!0},p:Qt,i(p){k||(Is(o.$$.fragment,p),k=!0)},o(p){As(o.$$.fragment,p),k=!1},d(p){Ps(o,p)}}}function rn(y){let o,k;return o=new pn({props:{override:y[0],$$slots:{leftIcon:[cn],default:[ln]},$$scope:{ctx:y}}}),{c(){xs(o.$$.fragment)},l(p){Cs(o.$$.fragment,p)},m(p,f){Os(o,p,f),k=!0},p(p,f){const $={};f&2&&($.$$scope={dirty:f,ctx:p}),o.$set($)},i(p){k||(Is(o.$$.fragment,p),k=!0)},o(p){As(o.$$.fragment,p),k=!1},d(p){Ps(o,p)}}}function un(y){let o,k;return o=new on({props:{$$slots:{default:[rn]},$$scope:{ctx:y}}}),{c(){xs(o.$$.fragment)},l(p){Cs(o.$$.fragment,p)},m(p,f){Os(o,p,f),k=!0},p(p,[f]){const $={};f&2&&($.$$scope={dirty:f,ctx:p}),o.$set($)},i(p){k||(Is(o.$$.fragment,p),k=!0)},o(p){As(o.$$.fragment,p),k=!1},d(p){Ps(o,p)}}}const kn=`
<script>
  import { Button } from '@svelteuidev/core';
  import { GithubLogo } from 'radix-icons-svelte';

  const PrimaryButton = {
    $$blue: '#228be6',
    boxShadow: '0 2px 14px $$blue',
    transition: 'all 0.2s ease-in-out',
    '&:hover': {
      boxShadow: '0 4px 20px $$blue'
    }
  };
<\/script>

<Button override={PrimaryButton}>
	<GithubLogo slot="leftIcon" size={16} /> I love open source!
</Button>
`,fn="demo",dn={code:kn};function hn(y){return[{$$blue:"#228be6",boxShadow:"0 2px 14px $$blue",transition:"all 0.2s ease-in-out","&:hover":{boxShadow:"0 4px 20px $$blue"}}]}class mn extends Vt{constructor(o){super(),Yt(this,o,hn,un,Kt,{})}}const vn=Object.freeze(Object.defineProperty({__proto__:null,configuration:dn,default:mn,type:fn},Symbol.toStringTag,{value:"Module"}));function gn(y){let o,k,p,f,$,I,Ts,Ds,os,E,Us,A,Bs,Hs,ps,j,w,js,V,Ls,Gs,L,Ms,qs,ls,G,zs,cs,S,Rs,Y,Ws,Fs,K,Ns,Vs,rs,P,is,M,Ys,us,g,Ks,q,Qs,Xs,Q,Js,Zs,X,st,tt,ks,T,Xt=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStyles <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> condition <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token function">createStyles</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">theme<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> condition <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
		<span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
			<span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span>
			<span class="token literal-property property">color</span><span class="token operator">:</span> theme<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">themeColor</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token literal-property property">fontSize</span><span class="token operator">:</span> condition <span class="token operator">?</span> <span class="token string">'22px'</span> <span class="token operator">:</span> <span class="token string">'16px'</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> getStyles <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> condition <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

// the returned function can take an object, and the override happens in the css property
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token function">getStyles</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'$grape400'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Some content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,fs,z,nt,ds,x,at,J,et,ot,hs,D,Jt=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Box <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Box</span> <span class="token attr-name">root</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I was a div but now I'm a paragraph tag!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Box</span><span class="token punctuation">></span></span></code>`,ms,C,pt,Z,lt,ct,vs,R,rt,gs,b,it,ss,ut,kt,ts,ft,dt,ys,U,Zt=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppShell</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-shell h-full flex flex-col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>YourHeaderComponent</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>

  <span class="token comment">&lt;!-- Content --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container flex-grow<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

  <span class="token comment">&lt;!-- Footer --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>YourFooterComponent</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AppShell</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">global</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
 <span class="token comment">/* Target the first inner wrapper container inside the AppShell */</span>
 <span class="token selector">.app-shell > div</span> <span class="token punctuation">&#123;</span>
   <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
   <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
   <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token comment">/* Target the wrapper div *for content* which is two layers down inside the AppShell */</span>
 <span class="token selector">.app-shell > div > div.body</span> <span class="token punctuation">&#123;</span>
   <span class="token property">flex-grow</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code>`,Ss,m,ht,B,mt,vt,ns,gt,yt,H,as,St,bt,es,_t,$t,bs;return P=new an({props:{demo:vn}}),{c(){o=c("h1"),k=a("Getting Started"),p=d(),f=c("p"),$=a("SvelteUI makes it simple to override components default styles. We recommend reading the "),I=c("a"),Ts=a("Stitches Styling docs"),Ds=a(" before overriding the SvelteUI component styles. This is because styling with SvelteUI is very similar to styling with vanilla CSS, or CSS-preprocessors (SCSS/Sass) but with extra features, and reading that will help you get started."),os=d(),E=c("p"),Us=a("Remember that all "),A=c("a"),Bs=a("Stitches"),Hs=a(" features are available in SvelteUI since it uses Stitches as a styling engine."),ps=d(),j=c("blockquote"),w=c("p"),js=a("Note: The tokens used here like "),V=c("code"),Ls=a("$$blue"),Gs=a(", etc.. are defined in the "),L=c("a"),Ms=a("default theme"),qs=a(" section."),ls=d(),G=c("h2"),zs=a("Using the css prop"),cs=d(),S=c("p"),Rs=a("SvelteUI provides all components the "),Y=c("code"),Ws=a("override"),Fs=a(" prop for overriding styles easily. It’s like the "),K=c("code"),Ns=a("style"),Vs=a(" attribute on normal elements, but it supports tokens, media queries, nesting and token-aware values."),rs=d(),xs(P.$$.fragment),is=d(),M=c("h2"),Ys=a("Overriding styles with the createStyles function"),us=d(),g=c("p"),Ks=a("When styling using the "),q=c("a"),Qs=a("createStyles function"),Xs=a(", you can also override styles by passing an object to the "),Q=c("code"),Js=a("css"),Zs=a(" property in the function returned from the "),X=c("code"),st=a("createStyles"),tt=a(" function. It may sound confusing at first, but it is much simpler than you may think:"),ks=d(),T=c("pre"),fs=d(),z=c("h2"),nt=a("Overriding the HTML tag"),ds=d(),x=c("p"),at=a("Various (but not all) components support changing their root elements with the "),J=c("code"),et=a("root"),ot=a(" prop:"),hs=d(),D=c("pre"),ms=d(),C=c("h2"),pt=a("Overriding using Svelte’s "),Z=c("code"),lt=a("<style global>"),ct=a(" functionality"),vs=d(),R=c("p"),rt=a("Svelte’s global CSS styling feature can be used to override and enhance styles for SvelteUI components and their internal DOM elements."),gs=d(),b=c("p"),it=a("Given a component with a known structure, like "),ss=c("code"),ut=a("AppShell"),kt=a(", which contains a "),ts=c("code"),ft=a("div.app-shell"),dt=a(" element used as a container, the following component would work:"),ys=d(),U=c("pre"),Ss=d(),m=c("p"),ht=a("The "),B=c("a"),mt=a("TailwindCSS"),vt=a("-flavored example code above makes targeted changes to the implicit inner "),ns=c("code"),gt=a("<div>"),yt=a(" contained in "),H=c("a"),as=c("code"),St=a("AppShell"),bt=a(" and another internal "),es=c("code"),_t=a("<div>"),$t=a(" in order to create a full page AppShell which expands to the height of the page."),this.h()},l(s){o=r(s,"H1",{});var l=i(o);k=e(l,"Getting Started"),l.forEach(t),p=h(s),f=r(s,"P",{});var _s=i(f);$=e(_s,"SvelteUI makes it simple to override components default styles. We recommend reading the "),I=r(_s,"A",{href:!0,rel:!0});var wt=i(I);Ts=e(wt,"Stitches Styling docs"),wt.forEach(t),Ds=e(_s," before overriding the SvelteUI component styles. This is because styling with SvelteUI is very similar to styling with vanilla CSS, or CSS-preprocessors (SCSS/Sass) but with extra features, and reading that will help you get started."),_s.forEach(t),os=h(s),E=r(s,"P",{});var $s=i(E);Us=e($s,"Remember that all "),A=r($s,"A",{href:!0,rel:!0});var Et=i(A);Bs=e(Et,"Stitches"),Et.forEach(t),Hs=e($s," features are available in SvelteUI since it uses Stitches as a styling engine."),$s.forEach(t),ps=h(s),j=r(s,"BLOCKQUOTE",{});var xt=i(j);w=r(xt,"P",{});var W=i(w);js=e(W,"Note: The tokens used here like "),V=r(W,"CODE",{});var Ct=i(V);Ls=e(Ct,"$$blue"),Ct.forEach(t),Gs=e(W,", etc.. are defined in the "),L=r(W,"A",{href:!0});var Ot=i(L);Ms=e(Ot,"default theme"),Ot.forEach(t),qs=e(W," section."),W.forEach(t),xt.forEach(t),ls=h(s),G=r(s,"H2",{});var It=i(G);zs=e(It,"Using the css prop"),It.forEach(t),cs=h(s),S=r(s,"P",{});var F=i(S);Rs=e(F,"SvelteUI provides all components the "),Y=r(F,"CODE",{});var At=i(Y);Ws=e(At,"override"),At.forEach(t),Fs=e(F," prop for overriding styles easily. It’s like the "),K=r(F,"CODE",{});var Pt=i(K);Ns=e(Pt,"style"),Pt.forEach(t),Vs=e(F," attribute on normal elements, but it supports tokens, media queries, nesting and token-aware values."),F.forEach(t),rs=h(s),Cs(P.$$.fragment,s),is=h(s),M=r(s,"H2",{});var Tt=i(M);Ys=e(Tt,"Overriding styles with the createStyles function"),Tt.forEach(t),us=h(s),g=r(s,"P",{});var O=i(g);Ks=e(O,"When styling using the "),q=r(O,"A",{href:!0});var Dt=i(q);Qs=e(Dt,"createStyles function"),Dt.forEach(t),Xs=e(O,", you can also override styles by passing an object to the "),Q=r(O,"CODE",{});var Ut=i(Q);Js=e(Ut,"css"),Ut.forEach(t),Zs=e(O," property in the function returned from the "),X=r(O,"CODE",{});var Bt=i(X);st=e(Bt,"createStyles"),Bt.forEach(t),tt=e(O," function. It may sound confusing at first, but it is much simpler than you may think:"),O.forEach(t),ks=h(s),T=r(s,"PRE",{class:!0});var sn=i(T);sn.forEach(t),fs=h(s),z=r(s,"H2",{});var Ht=i(z);nt=e(Ht,"Overriding the HTML tag"),Ht.forEach(t),ds=h(s),x=r(s,"P",{});var ws=i(x);at=e(ws,"Various (but not all) components support changing their root elements with the "),J=r(ws,"CODE",{});var jt=i(J);et=e(jt,"root"),jt.forEach(t),ot=e(ws," prop:"),ws.forEach(t),hs=h(s),D=r(s,"PRE",{class:!0});var tn=i(D);tn.forEach(t),ms=h(s),C=r(s,"H2",{});var Es=i(C);pt=e(Es,"Overriding using Svelte’s "),Z=r(Es,"CODE",{});var Lt=i(Z);lt=e(Lt,"<style global>"),Lt.forEach(t),ct=e(Es," functionality"),Es.forEach(t),vs=h(s),R=r(s,"P",{});var Gt=i(R);rt=e(Gt,"Svelte’s global CSS styling feature can be used to override and enhance styles for SvelteUI components and their internal DOM elements."),Gt.forEach(t),gs=h(s),b=r(s,"P",{});var N=i(b);it=e(N,"Given a component with a known structure, like "),ss=r(N,"CODE",{});var Mt=i(ss);ut=e(Mt,"AppShell"),Mt.forEach(t),kt=e(N,", which contains a "),ts=r(N,"CODE",{});var qt=i(ts);ft=e(qt,"div.app-shell"),qt.forEach(t),dt=e(N," element used as a container, the following component would work:"),N.forEach(t),ys=h(s),U=r(s,"PRE",{class:!0});var nn=i(U);nn.forEach(t),Ss=h(s),m=r(s,"P",{});var _=i(m);ht=e(_,"The "),B=r(_,"A",{href:!0,rel:!0});var zt=i(B);mt=e(zt,"TailwindCSS"),zt.forEach(t),vt=e(_,"-flavored example code above makes targeted changes to the implicit inner "),ns=r(_,"CODE",{});var Rt=i(ns);gt=e(Rt,"<div>"),Rt.forEach(t),yt=e(_," contained in "),H=r(_,"A",{href:!0,rel:!0});var Wt=i(H);as=r(Wt,"CODE",{});var Ft=i(as);St=e(Ft,"AppShell"),Ft.forEach(t),Wt.forEach(t),bt=e(_," and another internal "),es=r(_,"CODE",{});var Nt=i(es);_t=e(Nt,"<div>"),Nt.forEach(t),$t=e(_," in order to create a full page AppShell which expands to the height of the page."),_.forEach(t),this.h()},h(){v(I,"href","https://stitches.dev/docs/styling"),v(I,"rel","nofollow"),v(A,"href","https://stitches.dev"),v(A,"rel","nofollow"),v(L,"href","theming/default-theme"),v(q,"href","theming/create-styles#styling-with-svelteui"),v(T,"class","language-svelte"),v(D,"class","language-svelte"),v(U,"class","language-svelte"),v(B,"href","https://tailwindcss.com"),v(B,"rel","nofollow"),v(H,"href","https://github.com/svelteuidev/svelteui/blob/main/packages/svelteui-core/src/components/AppShell/AppShell.svelte"),v(H,"rel","nofollow")},m(s,l){u(s,o,l),n(o,k),u(s,p,l),u(s,f,l),n(f,$),n(f,I),n(I,Ts),n(f,Ds),u(s,os,l),u(s,E,l),n(E,Us),n(E,A),n(A,Bs),n(E,Hs),u(s,ps,l),u(s,j,l),n(j,w),n(w,js),n(w,V),n(V,Ls),n(w,Gs),n(w,L),n(L,Ms),n(w,qs),u(s,ls,l),u(s,G,l),n(G,zs),u(s,cs,l),u(s,S,l),n(S,Rs),n(S,Y),n(Y,Ws),n(S,Fs),n(S,K),n(K,Ns),n(S,Vs),u(s,rs,l),Os(P,s,l),u(s,is,l),u(s,M,l),n(M,Ys),u(s,us,l),u(s,g,l),n(g,Ks),n(g,q),n(q,Qs),n(g,Xs),n(g,Q),n(Q,Js),n(g,Zs),n(g,X),n(X,st),n(g,tt),u(s,ks,l),u(s,T,l),T.innerHTML=Xt,u(s,fs,l),u(s,z,l),n(z,nt),u(s,ds,l),u(s,x,l),n(x,at),n(x,J),n(J,et),n(x,ot),u(s,hs,l),u(s,D,l),D.innerHTML=Jt,u(s,ms,l),u(s,C,l),n(C,pt),n(C,Z),n(Z,lt),n(C,ct),u(s,vs,l),u(s,R,l),n(R,rt),u(s,gs,l),u(s,b,l),n(b,it),n(b,ss),n(ss,ut),n(b,kt),n(b,ts),n(ts,ft),n(b,dt),u(s,ys,l),u(s,U,l),U.innerHTML=Zt,u(s,Ss,l),u(s,m,l),n(m,ht),n(m,B),n(B,mt),n(m,vt),n(m,ns),n(ns,gt),n(m,yt),n(m,H),n(H,as),n(as,St),n(m,bt),n(m,es),n(es,_t),n(m,$t),bs=!0},p:Qt,i(s){bs||(Is(P.$$.fragment,s),bs=!0)},o(s){As(P.$$.fragment,s),bs=!1},d(s){s&&t(o),s&&t(p),s&&t(f),s&&t(os),s&&t(E),s&&t(ps),s&&t(j),s&&t(ls),s&&t(G),s&&t(cs),s&&t(S),s&&t(rs),Ps(P,s),s&&t(is),s&&t(M),s&&t(us),s&&t(g),s&&t(ks),s&&t(T),s&&t(fs),s&&t(z),s&&t(ds),s&&t(x),s&&t(hs),s&&t(D),s&&t(ms),s&&t(C),s&&t(vs),s&&t(R),s&&t(gs),s&&t(b),s&&t(ys),s&&t(U),s&&t(Ss),s&&t(m)}}}const wn={title:"Override",description:"Overriding base styles.",docs:"theming/override.md"};class En extends Vt{constructor(o){super(),Yt(this,o,null,gn,Kt,{})}}export{En as default,wn as metadata};
