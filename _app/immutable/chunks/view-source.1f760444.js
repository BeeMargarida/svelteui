import{S as Os,i as xs,s as Ps,k as c,q as o,a as k,l,m as r,r as t,h as e,c as m,n as us,b as p,W as n,X as is}from"./index.b4f0bbdc.js";function qs(_s){let y,Y,P,f,G,E,V,W,q,v,Es=`<code class="language-js"><span class="token comment">// svelte.config.js</span>
<span class="token keyword">import</span> adapter <span class="token keyword">from</span> <span class="token string">'@sveltejs/adapter-auto'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> preprocess <span class="token keyword">from</span> <span class="token string">'svelte-preprocess'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> viewSource <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/preprocessors'</span><span class="token punctuation">;</span>

<span class="token comment">/** @type &#123;import('@sveltejs/kit').Config&#125; */</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">preprocess</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">viewSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token comment">// ...rest of the config</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> config<span class="token punctuation">;</span></code>`,N,i,D,X,z,T,F,J,b,K,Q,H,h,Ds=`<code class="language-js"><span class="token function">viewSource</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	<span class="token literal-property property">sourceTagName</span><span class="token operator">:</span> <span class="token string">'ComponentOne'</span><span class="token punctuation">,</span>
	<span class="token literal-property property">displayTagName</span><span class="token operator">:</span> <span class="token string">'ComponentTwo'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,A,C,Z,M,u,$,I,ss,es,j,ns,as,O,os,ts,x,ps,cs,B,w,Ts=`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> SourceCode<span class="token punctuation">,</span> DisplaySourceCode <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/preprocessors'</span><span class="token punctuation">;</span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@svelteuidev/core'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SourceCode</span> <span class="token attr-name">sourceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>demo<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span><span class="token punctuation">></span></span>Click Me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SourceCode</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DisplaySourceCode</span> <span class="token attr-name">sourceId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>demo<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">let:</span>source</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>source<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>DisplaySourceCode</span><span class="token punctuation">></span></span></code>`,L,S,ls,R,_,rs;return{c(){y=c("h2"),Y=o("Setup"),P=k(),f=c("p"),G=o("Setting up the preprocessor requires you to place it in an array of preprocessors. It should come after "),E=c("code"),V=o("svelte-preprocess"),W=o(" but before others."),q=k(),v=c("pre"),N=k(),i=c("p"),D=c("code"),X=o("viewSource"),z=o(" optionally accepts an options object containing two keys: "),T=c("code"),F=o("sourceTagName"),J=o(" and "),b=c("code"),K=o("displayTagName"),Q=o(", which can be used to set the component the preprocessor looks for (in case you want to rename the components when you import them, or make your own)."),H=k(),h=c("pre"),A=k(),C=c("h2"),Z=o("Usage"),M=k(),u=c("p"),$=o("The view-source preprocessor exports two components, "),I=c("code"),ss=o("SourceCode"),es=o(" and "),j=c("code"),ns=o("DisplaySourceCode"),as=o(". You can write any code in a "),O=c("code"),os=o("SourceCode"),ts=o(" component anywhere in your app. Once you want to display your source code, you can use a "),x=c("code"),ps=o("DisplaySourceCode"),cs=o(" component."),B=k(),w=c("pre"),L=k(),S=c("p"),ls=o("The `SourceCode` element contains the source code you want to display. It accepts one required prop, `sourceId`, that will tie it to its display component(s). The `sourceId` prop must be unique across the .svelte file. No other `SourceCode` component can share it. A `SourceCode` element must have at least one corresponding `DisplaySourceCode` element."),R=k(),_=c("p"),rs=o("The `DisplaySourceCode` element will display whatever source code appears between the opening and closing tags of the `SourceCode` element. It will trim any leading or trailing blank lines and unindent the source code before passing it to a child component. If `DisplaySourceCode` does not receive a slot, it will display the source code in a `pre` element. If it does receive a slot, it will pass that slot a `source` prop. This prop is a string containing the exact source code from `SourceCode`. A `DisplaySourceCode` element must have one and only one corresponding `SourceCode` element."),this.h()},l(s){y=l(s,"H2",{});var a=r(y);Y=t(a,"Setup"),a.forEach(e),P=m(s),f=l(s,"P",{});var U=r(f);G=t(U,"Setting up the preprocessor requires you to place it in an array of preprocessors. It should come after "),E=l(U,"CODE",{});var ds=r(E);V=t(ds,"svelte-preprocess"),ds.forEach(e),W=t(U," but before others."),U.forEach(e),q=m(s),v=l(s,"PRE",{class:!0});var bs=r(v);bs.forEach(e),N=m(s),i=l(s,"P",{});var g=r(i);D=l(g,"CODE",{});var ks=r(D);X=t(ks,"viewSource"),ks.forEach(e),z=t(g," optionally accepts an options object containing two keys: "),T=l(g,"CODE",{});var ms=r(T);F=t(ms,"sourceTagName"),ms.forEach(e),J=t(g," and "),b=l(g,"CODE",{});var ys=r(b);K=t(ys,"displayTagName"),ys.forEach(e),Q=t(g,", which can be used to set the component the preprocessor looks for (in case you want to rename the components when you import them, or make your own)."),g.forEach(e),H=m(s),h=l(s,"PRE",{class:!0});var Is=r(h);Is.forEach(e),A=m(s),C=l(s,"H2",{});var fs=r(C);Z=t(fs,"Usage"),fs.forEach(e),M=m(s),u=l(s,"P",{});var d=r(u);$=t(d,"The view-source preprocessor exports two components, "),I=l(d,"CODE",{});var vs=r(I);ss=t(vs,"SourceCode"),vs.forEach(e),es=t(d," and "),j=l(d,"CODE",{});var hs=r(j);ns=t(hs,"DisplaySourceCode"),hs.forEach(e),as=t(d,". You can write any code in a "),O=l(d,"CODE",{});var ws=r(O);os=t(ws,"SourceCode"),ws.forEach(e),ts=t(d," component anywhere in your app. Once you want to display your source code, you can use a "),x=l(d,"CODE",{});var gs=r(x);ps=t(gs,"DisplaySourceCode"),gs.forEach(e),cs=t(d," component."),d.forEach(e),B=m(s),w=l(s,"PRE",{class:!0});var js=r(w);js.forEach(e),L=m(s),S=l(s,"P",{});var Cs=r(S);ls=t(Cs,"The `SourceCode` element contains the source code you want to display. It accepts one required prop, `sourceId`, that will tie it to its display component(s). The `sourceId` prop must be unique across the .svelte file. No other `SourceCode` component can share it. A `SourceCode` element must have at least one corresponding `DisplaySourceCode` element."),Cs.forEach(e),R=m(s),_=l(s,"P",{});var Ss=r(_);rs=t(Ss,"The `DisplaySourceCode` element will display whatever source code appears between the opening and closing tags of the `SourceCode` element. It will trim any leading or trailing blank lines and unindent the source code before passing it to a child component. If `DisplaySourceCode` does not receive a slot, it will display the source code in a `pre` element. If it does receive a slot, it will pass that slot a `source` prop. This prop is a string containing the exact source code from `SourceCode`. A `DisplaySourceCode` element must have one and only one corresponding `SourceCode` element."),Ss.forEach(e),this.h()},h(){us(v,"class","language-js"),us(h,"class","language-js"),us(w,"class","language-svelte")},m(s,a){p(s,y,a),n(y,Y),p(s,P,a),p(s,f,a),n(f,G),n(f,E),n(E,V),n(f,W),p(s,q,a),p(s,v,a),v.innerHTML=Es,p(s,N,a),p(s,i,a),n(i,D),n(D,X),n(i,z),n(i,T),n(T,F),n(i,J),n(i,b),n(b,K),n(i,Q),p(s,H,a),p(s,h,a),h.innerHTML=Ds,p(s,A,a),p(s,C,a),n(C,Z),p(s,M,a),p(s,u,a),n(u,$),n(u,I),n(I,ss),n(u,es),n(u,j),n(j,ns),n(u,as),n(u,O),n(O,os),n(u,ts),n(u,x),n(x,ps),n(u,cs),p(s,B,a),p(s,w,a),w.innerHTML=Ts,p(s,L,a),p(s,S,a),n(S,ls),p(s,R,a),p(s,_,a),n(_,rs)},p:is,i:is,o:is,d(s){s&&e(y),s&&e(P),s&&e(f),s&&e(q),s&&e(v),s&&e(N),s&&e(i),s&&e(H),s&&e(h),s&&e(A),s&&e(C),s&&e(M),s&&e(u),s&&e(B),s&&e(w),s&&e(L),s&&e(S),s&&e(R),s&&e(_)}}}const Hs={title:"viewSource",group:"svelteuidev-preprocessors",packageGroup:"@svelteuidev/preprocessors",slug:"/preprocessors/view-source/",description:"Preprocessor for displaying source code",source:"svelteui-preprocessors/src/SourceCode/preprocess.ts",docs:"preprocessors/view-source.md"};class As extends Os{constructor(y){super(),xs(this,y,null,qs,Ps,{})}}export{As as default,Hs as metadata};
